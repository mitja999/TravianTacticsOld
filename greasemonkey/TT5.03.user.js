// ==UserScript==
// @author      Jure 
// @name		Travian Tactics
// @namespace	userscripts.org
// @description	Builds, farm, trade, train troops, party, armor upgrade, crop/farm finder in travian. Multilanguage support. ALL FEATURES now work on T3, T4 and T4.2!
// @include     http://*.travian.*/*
// @include     https://*.travian.*/*
// @include     http://*.travian.*/*
// @include     https://*.travian.*.*/*
// @include     http://*.travian.*.*/*
// @include     http://travian.*/index.php*
// @include     *86.58.69.167:8080/traviantacticsonline.php?link=*
// @include     *86.58.69.167:8080/travianx/*
// @exclude     *86.58.69.167:8080*Reklame*
// @exclude     http*://*.travian*.*/hilfe.php*
// @exclude     http*://*.travian*.*/anleitung.php*
// @exclude     http*://*.travian*.*/impressum.php*
// @exclude     http*://*.travian*.*/anmelden.php*
// @exclude     http*://*.travian*.*/gutscheine.php*
// @exclude     http*://*.travian*.*/spielregeln.php*
// @exclude     http*://*.travian*.*/links.php*
// @exclude     http*://*.travian*.*/geschichte.php*
// @exclude     http*://*.travian*.*/tutorial.php*
// @exclude     http*://*.travian*.*/manual.php*
// @exclude     http*://*.travian*.*/manual.php*
// @exclude     http*://*.travian*.*/ajax.php*
// @exclude     http*://*.travian*.*/ad/*
// @exclude     http*://*.travian*.*/chat/*
// @exclude     http*://forum.travian*.*
// @exclude     http*://board.travian*.*
// @exclude     http*://shop.travian*.*
// @exclude     http*://*.travian*.*/support.php*
// @exclude     http*://help.travian*.*
// @exclude     http*://*.travian*.*manual.php*
// @exclude     http*://*wbb.forum.travian.com*
// @version     5.02
// @grant 	    GM_deleteValue
// @grant       GM_getValue
// @grant       GM_setValue
// @grant       GM_xmlhttpRequest
// @grant       GM_log
// @grant       GM_openInTab
// @grant       GM_addStyle
// @grant 	    GM.deleteValue
// @grant       GM.getValue
// @grant       GM.setValue
// @grant       GM.xmlHttpRequest
// @grant       GM.log
// @grant       GM.openInTab
// @grant       GM.addStyle
// @grant 	    unsafeWindow
// ==/UserScript==

if (typeof GM == 'undefined') {
    GM = {'log': console.log};
}


if (typeof GM_addStyle == 'undefined') {
    function GM_addStyle(aCss) {
        'use strict';
        let head = document.getElementsByTagName('head')[0];
        if (head) {
            let style = document.createElement('style');
            style.setAttribute('type', 'text/css');
            style.textContent = aCss;
            head.appendChild(style);
            return style;
        }
        return null;
    }
}
GM.addStyle = GM_addStyle;


if (typeof GM_registerMenuCommand == 'undefined') {
    function GM_registerMenuCommand(caption, commandFunc, accessKey) {
        if (!document.body) {
            console.error('GM_registerMenuCommand got no body.');
            return;
        }
        let menu = document.getElementById('gm-registered-menu');
        if (!menu) {
            menu = document.createElement('menu')
            menu.setAttribute('id', 'gm-registered-menu');
            menu.setAttribute('type', 'context');
            document.body.appendChild(menu);
            document.body.setAttribute('contextmenu', 'gm-registered-menu');
        }
        let menuItem = document.createElement('menuitem');
        menuItem.textContent = caption;
        menuItem.addEventListener('click', commandFunc, true);
        menu.appendChild(menuItem);
    }
}
GM.registerMenuCommand = GM_registerMenuCommand;


Object.entries({
    'GM_deleteValue': 'deleteValue',
    'GM_getResourceURL': 'getResourceUrl',
    //'GM_getValue': 'getValue',
    'GM_info': 'info',
    'GM_listValues': 'listValues',
    'GM_notification': 'notification',
    'GM_openInTab': 'openInTab',
    'GM_setClipboard': 'setClipboard',
    'GM_setValue': 'setValue',
    'GM_xmlhttpRequest': 'xmlHttpRequest',
}).forEach(([oldKey, newKey]) => {
    let old = this[oldKey];
    if (old) GM[newKey] = function() {
        new Promise((resolve, reject) => {
            try {
                console.log(arguments)
                console.log(old)
                console.log(this)
                resolve(old.apply(this, arguments));
            } catch (e) {
                console.log("err")
                reject(e);
            }
        });
    }
});
if (!GM.getValue)
{
    GM.getValue = function (a,b) {
        return new Promise((resolve, reject) => {
            try {
                resolve(GM_getValue(a,b));
            } catch (e) {
                console.log("catch");
                reject(e);
            }
        });
    }
}

////////////////
//// prevodi ///
////////////////



function Translate() {
    this.getdata = "Get Data";
    this.start = "Start";
    this.stop = "Stop";
    this.savetoserver = "Save to server";
    this.deletedata = "Delete data";
    this.sendsms = "Send SMS";
    this.cropfinder = "Farm/crop finder";
    this.succesful = "Successfull";
    this.tasklist = "Task list";
    this.farmlist = "Farm list";
    this.trade = "Trade";
    this.train = "Train";
    this.fill = "Fill";
    this.empty = "Empty";
    this.priority = "Priority";
    this.to = "To";
    this.on = "ON";
    this.name = "Name";
    this.type = "type";
    this.del = "Del";
    this.turnon = "Turn ON";
    this.turnoff = "Turn OFF";
    this.repetevery = "Repeat every";
    this.minutes = "minutes";
    this.sendonreturn = "send again on return";
    this.login = "Login to travian and pres Get Data";
    this.edit = "Double click to edit";
    this.newval = "Enter new value";
    this.inputnum = "You need to input a number";
    this.attopt = "Input new value:" + "\n" + "2=Reinforcement" + "\n" + "3=Attack" + "\n" + "4=Raid";
    this.attoptallowed = "Only values 2, 3 and 4 are allowed.";
    this.allfields = "All fields";
    this.buldings = ["Building site", "Woodcutter", "Clay Pit", "Iron Mine", "Cropland", "Sawmill", "Brickyard", "Iron Foundry", "Grain Mill", "Bakery", "Warehouse", "Granary", "Blacksmith", "Armoury", "Tournament Square", "Main Building", "Rally point", "Marketplace", "Embassy", "Barracks", "Stable", "Workshop", "Academy", "Cranny", "Town Hall", "Residence", "Palace", "Treasury", "Trade Office", "Great Barracks", "Great Stable", "City Wall", "Earth Wall", "Palisade", "Stonemason's Lodge", "Brewery", "Trapper", "Hero's Mansion", "Great Warehouse", "Great Granary", "Wonder of the World", "Horse Drinking Trough"];
    this.datarecieved = "Data recieved. Press start button to launch script.";
    this.datanotrecieved = "Data not recieved. Press update button agin to retry.";
    this.checking = "Checking what to do";
    this.analysingvillages = "Analysing all your villages.";
    this.sendingresurces = "Sending resources";
    this.trainingtroops = "Training troops";
    this.building = "Building";
    this.sendingtroops = "Sending troops to ";
    this.stopped = "Stopped";
    this.buildingsucessful = "Building sucessfull";
    this.buildingatwantedlevel = "Building unsucessfull. Buildung is already at wanted level";
    this.unabletobuild = "Building unsucessfull. Unable to build.";
    this.sendingressucessful = "Sending resources sucessfull";
    this.notenoughtres = "Not enought resources.";
    this.unabletosendres = "Unable to send resources to this destination.";
    this.trainingsuccesful = "Training troops sucessfull";
    this.sendingtroopssuccesul = "Sending troops sucessfull.";
    this.deletedfarm = "Farm deleted/blocked";
    this.farminunsuccesful = "Farming unsuccesful";
    this.gettingdata = "Getting data";
    this.deletingdata = "Deleting data";
    this.deleted = "Deleted";
    this.nodata = "Error: probably no data on server";
    this.upgradeallfields = "Upgrade all fields";
    this.veryhigh = "Very high";
    this.high = "High";
    this.normal = "Normal";
    this.low = "Low";
    this.verylow = "Very low";
    this.level = "Level";
    this.addtask = "Add task";
    this.fillres = "Fill resources to set %:";
    this.emptyres = "Empty resources to set % :";
    this.onetimesending = "One time sending";
    this.bypercent = "Send by %";
    this.custom = "Custom";
    this.minsres = "Min res:";
    this.trainonce = "Train once";
    this.trainlater = "Train later";
    this.addtofarmlist = "Add to farmlist";
    this.helpupgradeallfields = "Set task to upgrade all your fields. if set to level 10, all fields will be upgraded to level 1, then all to level 2,... until all fields are at wanted level.";
    this.helptrain = "Train troops later. " + "\n";
    this.helptrain += "Train once: troops will ve trained and task will be deleted" + "\n";
    this.helptrain += "Repeat every minutes: after script trains units, it will wait for set time and then try to train units again. If you dont have enought resources, script will wait to get enought resources, train units when there is enought resources and again wait for set time before training again. Task will not get deleted from list.";
    this.helpsendres = "Traider" + "\n"
    this.helpsendres += "One time sending: imput resources into resource boxes and set coordinate, click add task and bot will send them later" + "\n"
    this.helpsendres += "Send on return: imput resources into resource boxes and set coordinate, click add task and bot will send them to other village as soon as traiders return from trip" + "\n"
    this.helpsendres += "Send every minutes: imput resources into resource boxes and set coordinate, imput X number, click add task and bot will try to send them to other village every X minutes" + "\n"
    this.helpsendres += "Send by % : " + "\n";
    this.helpsendres += "Min res: min amount of res script can send (so it wont send 1 resource)" + "\n"
    this.helpsendres += "Empty resources to set % : this village should send as much resourses to set village that in village will remain that % of resources that are set:" + "\n"
    this.helpsendres += "If all set to 10% and you have warhouse 80 000, village will try to send out all resources but 8000 of each will remain in village." + "\n"
    this.helpsendres += "Fill resources to set %: the village you are sending resourses to should fill to warhouse of village you are sending to to this value:" + "\n"
    this.helpsendres += "If all set to 90% and warhouse can contain 80 000 resources, it will send resources to this village untill it reaches 72 000." + "\n"
    this.helpsendres += "So this village should never have less then set % resources (unless you spend it otherwise) and village you are sending resources to should not have more resources then set % (unless it produce them or get it from other villages later)." + "\n"
    this.helptasklist = "Task added in travian window will show up here." + "\n";
    this.helptasklist += "Every village has its own building list";
    this.helpfarmlist = "Farms added in travian window will show up here. Double click on number you wish to change and window will show up where you can set new number." + "\n";
    this.helpfarmlist += "Checkbox decide if farm is turned on or off" + "\n";
    this.helpfarmlist += "Buttons Turn On and Turn Off decide if whole farmlist for this village is turned on" + "\n";

}


Translate.prototype.nastavi = function (lang) {

    switch (lang) {
        case "si":
            this.getdata = "Pridobi podatke";
            this.start = "Start";
            this.stop = "Stop";
            this.savetoserver = "Shrani na server";
            this.deletedata = "Izbrisi podatke";
            this.sendsms = "Pošlji sms";
            this.cropfinder = "Iskalec farm/žita";
            this.succesful = "Uspešno";
            this.tasklist = "Seznam nalog";
            this.farmlist = "Seznam farm";
            this.trade = "Trguj";
            this.train = "Uri";
            this.fill = "Napolni";
            this.empty = "Izprazni";
            this.priority = "Prioriteta";
            this.to = "V";
            this.on = "Vkluceno";
            this.name = "Ime";
            this.type = "tip";
            this.del = "Izbris";
            this.turnon = "Vkljuci";
            this.turnoff = "Izkljuci";
            this.repetevery = "Ponovi vsakih";
            this.minutes = "minut";
            this.login = "Prijavi se v travian in pritisni gubm Pridobi podatke";
            this.edit = "Double click to edit";
            this.newval = "Vstavi novo vrednost";
            this.inputnum = "Vstaviti je potrebno stevilo";
            this.attopt = "Vstavi novo vrednost:" + "\n" + "2=Okrepitve" + "\n" + "3=Napad" + "\n" + "4=Ropanje";
            this.attoptallowed = "Dovoljena so le števila 2, 3 in 4.";
            this.allfields = "Vsa polja";
            this.buldings = ["zazidljiva parcela", "Gozdar", "Glinokop", "Rudnik železa", "Žitno polje", "Žaga", "Opekarna", "Talilnica železa", "Mlin", "Pekarna", "Skladišče", "Žitnica", "Izdelovalec orožja", "Izdelovalec oklepov", "Vadbišče", "Gradbeni ceh", "Zbirališče", "Tržnica", "Ambasada", "Barake", "Konjušnica", "Izdelovalec oblegovalnih naprav", "Akademija", "Špranja", "Mestna hiša", "Rezidenca", "Palača", "Zakladnica", "Trgovski center", "Velike barake", "Velika konjušnica", "Mestno obzidje", "Zemljen zid", "Palisada", "Kamnosek", "Pivovarna", "Postavljalec pasti", "Herojeva rezidenca", "Veliko skladišče", "Velika žitnica", "Čudo sveta", "Konjsko napajališče"];
            this.datarecieved = "Podatki so pridoljeni. Klikni start za zagon.";
            this.datanotrecieved = "Podatki niso bili pridobljeni. Klikni update gumb za ponovni poizkus.";
            this.checking = "Razmišljam kaj bi naredila";
            this.analysingvillages = "Analiziranje vasic.";
            this.sendingresurces = "Posiljanje surovin";
            this.trainingtroops = "Treniranje enot";
            this.building = "Gradnja";
            this.sendingtroops = "Pošiljanje enot k ";
            this.stopped = "Ustavljeno";
            this.buildingsucessful = "Gradnja uspešna";
            this.buildingatwantedlevel = "Gradnja neuspešna. Zgradba je že na zahtevani stopnji";
            this.unabletobuild = "Gradnja neuspešna. Nemogoče graditi.";
            this.sendingressucessful = "Pošiljanje surovin neuspešno";
            this.notenoughtres = "Premalo surovin.";
            this.unabletosendres = "Nemogoče je poslati surovine na željeno lokacijo.";
            this.trainingsuccesful = "Uspešno urjenje enot";
            this.sendingtroopssuccesul = "Uspešno pošiljanje enot.";
            this.deletedfarm = "Farma je izbrisana/blokirana";
            this.farminunsuccesful = "Farmanje neuspešno";
            this.gettingdata = "Pridobivanje podatkov";
            this.deletingdata = "Brisanje podatkov";
            this.deleted = "Izbrisano";
            this.nodata = "Napaka: verjetno ni podatkov na serverju";
            this.upgradeallfields = "Nadgradi vsa polja";
            this.veryhigh = "Zelo visoka";
            this.high = "Visoka";
            this.normal = "Normalna";
            this.low = "Nizka";
            this.verylow = "Zelo nizka";
            this.level = "Stopnja";
            this.addtask = "Dodaj opravilo";
            this.fillres = "Napolni surovine do določenega %:";
            this.emptyres = "Izprazni surovine do določenega % :";
            this.onetimesending = "Enkratno pošiljanje";
            this.bypercent = "Pošlji po %";
            this.custom = "Po meri";
            this.minsres = "Minimalne surovine:";
            this.trainonce = "Treniraj enkrat";
            this.trainlater = "Treniraj kasneje";
            break;
        case "it":
            this.getdata = "Importa i Dati";
            this.start = "Start";
            this.stop = "Stop";
            this.savetoserver = "Salva su server";
            this.deletedata = "Elimina i dati";
            this.sendsms = "Invia SMS";
            this.cropfinder = "Trova Farm/grano";
            this.succesful = "OK";
            this.tasklist = "Lista Compiti";
            this.farmlist = "Lista Farm";
            this.trade = "Scambia";
            this.train = "Addestra";
            this.fill = "Riempi";
            this.empty = "Vuoto";
            this.priority = "Priorita";
            this.to = "Verso";
            this.on = "ON";
            this.name = "Nome";
            this.type = "tipo";
            this.del = "Del";
            this.turnon = "Attiva";
            this.turnoff = "Disattiva";
            this.repetevery = "Ripeti ogni";
            this.minutes = "minuti";
            this.sendonreturn = "Inviare nuovamente al ritorno";
            this.login = "Accedere a Travian e premere Importa i Dati";
            this.edit = "Doppio click per modificare";
            this.newval = "Inserire un nuovo valore";
            this.inputnum = "E' necessario inserire un valore numerico.";
            this.attopt = "Inserire un nuovo valore:" + "\n" + "2=Rinforzi" + "\n" + "3=Attacco" + "\n" + "4=Raid";
            this.attoptallowed = "Sono ammessi solo i valori 2, 3 e 4.";
            this.allfields = "Tutte le risorse";
            this.buldings = ["Sito di Costruzione", "Bosco", "Pozzo d'Argilla", "Miniera di Ferro", "Campo di Grano", "Segheria", "Fabbrica di Mattoni", "Fonderia", "Mulino", "Forno", "Magazzino", "Granaio", "Fabbro", "Armeria", "Arena", "Palazzo Pubblico", "Base Militare", "Mercato", "Ambasciata", "Caserma", "Scuderia", "Officina", "Accademia", "Deposito Segreto", "Municipio", "Reggia", "Castello", "Camera del Tesoro", "Ufficio Commerciale", "Grande Caserma", "Grande Scuderia", "Mura cittadine", "Fortificazioni", "Palizzata", "Genio Civile", "Birrificio", "Esperto di Trappole", "Dimora dell'Eroe", "Grande Magazzino", "Grande Granaio", "Meraviglia", "Fonte Equestre"];
            this.datarecieved = "Dati ricevuti. Premere il pulsante start per lanciare lo script.";
            this.datanotrecieved = "Dati non ricevuti. Premere il pulsante update per riprovare";
            this.checking = "Controllo in corso";
            this.analysingvillages = "Analisi dei villaggi";
            this.sendingresurces = "Invio di risorse";
            this.trainingtroops = "Truppe in addestramento";
            this.building = "Costruzione";
            this.sendingtroops = "Invio le truppe verso ";
            this.stopped = "Fermato";
            this.buildingsucessful = "Costruzione riuscita";
            this.buildingatwantedlevel = "Costruzione non riuscita. La costruzione e gia al livello desiderato.";
            this.unabletobuild = "Costruzione non riuscita. Impossibile costruire.";
            this.sendingressucessful = "Invio di risorse riuscito.";
            this.notenoughtres = "Risorse insufficienti.";
            this.unabletosendres = "Impossibile inviare risorse alla destinazione specificata.";
            this.trainingsuccesful = "Truppe addestrate.";
            this.sendingtroopssuccesul = "Invio di truppe riuscito.";
            this.deletedfarm = "Farm eliminata/bloccata";
            this.farminunsuccesful = "Farming non riuscito";
            this.gettingdata = "Ricezione dei dati";
            this.deletingdata = "Cancellazione dei dati";
            this.deleted = "Cancellato";
            this.nodata = "Errore: potrebbero non esserci dati sul server";
            this.upgradeallfields = "Amplia tutte le risorse";
            this.veryhigh = "Molto Alta";
            this.high = "Alta";
            this.normal = "Normale";
            this.low = "Bassa";
            this.verylow = "Molto Bassa";
            this.level = "Livello";
            this.addtask = "Aggiungi compito";
            this.fillres = "Riempi risorse fino alla % stabilita:";
            this.emptyres = "Svuota risorse alla % stabilita:";
            this.onetimesending = "Invia una sola volta";
            this.bypercent = "Invia per %";
            this.custom = "Personalizzato";
            this.minsres = "Minimo risorse:";
            this.trainonce = "Addestra una volta";
            this.trainlater = "Addestra dopo";
            this.addtofarmlist = "Aggiungi alla Lista Farm";
            this.helpupgradeallfields = "Aggiunge un compito per ampliare tutti i campi di risorse. Se impostato al livello 10, tutte le risorse saranno ampliate al livello 1, poi al livello 2,... finche tutte le risorse saranno del livello desiderato.";
            this.helptrain = "Addestra le truppe dopo. " + "\n";
            this.helptrain += "Addestra una volta: le truppe saranno addestrate e il compito eliminato" + "\n";
            this.helptrain += "Ripeti ogni minuto: dopo che lo script ha addestrato le unita, attendera un tempo prestabilito e provera ad addestrare ulteriori truppe. Se non si dispone delle risorse necessarie, lo script attendera di averne abbastanza, addestrera le nuove unita e attendera un tempo prestabilito prima di addestrarne altre. Il compito non verra rimosso dalla lista.";
            this.helpsendres = "Mercante" + "\n"
            this.helpsendres += "Invia una sola volta: inserire le risorse negli appositi spazi ed inserire le coordinate, cliccare su aggiungi compito e il bot le inviera successivamente" + "\n"
            this.helpsendres += "Invia al ritorno: inserire le risorse negli appositi spazi ed inserire le coordinate, cliccare su aggiungi compito e il bot le inviera non appena i mercanti saranno tornati dagli altri villaggi" + "\n"
            this.helpsendres += "Invia ogni minuto: inserire le risorse negli appositi spazi ed inserire le coordinate, inserire un numero X, cliccare su aggiungi compito e il bot provera ad inviarle agli altri villaggi ogni X minuti" + "\n"
            this.helpsendres += "Invia per % : " + "\n";
            this.helpsendres += "Minimo risorse: il minimo ammontare di risorse che lo script puo inviare" + "\n"
            this.helpsendres += "Svuota risorse fino alla % stabilita : questo villaggio inviera tante risorse al villaggio inserito quante quelle necessarie per rimanere con la % di risorse impostate: " + "\n"
            this.helpsendres += "Impostandolo al 10%, se possiedi un magazzino che puo contenere 80 000 risorse, il villaggio provera ad inviare tutte le risorse tranne 8 000 per risorsa." + "\n"
            this.helpsendres += "Riempi risorse fino alla % stabilita: il villaggio che invia dovra rimpire il magazzino del villaggio che riceve fino alla % stabilit:" + "\n"
            this.helpsendres += "Impostandolo al 90% se chi riceve le risorse ha un magazzino che puo contenerne 80 000, gli verranno inviate risorse finche non arrivera a 72 000." + "\n"
            this.helpsendres += "Quindi il villaggio non avra mai meno risorse della % stabilita e il villaggio ricevente non avra mai piu risorse della % impostata." + "\n"
            this.helptasklist = "I compiti aggiunti dalla finestra di Travian verranno elencati qui." + "\n";
            this.helptasklist += "Ogni villaggio ha la propria lista di costruzioni";
            this.helpfarmlist = "Le farm aggiunte dalla finestra di Travian verranno elencate qui. Fai doppio click sui numeri che vuoi cambiare: apparira una finestra che ti consentira di impostare un nuovo valore." + "\n";
            this.helpfarmlist += "Spuntare o meno le checkbox affianco alle farm per attivarle o meno" + "\n";
            this.helpfarmlist += "I pulsanti Attiva e Disattiva permettono di attivare o disattivare l'intera Lista Farm per questo villaggio" + "\n";
            break;
        case "com.eg":
        case "com.sa":
        case "com.sy":
        case "ae":
            this.getdata = "??????? ???????";
            this.start = "????";
            this.stop = "????";
            this.savetoserver = "??? ??? ??????";
            this.deletedata = "??? ????????";
            this.sendsms = "SMS ?????";
            this.cropfinder = "??? ?????/??????";
            this.succesful = "?? ?????";
            this.tasklist = "????? ??????";
            this.farmlist = "????? ???????";
            this.trade = "???????";
            this.train = "????? ??????";
            this.fill = "??????/?????";
            this.empty = "????";
            this.priority = "???????";
            this.to = "???";
            this.on = "???";
            this.name = "??? ??????";
            this.type = "???";
            this.del = "???";
            this.turnon = "?????";
            this.turnoff = "?????";
            this.repetevery = "X ????? ??";
            this.minutes = "?????";
            this.sendonreturn = "????? ??? ???? ??? ??????";
            this.login = "(??? ???? ???????? ?? ???? (??????? ???????";
            this.edit = "???? ?????? ???????";
            this.newval = "????? ???? ?????";
            this.inputnum = "??? ?? ???? ???";
            this.attopt = "????? ???? ?????:" + "\n" + "2= ?????" + "\n" + "3= ????" + "\n" + "4=??? ";
            this.attoptallowed = "??? ????? 2 ? 3 ? 4 ?? ??????? ???.";
            this.allfields = "???? ??????";
            this.buldings
            this.datarecieved = "?? ?????? ??? ????????? ???? ?? ????? ????? ????????";
            this.datanotrecieved = "?? ??? ?????? ??? ????????. ???? ?? ??????? ??? ???? ?????? ????????";
            this.checking = "?????? ?? ????? ???????";
            this.analysingvillages = "????? ??????? ?? ?????";
            this.sendingresurces = "????? ???????";
            this.trainingtroops = "????? ??????";
            this.building = "????";
            this.sendingtroops = "????? ?????? ??? ";
            this.stopped = "?????";
            this.buildingsucessful = "?? ?????? ?????";
            this.buildingatwantedlevel = "??? ??????. ?????? ?????? ?? ??????? ???????";
            this.unabletobuild = "??? ??????. ??? ???? ??? ??????";
            this.sendingressucessful = "?? ????? ??????? ?????";
            this.notenoughtres = "??????? ??? ?????";
            this.unabletosendres = "??? ???? ??? ????? ??????? ???? ??????";
            this.trainingsuccesful = "?? ????? ?????? ?????";
            this.sendingtroopssuccesul = "?? ????? ?????? ?????";
            this.deletedfarm = "??????? ????????/????????";
            this.farminunsuccesful = "??? ???????";
            this.gettingdata = "?????? ??? ????????";
            this.deletingdata = "??? ????????";
            this.deleted = "?????";
            this.nodata = "???: ?? ??????? ??? ?? ???? ?????? ??? ??????";
            this.upgradeallfields = "????? ?? ??????";
            this.veryhigh = "????? ???";
            this.high = "?????";
            this.normal = "?????";
            this.low = "?????";
            this.verylow = "????? ???";
            this.level = "???????";
            this.addtask = "????? ????";
            this.fillres = "??? ??????? ??? ???? X%:";
            this.emptyres = "????? ??????? ??? ???? X% :";
            this.onetimesending = "????? ??? ?????";
            this.bypercent = "????? ????? X%";
            this.custom = "?????";
            this.minsres = "??? ?? ???????:";
            this.trainonce = "??? ??? ?????";
            this.trainlater = "????? ?????";
            this.addtofarmlist = "????? ?????? ???????";
            this.helpupgradeallfields = "??? ?????? ?????? ???? ?????. ??? ?? ????? ?????? 10, ???? ?????? ???? ??????? ??? ??????? 1, ?? ??? ???? ??? ??????? 2 ... ??? ??? ???? ?????? ??????? ???????.";
            this.helptrain = "????? ?????? ?????. " + "\n";
            this.helptrain += "????? ??? ?????: ???? ????? ?????? ?? ??? ??? ?????? - ????? : ???? ????" + "\n";
            this.helptrain += "??????? ?? (?????): ??? ?? ??? ????? ??????, ?????? ???????? ????? ??????? ?? ????? ????? ??????? ??? ????. ??? ?? ??? ???? ??????? ???????, ?????? ???????? ???? ???? ????? ????? ???????, ?? ??? ??????? ??? ???? ????? ????? ??????? ????? ???? ???? ??? ??????? ??? ????. ?????? ?? ??? ????? ?? ????? ??????. - ????? : ???? ???? basim_fotoh@yahoo.com";
            this.helpsendres = "??????" + "\n"
            this.helpsendres += "????? ??? ?????: ???? ??????? ?????? ??????? ????? ??????, ???? ????? ?????? ???????? ????? ??????. - ????? : ???? ????" + "\n"
            this.helpsendres += "??????? ??? ??????: ???? ??????? ?????? ??????? ????? ??????, ???? ????? ?????? ???????? ????? ??? ?????? ?????? ??? ???? ?????? ?? ??????. - ????? : ???? ????" + "\n"
            this.helpsendres += "????? ?? (?????): ???? ??????? ?????? ??????? ????? ??????, ?? ?? ?????? ??? ???????, ???? ????? ?????? ??????? ????? ??????? ??? ?????? ?????? ???? ???? ??? ??????? ??? ??????? ??????? ??????. - ????? : ???? ????" + "\n"
            this.helpsendres += "????? ????? % : - ????? : ???? ????" + "\n";
            this.helpsendres += "??? ?? ???????: ??? ?? ??????? ???? ???????? ?????? (????? ?? ???? ?????? ???? ????) - ????? : ???? ????" + "\n"
            this.helpsendres += "????? ??????? ??? ???? % : ??? ?????? ??? ?? ???? ????? ??? ??? ???????? ?????? ???????? ????? ???? ?? ??????? ?????? ???????? % ?? ??????? ???? ?? ?????: - ????? : ???? ????" + "\n"
            this.helpsendres += "??? ?? ??? ???? ??? 10% ???? ????? 80 000, ?????? ?????? ????? ?? ??????? ?????? ???? 8000 ?? ?? ???? ?????? ?? ??????. - ????? : ???? ????" + "\n"
            this.helpsendres += "??? ??????? ??? ???? %: ?????? ???? ???? ???????? ????? ??? ?? ?????? ??????? ?????? ???? ???? ????????: - ????? : ???? ????" + "\n"
            this.helpsendres += "??? ?? ??? ???? ??? 90% ???? ????? 80 000 ?? ???????, ????? ???? ????? ??? ??? ?????? ??? ??? ??? 72 000 ?? ???????. - ????? : ???? ????" + "\n"
            this.helpsendres += "??? ?????? ??? ?? ?? ???? ??? ?? % ????? (?? ?? ???????? ????) ??????? ???? ???? ??? ??????? ??? ?? ?? ??? ??? ??????? ??? ?????? % (?? ?? ?????? ?? ???? ????? ?? ??? ???? ???? ???). - ????? : ???? ???? basim_fotoh@yahoo.com" + "\n"
            this.helptasklist = "?????? ???? ??? ??????? ?????? ??????? ????? ???. - ????? : ???? ????" + "\n";
            this.helptasklist += "?? ???? ????? ????? ?????? ???????? - ????? : ???? ???? basim_fotoh@yahoo.com";
            this.helpfarmlist = "??????? ???? ??? ??????? ?????? ??????? ????? ???. ???? ?????? ??? ????? ???? ???? ?????? ?????? ?? ????? ?????? ?? ?????? ????? ????? ???? ?????. - ????? : ???? ????" + "\n";
            this.helpfarmlist += "????? ??????? ?????? ?? ??? ???? ??? ??????? ???? ?? ?? - ????? : ???? ????" + "\n";
            this.helpfarmlist += "??????? ????? ?????? ?????? ?? ??? ???? ?? ????? ??????? ?????? ??? ???? ???? ?? ?? - ????? : ???? ???? basim_fotoh@yahoo.com" + "\n";
            break;
        case "ro":
            this.getdata = "Descarca datele";
            this.start = "Start";
            this.stop = "Stop";
            this.savetoserver = "Salveaza pe server";
            this.deletedata = "Sterge datele";
            this.sendsms = "Trimite SMS";
            this.cropfinder = "Gasire Ferma/crop";
            this.succesful = "Successfull";
            this.tasklist = "Lista sarcini";
            this.farmlist = "Lista Ferme";
            this.trade = "Trade";
            this.train = "Antreneaza";
            this.fill = "Plin";
            this.empty = "Gol";
            this.priority = "Prioritate";
            this.to = "Catre";
            this.on = "Pornit";
            this.name = "Nume";
            this.type = "tip";
            this.del = "Sterge";
            this.turnon = "Porneste";
            this.turnoff = "Opreste";
            this.repetevery = "Repeta la fiecare";
            this.minutes = "minute";
            this.sendonreturn = "Trimite din nou la intoarcere";
            this.login = "Logheaza-te si apasa Descarca datele";
            this.edit = "Dublu click pentru editare";
            this.newval = "Introdu valoarea";
            this.inputnum = "Introdu doar cifre";
            this.attopt = "Introdu valoarea:" + "\n" + "2=Intariri" + "\n" + "3=Atac" + "\n" + "4=Raid";
            this.attoptallowed = "Permise doar valorile 2,3,4.";
            this.allfields = "Toate campurile";
            this.buldings = ["Santier", "Padure", "Put de lut", "Mina de fier", "Lan de grau", "Fabrica de cherestea", "Fabrica de caramida", "Topitorie", "Moara", "Brutarie", "Hambar", "Granar", "Fierarie", "Fierarie", "Arena", "Primarie", "Adunare", "Targ", "Ambasada", "Cazarma", "Grajd", "Atelier", "Academie", "Beci", "Casa de cultura", "Vila", "Palat", "Trezorerie", "Oficiu de comert", "Cazarma extinsa", "Grajd extins", "Zid", "Metereze", "Palisada", "Arhitect", "Berarie", "Temnita", "Resedinta eroului", "Hambar extins", "Granar extins", "Minunea Lumii", "Adapatoare"];
            this.datarecieved = "Date primite. Apasa butonul Start pentru pornirea scriptului.";
            this.datanotrecieved = "Date nereceptionate. Apasa din nou butonul Descarca date.";
            this.checking = "Checking what to do";
            this.analysingvillages = "Analizez toate satele.";
            this.sendingresurces = "Trimit resurse";
            this.trainingtroops = "Antrenez trupe";
            this.building = "Construiesc";
            this.sendingtroops = "Trimit trupe catre ";
            this.stopped = "Oprit";
            this.buildingsucessful = "Constructie pornita";
            this.buildingatwantedlevel = "Constructie nepornita. Cladirea este deja la nivelul comandat";
            this.unabletobuild = "Constructie nepornita. Nu pot construi.";
            this.sendingressucessful = "Resurse trimise!";
            this.notenoughtres = "Resurse insuficiente.";
            this.unabletosendres = "Nu pot trimite resurse catre aceasta destinatie.";
            this.trainingsuccesful = "Trupe antrenate!";
            this.sendingtroopssuccesul = "Trupe trimise!";
            this.deletedfarm = "Ferma stearsa/blocata";
            this.farminunsuccesful = "Farmare nereusita";
            this.gettingdata = "Primire date";
            this.deletingdata = "Stergere date";
            this.deleted = "Sters";
            this.nodata = "Eroare: probabil lipsesc datele pe server";
            this.upgradeallfields = "Upgrade toate campurile";
            this.veryhigh = "Foarte urgent";
            this.high = "Urgent";
            this.normal = "Normal";
            this.low = "Scazut";
            this.verylow = "Foarte scazut";
            this.level = "Nivel";
            this.addtask = "Adauga sarcina";
            this.fillres = "Grad de umplere %:";
            this.emptyres = "Grad de golire % :";
            this.onetimesending = "O singura trimitere";
            this.bypercent = "Trimite ca %";
            this.custom = "Particularizat";
            this.minsres = "Resurse min:";
            this.trainonce = "O singura antrenare";
            this.trainlater = "Sarcina antrenare";
            this.addtofarmlist = "Adauga la lista de ferme";
            this.helpupgradeallfields = "Mareste toate campurile de resurse. Daca e ales nivelul 10, toate campurile vor fi marite succesiv la nivelul 1, apoi 2, ... pana se atinge nivelul dorit.";
            this.helptrain = "Sarcina pentru antrenare trupe. " + "\n";
            this.helptrain += "O singura antrenare: Trupele vor fi antrenate, iar sarcina va fi stearsa din lista" + "\n";
            this.helptrain += "Repeta la fiecare .. minute: scriptul asteapta numarul de minute setate intre terminarea unei unitati si antrenarea urmatoarei unitati. Daca nu exista suficiente resurse, scriptul asteapta acumularea de resurse, antreneaza unitatea si asteapta timpul setat pana la un nou ordin de antrenare. Sarcina nu va fi stearsa din lista de sarcini.";
            this.helpsendres = "Traider" + "\n"
            this.helpsendres += "O singura trimitere: trimite cantitatea de resurse setate la coordonatele dorite o singura data. Sarcina se sterge din lista la finalizare" + "\n"
            this.helpsendres += "Trimite din nou la intoarcere: trimite cantitatea de resurse setate la coordonatele dorite, se intoarce si repeta trimiterea" + "\n"
            this.helpsendres += "Trimite la fiecare .. minute: trimite cantitatea de resurse setate la coordonatele dorite, se intoarce, dupa care repeta sarcina dupa numarul de minute setate" + "\n"
            this.helpsendres += "Trimite ca % : " + "\n";
            this.helpsendres += "Resurse min: cantitatea min de resure peste care scriptul va trimite resursele" + "\n"
            this.helpsendres += "Grad de golire % : scriptul executa sarcina de trimitere a resurselor catre coordonatele dorite, atat timp cat in stoc se afla cel putin X % din capacitatea de stocare" + "\n"
            this.helpsendres += "De ex, daca se alege 10%, iar capacitatea de stocare este de 80 000, scriptul trimite resurse, atat timp cat in stoc se afla minim 8000 din fiecare resursa. Daca stocul e mai mic, asteapta." + "\n"
            this.helpsendres += "Grad de umplere %: scriptul executa sarcina de trimitere a resurselor catre coordonatele dorite, pana cand in stocul satului destinatie se acumuleaza maxim Y % din capacitatea de stocare:" + "\n"
            this.helpsendres += "De ex, daca se alege 90%, iar capacitatea de stocare este de 80 000, scriptul trimite resurse, pana cand in stoc se acumuleaza maxim 72 000 din fiecare resursa. Daca stocul e mai mare, asteapta." + "\n"
            this.helpsendres += "Asadar satul expeditor nu va avea niciodata mai putin de X % resurse in stoc (decat daca nu se consuma in alt mod), iar satul destinatar nu va avea niciodata mai mult de Y % resurse in stoc (decat daca nu se produce sau se primeste din alta parte)." + "\n"
            this.helptasklist = "Sarcinile adaugate vor fi afisate in aceasta fereastra." + "\n";
            this.helptasklist += "Fiecare sat are propria lista de sarcini de constructie";
            this.helpfarmlist = "Fermele adaugate vor fi afisate in aceasta fereastra. Dublu click pe numarul de unitati, permite modificarea acestora." + "\n";
            this.helpfarmlist += "Bifarea casutelor arata ca ferma respectiva este activata pentru farmare sau nu" + "\n";
            this.helpfarmlist += "Butoanele Porneste si Opreste activeaza sau dezactiveaza farmarea pentru intreaga lista de ferme" + "\n";
            break;
        case "co.id":
            this.getdata = "ambil data";
            this.start = "mulai";
            this.stop = "berhenti";
            this.savetoserver = "menyimpan di server";
            this.deletedata = "hapus data";
            this.sendsms = "kirim SMS";
            this.cropfinder = "pencari Farm/crop ";
            this.succesful = "berhasil";
            this.tasklist = "daftar tugas";
            this.farmlist = "daftar farm";
            this.trade = "dagang";
            this.train = "latih";
            this.fill = "isi";
            this.empty = "kosong";
            this.priority = "utama";
            this.to = "ke";
            this.on = "pada";
            this.name = "Nama";
            this.type = "jenis";
            this.del = "hapus";
            this.turnon = "nyalakan";
            this.turnoff = "matikan";
            this.repetevery = "ulang tiap";
            this.minutes = "menit";
            this.sendonreturn = "kirim lagi saat kembali";
            this.login = "Login ke travian dan klik ambil data";
            this.edit = "Double click pada edit";
            this.newval = "masukan new value";
            this.inputnum = "perlu memasukan angka";
            this.attopt = "masukan new value:" + "\n" + "2=bantuan" + "\n" + "3=serang" + "\n" + "4=Rampok";
            this.attoptallowed = "hanya values 2, 3 dan 4 are allowed.";
            this.allfields = "semua lahan";
            this.buldings = ["lokasi bangunan", "penebang kayu", "penggalian tanah liat", "tambang besi", "ladang", "pemotong kayu", "pabrik bata", "peleburan besi", "penggilingan gandum", "toko roti", "gudang", "lumbung", "pandai besi", "pabrik prisai", "pusat kebugaran", "bagunan utama", "titik temu", "pasar", "kedutaan", "Barak", "istal", "bengkel", "Academi", "Cranny", "balai desa", "kastil", "istana", "gudang ilmu", "kantor dagang", "barak besar", "istal besar", "pagar besi", "pagar tanah", "pagar kayu", "tukang batu", "pabrik bir", "perangkap", "padepokan", "gudang besar", "lumbung besar", "Wonder of the World", "tempat minum kuda"];
            this.datarecieved = "Data diterima. klik start untuk menjalankan script.";
            this.datanotrecieved = "data ditolak.ulangi, Klik update lagi.";
            this.checking = "mengecek apa yang harus dilakukan";
            this.analysingvillages = "menganalisa semua desa.";
            this.sendingresurces = "mengirim SDA";
            this.trainingtroops = "Melatih pasukan";
            this.building = "bangunan";
            this.sendingtroops = "mengirim pasukan ke ";
            this.stopped = "berhenti";
            this.buildingsucessful = "pembangunan selesei";
            this.buildingatwantedlevel = "pembangunan gagal. Bangunan telah berada pada level yang diinginkan";
            this.unabletobuild = "pembangunan gagal. Tidak bias membangun.";
            this.sendingressucessful = "pengiriman SDA berhasil";
            this.notenoughtres = "SDA tidak mencukupi.";
            this.unabletosendres = "tidak bias mengirim SDA ke tujuan.";
            this.trainingsuccesful = "pelatihan pasukan berhasil";
            this.sendingtroopssuccesul = "pengiriman pasukan berhasil.";
            this.deletedfarm = "Farm dihapus/block";
            this.farminunsuccesful = "Farming gagal";
            this.gettingdata = "mengambil data";
            this.deletingdata = "hapus data";
            this.deleted = "hapus";
            this.nodata = "Error: tidak ada data di server";
            this.upgradeallfields = "menaikan semua lahan";
            this.veryhigh = "sangat tinggi";
            this.high = "tinggi";
            this.normal = "normal";
            this.low = "rendah";
            this.verylow = "sangat rendah";
            this.level = "Level";
            this.addtask = "tambahkan tugas";
            this.fillres = "Fill resources to set %:";
            this.emptyres = "Empty resources to set % :";
            this.onetimesending = "pengiriman sekali";
            this.bypercent = "Send by %";
            this.custom = "Custom";
            this.minsres = "SDA minimal:";
            this.trainonce = "latih sekali";
            this.trainlater = "latih";
            this.addtofarmlist = "tambahkan ke daftar farm";
            this.helpupgradeallfields = "atur tugas menaikan semua lahan, jika di set ke level 10, semua lahan akan meningkat kelevel 1 kemudian 2 dst, sampai semua lahan mencapai level yang diinginkan.";
            this.helptrain = "Train troops later. " + "\n";
            this.helptrain += "latih sekali: pasukan akan dilatih kemudian tugas akan dihapus" + "\n";
            this.helptrain += "ulangi pelatihan: setelah scripts melatih pasukan, lalu menunggu sampai waktu yang telah di set, dan kemudian melatih pasukan kembali. Jika anda tidak memiliki cukup SDA, script akan menunggu sampai mendapat cukup SDA, tugas tidak akan dihapus dari daftar.";
            this.helpsendres = "pedagang" + "\n"
            this.helpsendres += "pengiriman sekali: masukan SDA ke kotak SDA dan set kordinat, click tambahkan tugas, dan bot akan mengirimnya nanti" + "\n"
            this.helpsendres += "kirim kembali: masukan SDA ke kotak SDA dan set kordinat, click tambahkan tugas, dan bot akan mengirimnya setelah pedagang kembali" + "\n"
            this.helpsendres += "kirim tiap saat: masukan SDA ke kotak SDA dan set kordinat, click tambahkan tugas, dan bot akan mengirimnya, masukan angka X, click tambahkan tugas dan bot akan mengirim SDA setiap X menit" + "\n"
            this.helpsendres += "dikirim oleh % : " + "\n";
            this.helpsendres += "Min res: jumlah minimal yang dikirim (tidak dapat mengirim 1 SDA)" + "\n"
            this.helpsendres += " Sumber daya Kosong untuk mengatur%: desa ini harus mengirimkan sebagai resourses banyak untuk mengatur desa yang di desa akan tetap yang% dari sumber daya yang ditetapkan:" + "\n"
            this.helpsendres += " Jika semua set ke 10% dan Anda memiliki warhouse 80 000, desa akan mencoba untuk mengirimkan semua sumber daya tapi 8000 dari masing-masing akan tetap tinggal di desa." + "\n"
            this.helpsendres += " Isi sumber daya untuk mengatur%: desa yang Anda kirimkan resourses untuk harus mengisi untuk warhouse desa Anda kirimkan untuk untuk nilai ini:" + "\n"
            this.helpsendres += " Jika diatur semua untuk 90% dan warhouse dapat berisi 80 000 sumber daya, akan mengirim sumber daya ke desa ini hingga mencapai 72 000." + "\n"
            this.helpsendres += " Jadi desa ini seharusnya tidak pernah kurang sumber daya% set (kecuali anda menghabiskan itu dinyatakan) dan desa Anda mengirim sumber daya untuk tidak harus memiliki sumber daya lebih kemudian mengatur% (kecuali jika memproduksi mereka atau mendapatkannya dari desa-desa lainnya kemudian)." + "\n"
            this.helptasklist = "Task added in travian window will show up here." + "\n";
            this.helptasklist += "tiap desa memiliki daftar pembangunan sendiri ";
            this.helpfarmlist = " Farms ditambahkan dalam travian jendela akan muncul di sini. Klik dua kali pada nomor yang ingin Anda ubah dan jendela akan muncul di mana Anda dapat mengatur nomor baru." + "\n";
            this.helpfarmlist += "tandai kotak untuk menentukan farm dilakukan atau tidak" + "\n";
            this.helpfarmlist += " Tombol Aktifkan dan Nonaktifkan memutuskan apakah farmlist seluruh desa ini diaktifkan " + "\n";
            break;
        case "pl":
            this.getdata = "Pobierz dane";
            this.start = "Start";
            this.stop = "Stop";
            this.savetoserver = "Zapisz dane";
            this.deletedata = "Usuń dane";
            this.sendsms = "Wyślij SMS";
            this.cropfinder = "Wyszukaj Farmy/Cropy";
            this.succesful = "Zapisano pomyślnie";
            this.tasklist = "Lista zadań";
            this.farmlist = "Lista farm";
            this.trade = "Rynek";
            this.train = "Szkolenie";
            this.fill = "Wypełnij";
            this.empty = "Opróżnij";
            this.priority = "Priorytet";
            this.to = "Do";
            this.on = "ON";
            this.name = "Osada";
            this.type = "typ";
            this.del = "Usuń";
            this.turnon = "Włącz";
            this.turnoff = "Wyłącz";
            this.repetevery = "Powtarzaj co:";
            this.minutes = "minut/ę/y";
            this.sendonreturn = "Wyślij gdy wrócą";
            this.login = "Zaloguj się na konto i naciśnij <b>Pobierz dane</b>";
            this.edit = "Dwukrotnie kliknij aby edytować";
            this.newval = "Wprowadź nową wartość:";
            this.inputnum = "Musisz wprowadzić liczbę";
            this.attopt = "Wprowadź odpowiednią wartość:" + "\n" + "2=Posiłki" + "\n" + "3=Atak" + "\n" + "4=Grabież";
            this.attoptallowed = "Dozwolone są tylko wartości: 2, 3 i 4";
            this.allfields = "Wszystkie pola/kopalnie";
            this.buldings = ["Plac budowy", "Las", "Kopalnia gliny", "Kopalnia żelaza", "Pole zboża", "Tartak", "Cegielnia", "Huta stali", "Młyn", "Piekarnia", "Magazyn", "Spichlerz", "Zbrojownia", "Kuźnia", "Plac turniejowy", "Główny budynek", "Miejsce zbiórki", "Rynek", "Ambasada", "Koszary", "Stajnia", "Warsztat", "Akademia", "Kryjówka", "Ratusz", "Rezydencja", "Pałac", "Skarbiec", "Targ", "Duże koszary", "Duża stajnia", "Mury obronne", "Wały", "Palisada", "Pracownia kamieniarza", "Browar", "Traper", "Dwór bohatera", "Duży magazyn", "Duży spichlerz", "Cud", "Wodopój"];
            this.datarecieved = "Pobrano dane. Kliknij start aby uruchomić skrypt.";
            this.datanotrecieved = "Nie pobrano danych. Odśwież i spróbuj ponownie.";
            this.checking = "Sprawdzanie listy zadań";
            this.analysingvillages = "Analizowanie wiosek.";
            this.sendingresurces = "Wysyłanie surowców";
            this.trainingtroops = "Szkolenie jednostek";
            this.building = "Budowa";
            this.sendingtroops = "Wysyłanie jednostek do ";
            this.stopped = "Zatrzymano";
            this.buildingsucessful = "Rozpoczęto budowę";
            this.buildingatwantedlevel = "Rozbudowa niemożliwa. Budowa jest już na żądanym poziomie";
            this.unabletobuild = "Budowa wstrzymana. Brak możliwości budowy.";
            this.sendingressucessful = "Surowce wysłano pomyślnie";
            this.notenoughtres = "Za mało surowców.";
            this.unabletosendres = "Wysłanie surowców do tego miejsca jest niemożliwe.";
            this.trainingsuccesful = "Wyszkolono jednostki.";
            this.sendingtroopssuccesul = "Wysłano jednostki.";
            this.deletedfarm = "Farma skasowana/zbanowana";
            this.farminunsuccesful = "Farmienie nieudane";
            this.gettingdata = "Pobieranie danych";
            this.deletingdata = "Kasowanie danych";
            this.deleted = "Usunięto";
            this.nodata = "Błąd: prawdopodobnie brak danych na serwerze";
            this.upgradeallfields = "Buduj wszystkie";
            this.veryhigh = "Najwyższy";
            this.high = "Wysoki";
            this.normal = "Normalny";
            this.low = "Niski";
            this.verylow = "Najniższy";
            this.level = "Poziom";
            this.addtask = "Dodaj do zadań";
            this.fillres = "Wypełnij magazyny do x %:";
            this.emptyres = "Opróżnij magazyny do x % :";
            this.onetimesending = "Wyślij raz";
            this.bypercent = "Wyślij procentowo %";
            this.custom = "Własne";
            this.minsres = "Minium surowców:";
            this.trainonce = "Wyszkol raz";
            this.trainlater = "Wyszkol później";
            this.addtofarmlist = "Dodaj do listy farm";
            this.helpupgradeallfields = "Ustaw zadanie budowy wszystkich pól/kopalni. Gdy ustawisz budowę na poziom 10, najpierw wszystko będzie podniesione do 1 poziomu, potem 2 i tak aż do 10.";
            this.helptrain = "Wyszkol jednostki później. " + "\n";
            this.helptrain += "Wyszkol raz: Po wyszkoleniu jednostek zadanie zostanie usunięte." + "\n";
            this.helptrain += "Powtarzaj co x minut: po pierwszym wyszkoleniu, skrypt poczeka określony czas i spróbuje wyszkolić jeszcze raz. Gdy nie będzie wystarczającej ilości surowców, skrypt poczeka i wyszkoli gdy już będą. Potem zacznie się kolejne odliczanie.. i tak w kółko. Zadanie nie usunie się samo z listy.";
            this.helpsendres = "Rynek" + "\n"
            this.helpsendres += "Wyślij raz: wprowadź ilość surowców oraz współrzędne celu, kliknij <b>Dodaj zadanie</b> - bot wyśle te surowce później" + "\n"
            this.helpsendres += "Wyślij gdy wrócą: wprowadź ilość surowców oraz współrzędne celu, kliknij <b>Dodaj zadanie</b> - bot wyśle te surowce, gdy tylko wrócą handlarze" + "\n"
            this.helpsendres += "Wyślij co x minut: wprowadź ilość surowców, współrzędne celu oraz liczbę x minut, kliknij <b>Dodaj zadanie</b> - bot będzie wysyłał te surowce okresowo co x minut" + "\n"
            this.helpsendres += "Wyślij procentowo % : " + "\n";
            this.helpsendres += "Minimum surowców: minimalna ilość surowców jaką skrypt może wysłać (żeby nie było takiej sytuacji, że wyśle np. tylko 1 ilość surowca)" + "\n"
            this.helpsendres += "Opróżnij magazyny do x % : dana osada powinna wysyłać tyle surowca do celu, aby pozostało w niej x % pojemności magazynu:" + "\n"
            this.helpsendres += "Jeżeli ustawisz na 10% i masz magazyn o pojemności 80 000, osada będzie wysyłać surowce dopóki nie zostanie po 8000 każdego." + "\n"
            this.helpsendres += "Wypełnij magazyny do x %: osada do której wysyłasz surowce będzie mieć wypełnione magazyny do x %:" + "\n"
            this.helpsendres += "Jeżeli ustawisz na 90% oraz pojemność magazynu to 80 000, skrypt będzie wysyłał surowce dopóki nie zapełni go do 72 000 każdego" + "\n"
            this.helpsendres += "Czyli osada z której wysyłasz nie będzie mieć mniej surowców niż 10% pojemności magazynu (chyba, że je wydasz), a osada do której wysyłasz nie powinna mieć więcej surowców niż 90% pojemności magazynu (chyba, że przyjdzie z samej produkcji lub z innej osady)." + "\n"
            this.helptasklist = "Dodane zadania pokażą się tutaj." + "\n";
            this.helptasklist += "Każda osada ma swoją listę zadań";
            this.helpfarmlist = "Dodane farmy pokażą się tutaj. Ilość wojska i rodzaj ataku zmienia się dwukrotnym kliknięciem na daną liczbę." + "\n";
            this.helpfarmlist += "Zaznaczając pole wyboru decydujesz czy farma ma być aktywna czy nie" + "\n";
            this.helpfarmlist += "Przyciski Włącz i Wyłącz decydują czy całą lista farm dla danej osady jest aktywna czy nie" + "\n";
            break;
        case "asia":
            this.getdata = "??????????";
            this.start = "?????";
            this.stop = "????";
            this.savetoserver = "?????????";
            this.deletedata = "????????";
            this.sendsms = "??? sms";
            this.cropfinder = "????? ????????????";
            this.succesful = "??????";
            this.tasklist = "?????????";
            this.farmlist = "???????????";
            this.trade = "??????????";
            this.train = "?????";
            this.fill = "???";
            this.empty = "?????????";
            this.priority = "?????????";
            this.to = "???";
            this.on = "????";
            this.name = "????";
            this.type = "??????";
            this.del = "Del";
            this.turnon = "????";
            this.turnoff = "???";
            this.repetevery = "????? ????";
            this.minutes = "????";
            this.sendonreturn = "?????????????????";
            this.login = "???????????? ?????????????????????";
            this.edit = "??????????????????????";
            this.newval = "????????????????";
            this.inputnum = "?????????????????????????";
            this.attopt = "???????????????:" + "\n" + "2=??????????" + "\n" + "3=?????" + "\n" + "4=????";
            this.attoptallowed = "Only values 2, 3 and 4 are allowed.";
            this.allfields = "???????";
            this.buldingsonder of the World", "?????????????"];
            this.datarecieved = "??????????????????? ??????? ????? ???????????????";
            this.datanotrecieved = "??????????????? ????????";
            this.checking = "???????????????????????";
            this.analysingvillages = "?????????????????????????????????";
            this.sendingresurces = "????????????????";
            this.trainingtroops = "????????????";
            this.building = "?????????????";
            this.sendingtroops = "??????????????  ";
            this.stopped = "????";
            this.buildingsucessful = "??????????????";
            this.buildingatwantedlevel = "????????????????? ??????????????????????????????????";
            this.unabletobuild = "????????????????? ?????????????????????????????";
            this.sendingressucessful = "??????????? ??????";
            this.notenoughtres = "?????????????";
            this.unabletosendres = "??????????????????????????????????? ";
            this.trainingsuccesful = "??????? ??????";
            this.sendingtroopssuccesul = "??????? ??????";
            this.deletedfarm = "?? ???? ????? ?????";
            this.farminunsuccesful = "????? ?????????";
            this.gettingdata = "???????????????";
            this.deletingdata = "?????????????";
            this.deleted = "????????";
            this.nodata = "Error: ??????????????????????????";
            this.upgradeallfields = "????????????????";
            this.veryhigh = "??????";
            this.high = "???";
            this.normal = "????";
            this.low = "????";
            this.verylow = "???????";
            this.level = "?????";
            this.addtask = "????????";
            this.fillres = "????????????????????????? :";
            this.emptyres = "Empty resources to set % :";
            this.onetimesending = "One time sending";
            this.bypercent = "Send by %";
            this.custom = "Custom";
            this.minsres = "Min res:";
            this.trainonce = "Train once";
            this.trainlater = "Train later";
            this.addtofarmlist = "Add to farmlist";
            this.helpupgradeallfields = "Set task to upgrade all your fields. if set to level 10, all fields will be upgraded to level 1, then all to level 2,... until all fields are at wanted level.";
            this.helptrain = "Train troops later. " + "\n";
            this.helptrain += "Train once: troops will ve trained and task will be deleted" + "\n";
            this.helptrain += "Repeat every minutes: after script trains units, it will wait for set time and then try to train units again. If you dont have enought resources, script will wait to get enought resources, train units when there is enought resources and again wait for set time before training again. Task will not get deleted from list.";
            this.helpsendres = "Traider" + "\n"
            this.helpsendres += "One time sending: imput resources into resource boxes and set coordinate, click add task and bot will send them later" + "\n"
            this.helpsendres += "Send on return: imput resources into resource boxes and set coordinate, click add task and bot will send them to other village as soon as traiders return from trip" + "\n"
            this.helpsendres += "Send every minutes: imput resources into resource boxes and set coordinate, imput X number, click add task and bot will try to send them to other village every X minutes" + "\n"
            this.helpsendres += "Send by % : " + "\n";
            this.helpsendres += "Min res: min amount of res script can send (so it wont send 1 resource)" + "\n"
            this.helpsendres += "Empty resources to set % : this village should send as much resourses to set village that in village will remain that % of resources that are set:" + "\n"
            this.helpsendres += "If all set to 10% and you have warhouse 80 000, village will try to send out all resources but 8000 of each will remain in village." + "\n"
            this.helpsendres += "Fill resources to set %: the village you are sending resourses to should fill to warhouse of village you are sending to to this value:" + "\n"
            this.helpsendres += "If all set to 90% and warhouse can contain 80 000 resources, it will send resources to this village untill it reaches 72 000." + "\n"
            this.helpsendres += "So this village should never have less then set % resources (unless you spend it otherwise) and village you are sending resources to should not have more resources then set % (unless it produce them or get it from other villages later)." + "\n"
            this.helptasklist = "Task added in travian window will show up here." + "\n";
            this.helptasklist += "Every village has its own building list";
            this.helpfarmlist = "Farms added in travian window will show up here. Double click on number you wish to change and window will show up where you can set new number." + "\n";
            this.helpfarmlist += "Checkbox decide if farm is turned on or off" + "\n";
            this.helpfarmlist += "Buttons Turn On and Turn Off decide if whole farmlist for this village is turned on" + "\n";
            break;
        case "hu":
            this.getdata = "Adatok gyűjtése";
            this.start = "Indítás";
            this.stop = "Megállítás";
            this.savetoserver = "Mentés a szerverre";
            this.deletedata = "Adatok törlése";
            this.sendsms = "SMS küldése";
            this.cropfinder = "Farm/búzás kereső";
            this.succesful = "Sikeres";
            this.tasklist = "Feladat lista";
            this.farmlist = "Farm lisa";
            this.trade = "Kereskedelem";
            this.train = "Kiképzés";
            this.fill = "Kitölteni";
            this.empty = "Üres";
            this.priority = "Elsőbbség";
            this.to = "hoz";
            this.on = "BE";
            this.name = "Név";
            this.type = "Típus";
            this.del = "Del";
            this.turnon = "Bekapcsolás";
            this.turnoff = "Kikapcsolás";
            this.repetevery = "Ismételd minden";
            this.minutes = "percben";
            this.sendonreturn = "visszaérkezésnél újraküldés";
            this.login = "Jelentkezz be a Traviánba és nyomd meg az Adatok gyűjtése gombot";
            this.edit = "Dupla klikk hogy szerkeszd";
            this.newval = "Írd be az új értéket";
            this.inputnum = "Egy számot kell beírnod";
            this.attopt = "Írd be az új értéket:" + "\n" + "2=Támogatás" + "\n" + "3=Támadás" + "\n" + "4=Fosztogatás";
            this.attoptallowed = "Csak 2,3 vagy 4-et írhatsz be.";
            this.allfields = "Minden mező";
            this.buldings = ["Építési terület", "Favágó", "Agyagbánya", "Vasércbánya", "Búzafarm", "Fűrészüzem", "Agyagégető", "Vasöntöde", "Malom", "Pékség", "Raktár", "Magtár", "Kovácsműhely", "Páncélműhely", "Gyakorlótér", "Főépület", "Gyülekezőtér", "Piac", "Követség", "Kaszárnya", "Istálló", "Műhely", "Akadémia", "Hasadék", "Városháza", "Rezidencia", "Palota", "Kincstár", "Kereskedelmi központ", "Nagy kaszárnya", "Nagy istálló", "Kőfal", "Földfal", "Cölöpfal", "Kőfaragó", "Sörfőzde", "Csapdakészítő", "Hősök háza", "Nagy raktár", "Nagy magtár", "Világcsoda", "Ló itató"];
            this.datarecieved = "Adatok feldolgozva. Nyomd meg az Indítás gombot hogy aktiváld a scriptet.";
            this.datanotrecieved = "Adatok nem elérhetőek. Nyomd meg a frissítés gombot hogy újra próbáld.";
            this.checking = "Feladatok ellenőrzése";
            this.analysingvillages = "A falú ellemzése.";
            this.sendingresurces = "Nyersanyag küldése";
            this.trainingtroops = "Egységek kiképzése";
            this.building = "Építés";
            this.sendingtroops = "Egységek küldése ide: ";
            this.stopped = "Megállt";
            this.buildingsucessful = "Építés sikeres";
            this.buildingatwantedlevel = "Építés sikertelen. Az épület már a kívánt szinten van.";
            this.unabletobuild = "Építés sikertelen. Nem lehet építeni.";
            this.sendingressucessful = "Nyersanyag küldése sikeres";
            this.notenoughtres = "Nincs elég nyersanyag.";
            this.unabletosendres = "Nem lehet ide nyersanyagot küldeni.";
            this.trainingsuccesful = "Egységek kiképzése sikeres.";
            this.sendingtroopssuccesul = "Egységek küldése sikeres.";
            this.deletedfarm = "Farm törölt/blokkolt";
            this.farminunsuccesful = "Farmolás sikertelen";
            this.gettingdata = "Adatok gyűjtése";
            this.deletingdata = "Adatok törlése";
            this.deleted = "Törölve";
            this.nodata = "Hiba: nincs adat a szerveren";
            this.upgradeallfields = "Összes mező kiépítése";
            this.veryhigh = "Nagyon nagy";
            this.high = "Nagy";
            this.normal = "Normál";
            this.low = "Alacsony";
            this.verylow = "Nagyon alacsony";
            this.level = "Szint";
            this.addtask = "Feladat hozzáadása";
            this.fillres = "Nyersanyagok %-os feltöltése:";
            this.emptyres = "Nyersanyagok %-os kiürítése:";
            this.onetimesending = "Egyszer küldés";
            this.bypercent = "%-al küldés";
            this.custom = "Egyéni";
            this.minsres = "Min nyersi:";
            this.trainonce = "Egyszeri kiképzés";
            this.trainlater = "Kiképzés később";
            this.addtofarmlist = "Felvétel a farmlistára";
            this.helpupgradeallfields = "Az összes mező építése. Ha 10-es szintre van állítva, akkor az összes mező kiépítődik 1-es szintre, majd az összes 2-es szintre, és így tovább amíg az összes mező a eléri a kívánt szintet.";
            this.helptrain = "Egységek kiképzése később. " + "\n";
            this.helptrain += "Egyszer képzés: az egység kiképződik és a feladat törlődik" + "\n";
            this.helptrain += "Ismétlés minden percben: miután a script kiképezte az egységet, vár a megadott ideig, majd újra kiképzi az egységet. Ha nincs elég nyersanyag akkor a script vár míg lesz és legyártja akkor. Ezután újból várni fog a megadott időpontig mielőtt újra kiképezne egységeket. A feladat nem törlődik a listából.";
            this.helpsendres = "Kereskedő" + "\n"
            this.helpsendres += "Egyszer küldés: add meg a nyersanyagot és a koordinátát, a script pedig elküldi később" + "\n"
            this.helpsendres += "Visszaérkezésnél újraküldés: add meg a nyersanyagot és a koordinátát, a script pedig elküldi később amint lesz szabad kereskedő" + "\n"
            this.helpsendres += "Küldés percenként: add meg a nyersanyagot és a koordinátát, adj meg egy X számot, és a script elküldi majd a nyersit minden megadott percben." + "\n"
            this.helpsendres += "%-os küldés : " + "\n";
            this.helpsendres += "Min nyersi: minimum nyersi amit lehet küldeni (nem fog 1 nyersit küldeni csak)" + "\n"
            this.helpsendres += "Kiürítés a megadott %-ig : ez a falu addig küldi a nyersit amíg a faluban a megadott % nyersanyag marad:" + "\n"
            this.helpsendres += " Ha az összes 10% és a raktár 80 000 nyersanyagot tárolhat, akkor addig küldi a nyersit amíg a faluban 8000 nyersi marad." + "\n"
            this.helpsendres += "Töltés a megadott %-ig: ez a falu addig küldi a nyersit amíg a faluban amelyikbe küldöd a megadott % nyersanyag lesz:" + "\n"
            this.helpsendres += "Ha az összes 90% és a raktár 80 000 nyersanyagot tárolhat, akkor addig küldi a nyersit amíg a célfaluban 72000 nyersi lesz." + "\n"
            this.helpsendres += "Szóval ennek a falunak a nyersanyaga sosem megy a megadott % alá (ha nem költesz másra) és a falu amelyikbe küldöd a nyersanyagszint nem haladja meg a megadott %-ot. (amíg a falu nem termel többet vagy nem kap máshonnan nyersit)." + "\n"
            this.helptasklist = "A feladatok amelyeket beállítasz itt jelennek meg." + "\n";
            this.helptasklist += "Minden falunak külön építkezési listája van.";
            this.helpfarmlist = "A farmok amelyeket hozzáadtál a farmkeresőben itt jelennek meg. Dupla klikk az értékre és beírhatsz egy új értéket." + "\n";
            this.helpfarmlist += "Ha ki van pipálva akkor a farmolás aktív arra a falura" + "\n";
            this.helpfarmlist += "A be- és kikapcsoló gomb határozza meg hogy az egész farmlista aktív legyen-e erre a falura" + "\n";
            break;
        case "ru":
            this.getdata = "????????? ??????????";
            this.start = "?????";
            this.stop = "????";
            this.savetoserver = "????????? ?? ??????";
            this.deletedata = "??????? ?????????? ? ???????";
            this.sendsms = "????????? ???";
            this.cropfinder = "????? ?????/?????";
            this.succesful = "?????????";
            this.tasklist = "?????? ?????";
            this.farmlist = "?????? ?????";
            this.trade = "?????????";
            this.train = "???????";
            this.fill = "Fill";
            this.empty = "?????????";
            this.priority = "?????????";
            this.to = "?";
            this.on = "???";
            this.name = "???";
            this.type = "???";
            this.del = "???????";
            this.turnon = "????????";
            this.turnoff = "?????????";
            this.repetevery = "????????? ??????";
            this.minutes = "??????";
            this.sendonreturn = "????????? ??? ??? ?? ???????????";
            this.login = "??????? ? ???? ? ??????? ???????? ??????????";
            this.edit = "??????? ???? ??? ??????????????";
            this.newval = "??????? ????? ????????";
            this.inputnum = "?????????? ?????? ?????";
            this.attopt = "??????? ????? ????????:" + "\n" + "2=????????????" + "\n" + "3=?????" + "\n" + "4=?????";
            this.attoptallowed = "???????? ??????? ?????? 1,2 ??? 3.";
            this.allfields = "??? ????";
            this.buldings = ["????? ??? ?????????????", "?????????", "???????? ??????", "???????? ??????", "?????", "??????????? ?????", "????????? ?????", "?????????????? ?????", "????????", "???????", "?????", "?????", "???????", "???????", "?????", "??????? ??????", "????? ?????", "?????", "??????????", "???????", "???????", "??????????", "????????", "??????", "??????", "??????????", "??????", "????????????", "???????? ??????", "??????? ???????", "??????? ???????", "?????", "????????", "????????? ???", "????????", "?????????", "?????????", "???????", "??????? ?????", "??????? ?????", "???? ?????", "???????"];
            this.datarecieved = "?????????? ????????. ??????? ?????? ????? ??? ????????? ???????.";
            this.datanotrecieved = "?????????? ?? ????????. ??????? ?????? ?????? ??? ???????? ??????? ??? ???.";
            this.checking = "?????? ????????";
            this.analysingvillages = "?????? ????? ???????.";
            this.sendingresurces = "???????? ????????";
            this.trainingtroops = "???????? ??????";
            this.building = "?????????????";
            this.sendingtroops = "???????? ?????? ";
            this.stopped = "???????????";
            this.buildingsucessful = "????????????? ?????????";
            this.buildingatwantedlevel = "????????????? ?? ?????????. ???????? ??? ??????? ??????.";
            this.unabletobuild = "????????????? ??????????.";
            this.sendingressucessful = "???????? ???????? ?????????.";
            this.notenoughtres = "?? ??????? ????????.";
            this.unabletosendres = "???????? ? ????????? ????? ??????????.";
            this.trainingsuccesful = "???????? ?????????";
            this.sendingtroopssuccesul = "???????? ?????????.";
            this.deletedfarm = "???? ??????/????????????.";
            this.farminunsuccesful = "???? ?? ??????";
            this.gettingdata = "????????? ??????????";
            this.deletingdata = "???????? ??????????";
            this.deleted = "???????";
            this.nodata = "??????: ??? ?????????? ?? ???????";
            this.upgradeallfields = "???????? ??? ????";
            this.veryhigh = "???????????? ?????????";
            this.high = "??????? ?????????";
            this.normal = "?????????? ?????????";
            this.low = "?????? ?????????";
            this.verylow = "?????????????? ?????????";
            this.level = "???????";
            this.addtask = "???????? ???????";
            this.fillres = " ??????? ????? %:";
            this.emptyres = " ?? ?????????? % :";
            this.onetimesending = "????????";
            this.bypercent = "??????? %";
            this.custom = "?????????";
            this.minsres = "?????. ???????:";
            this.trainonce = "??????????? ????????";
            this.trainlater = "??????? ?????";
            this.addtofarmlist = "???????? ? ?????? ?????";
            this.helpupgradeallfields = "??????? ??????? ?? ????????? ????? ?????. ???? ????????? 10, ?? ??? ???? ???? ????? ?????????? ??????? ?? 1 ???????, ????? ?? 2,3….???? ?? ????????? 10 ??????.";
            this.helptrain = "??????? ?????. " + "\n";
            this.helptrain += "??????????? ????????: ????? ???????? ??????? ????????" + "\n";
            this.helptrain += "????????? ? ??????????: ????? ???????? ?????? ?????? ????????? ????? ? ???????? ???????? ?????. ???? ???????? ?? ??????? ?????? ???????? ???? ?? ?????? ??????? ????????, ???????? ???????? ? ????? ????? ??????? ????????? ????????. ??????? ???? ?? ????????? ?? ??????.";
            this.helpsendres = "????????" + "\n"
            this.helpsendres += "??????????? ????????: ??????? ?????????? ???????? ? ??????? ?????????? ????????,??????? ???????? ??????? ? ?????? ???????? ???????? ??????? ?????" + "\n"
            this.helpsendres += "????????? ?? ????????: ??????? ?????????? ???????? ? ??????? ?????????? ????????, ??????? ???????? ??????? ? ?????? ???????? ???????? ??????? ??? ??? ?? ???????? ????????? " + "\n"
            this.helpsendres += "???????? ? ??????????: ??????? ?????????? ???????? ? ??????? ?????????? ???????? ? ????????? ???????? (???), ??????? ???????? ??????? ? ?????? ????? ?????????? ???????? ??????? ? ????????? ?????????? ?????????" + "\n"
            this.helpsendres += "???????? ? % : " + "\n";
            this.helpsendres += "??????????? ????????: ??????????? ?????????? ????????, ? ?????? ?????????? ???????? ?????????? ???????? (???? ????? 1 ????? ?????????? ??? ??? ????)" + "\n"
            this.helpsendres += "???????? ?? %??????? : ????? ???????????? ??? ??? ?????? ?????????? ???????? ?? ??????????? ?????????? ?????????? ???????? ??????????? ? ???????:" + "\n"
            this.helpsendres += "???? ??????????? 10% ? ? ??? ????? 80 000, ????? ?????????? ??? ??? ?????? 8000, ?????????? ? ???????." + "\n"
            this.helpsendres += "???????? ?? ?????????? %: ??????? ????? ?????????? ???? ?????????? ?? ????????? ??????? ????????:" + "\n"
            this.helpsendres += "???? ??????????? 90% ? ????? ??????? 80 000 ????????, ??????? ????? ???????????? ?? ??? ??? ???? ?????????? ?? ?????? ?? ?????? 72 000." + "\n"
            this.helpsendres += "????? ???????, ? ???? ??????? ??????? ?? ????? ????? ?????????????? % ????????(???? ?? ?? ??????? ?? ?????), ? ???????, ???? ?? ????????? ??????? , ?? ????? ????? ???????? ?????????? % ?????????? ???????? (???? ??? ?? ?????????? ?? ??? ???????? ?? ?????? ????????)." + "\n"
            this.helptasklist = "?????? ????? ???????????? ???." + "\n";
            this.helptasklist += "? ?????? ??????? ???????????? ?????? ????????";
            this.helpfarmlist = "??????????? ???? ???????????? ???. ??? ????????? ??????? ????????? ??????? ?????? ?? ???????? ??????? ???? ? ? ??? ???????? ????????." + "\n";
            this.helpfarmlist += "???????? ??????? ??????? ?? ????" + "\n";
            this.helpfarmlist += "?????? ???????? ? ????????? ???? ????????? ???? ??????? ?????????" + "\n";
            break;
        case "com.tr":
            this.getdata = "Veriyi Al";
            this.start = "Başlat";
            this.stop = "Durdur";
            this.savetoserver = "Servera Kaydet";
            this.deletedata = "Veriyi Sil";
            this.sendsms = "SMS Gönder";
            this.cropfinder = "Köy/Vaha Bulucu";
            this.succesful = "Başariyla Tamamlandi";
            this.tasklist = "Görev Listesi";
            this.farmlist = "Yagma Listesi";
            this.trade = "Ticaret";
            this.train = "Yetiştir";
            this.fill = "Doldur";
            this.empty = "Boşalt";
            this.priority = "Öncelik";
            this.to = "Kime";
            this.on = "Açik";
            this.name = "Isim";
            this.type = "Tür";
            this.del = "Sil";
            this.turnon = "Aç";
            this.turnoff = "Kapat";
            this.repetevery = "Tekrarla";
            this.minutes = "Dakikalar";
            this.sendonreturn = "Dönünce Tekrar Gönder";
            this.login = "Traviana Giriş Yapin ve Veriyi Al Tuşuna Basin";
            this.edit = "Düzenlemek Için Çift Tiklayin";
            this.newval = "Yeni Degeri Girin";
            this.inputnum = "Bir Sayi Girmeniz Gerekir";
            this.attopt = "Yeni Deger Girin:" + "\n" + "2=Destek" + "\n" + "3=Saldiri" + "\n" + "4=Yagma";
            this.attoptallowed = "Sadece 2, 3 ve 4 Girilebilir.";
            this.allfields = "Tüm Alanlar";
            this.buldings = ["Inşa Alani", "Oduncu", "Tugla Ocagi", "Demir Madeni ", "Tarla", "Kereste Fabrikasi", "Tugla Firini", "Demir Dökümhanesi", "Degirmen", "Firin", "Depo", "Tahil Ambari", "Demirci", "Zirh Dökümhanesi", "Turnuva Alani", "Ana Bina", "Toplanma Yeri", "Pazar", "Elçilik", "Kişla", "Ahir", "Tamirhane", "Akademi", "Siginak", "Belediye", "Köşk", "Saray", "Hazine", "Ticaret Ofisi", "Büyük Kişla", "Büyük Ahir", "Duvar", "Toprak Duvar", "Çit", "Taşçi", "Bira Fabrikasi", "Tuzakçi", "Kahraman Kişlasi", "Büyük Depo", "Büyük Ambar", "Dünya Harikasi", "Yalak"];
            this.datarecieved = "Veriler Alindi. Başlamak Için Starta basin";
            this.datanotrecieved = "Veri Alinamadi. Tekrar Denemek Için Güncelleye Basin";
            this.checking = "Ne Yapilacagi Kontrol Ediliyor";
            this.analysingvillages = "Tüm Köyler Inceleniyor";
            this.sendingresurces = "Hammadde Gönderiliyor";
            this.trainingtroops = "Asker Yetiştiriliyor";
            this.building = "Bina";
            this.sendingtroops = "Askerler gönderiliyor ";
            this.stopped = "Durduruldu";
            this.buildingsucessful = "Başariyla Inşa Edildi";
            this.buildingatwantedlevel = "Inşaat Başarili Olmadi. Bina Zaten Istenen Seviyede";
            this.unabletobuild = "Inşaat Başarili Olmadi. Inşa Edilemiyor";
            this.sendingressucessful = "Hammaddeler Başariyla Gönderildi";
            this.notenoughtres = "Yeterli Hammadde Yok.";
            this.unabletosendres = "Hammaddeler Bu Konuma Gönderilemedi.";
            this.trainingsuccesful = "Askerler Başariyla Yetiştirildi";
            this.sendingtroopssuccesul = "Askerler Başariyla Gönderildi.";
            this.deletedfarm = "Köy Silindi/Kapatildi";
            this.farminunsuccesful = "Yagma Başarisiz";
            this.gettingdata = "Veri Aliniyor";
            this.deletingdata = "Veri Siliniyor";
            this.deleted = "Silindi";
            this.nodata = "Hata: Muhtemelern Serverda Veri Yok";
            this.upgradeallfields = "Tüm Alanlari Yükselt";
            this.veryhigh = "Çok Yüksek";
            this.high = "Yüksek";
            this.normal = "Normal";
            this.low = "Düşük";
            this.verylow = "Çok Düşük ";
            this.level = "Seviye";
            this.addtask = "Görev Ekle";
            this.fillres = "Hammaddeleri %X Olana Kadar Doldur:";
            this.emptyres = "Hammaddeleri %X Olana Kadar Boşalt :";
            this.onetimesending = "Tek Bir Sefer Gönder";
            this.bypercent = "Gönderilecek %";
            this.custom = "Özel";
            this.minsres = "En Az Hammadde:";
            this.trainonce = "Bir Kere Yetiştir";
            this.trainlater = "Daha Sonra Yetiştir";
            this.addtofarmlist = "Yagma Listesine Ekle";
            this.helpupgradeallfields = "Tüm Alanlari Yükselt. Eger 10 Olarak Belirlenirse Önce Tüm Alanlar Seviye 1’e, Sonra Seviye 2’ye vb. Istenen Seviyeye Kadar Yükseltilir.";
            this.helptrain = "Askerleri Daha Sonra Yetiştir. " + "\n";
            this.helptrain += "Bir Kere Yetiştir: Askerler Yetiştirildikten Sonra Görev Silinecektir" + "\n";
            this.helptrain += "Her X Dakikada Yenile: Script Birimleri Yetiştirdikten Sonra Belirlenen Süre Kadar Bekler ve Tekrar Asker Yetiştirmeyi Dener. Eger Yeterli Hammadde Yoksa Script Yeterli Hammadde Olana Kadar Bekler, Yeterli Hammadde Olunca Askerleri Yetiştirir, ve Sonra Tekrar Belirlenen Süre Kadar Bekler. Görev Listeden Silinmez.";
            this.helpsendres = "Satici" + "\n"
            this.helpsendres += "Bir Kerelik Gönderim: Gönderilecek Hammadde Alanina Miktari ve Koordinatlari Girin, Görev Ekleye Tiklayin, Bot Daha Sonra Gönderecektir " + "\n"
            this.helpsendres += "Dönünce Tekrar Gönder: Gönderilecek Hammadde Alanina Miktari ve Koordinatlari Girin, Görev Ekleye Tiklayin, Bot Saticilar Döner Dönmez Saticilari Tekrar Gönderecektir " + "\n"
            this.helpsendres += "Her Dakika Gönder: Gönderilecek Hammadde Alanina Miktari ve Koordinatlari Girin, X Dakikayi Girin ve Görev Ekleye Tiklayin, Bot Her X Dakikada Bir Diger Köye Hammadde Göndermeyi Deneyecektir" + "\n"
            this.helpsendres += "% Olarak Gönder: " + "\n";
            this.helpsendres += "Minimum Hammadde: Scriptin Gönderebilecegi En Düşük Hammadde Miktari (Böylece 1 Hammadde Gönderilmeyecektir)" + "\n"
            this.helpsendres += "Hammaddeleri %X Olana Kadar Boşalt: Bu Köy %X Hammadde Kalana Kadar Hammaddeleri Gönderir:" + "\n"
            this.helpsendres += "Eger %10 Olarak Belirlenirse ve 80000 Kapasiteli Deponuz Varsa 8000 Hammaddenin Üstünü Gönderir." + "\n"
            this.helpsendres += "%X Olana Kadar Doldur: Hammadde Gönderdiginiz Köyün Depolari %X Dolana Kadar Hammadde Gönderilir:" + "\n"
            this.helpsendres += "Eger Hepsi%90 olarak Belirlenirse ve Depo Kapasitesi 80000 Ise, 72000 Olana Kadar Hammadde Gönderilir." + "\n"
            this.helpsendres += "Böylece Köyde Asla Belirlenen Yüzdeden Az Hammadde Olmayacaktir (Başka Şekilde Harcamadiginiz Müddetçe) ve Hammadde Gönderdiginiz Köyde Belirlediginiz Yüzdeden Daha Fazla Hammadde Olmayacaktir (Kendi Ürettikleri ve Başka Köylerden Nakledilenler Hariç)." + "\n"
            this.helptasklist = "Travian Penceresinde Eklenen Görevler Burada Gözükür." + "\n";
            this.helptasklist += "Her Köyün Kendi Inşa Listesi Vardir. ";
            this.helpfarmlist = "Travian Penceresinde Eklenen Yagma Köyler Burada Gözükür. Degiştirmek Istediginiz Rakamin Üzerine Çift Tiklayin, Açilan Pencerede Istediginiz Rakami Girin.." + "\n";
            this.helpfarmlist += "Her Bir Köy Için Yagmayi Açma veya Kapama Işaret Kutusu " + "\n";
            this.helpfarmlist += "Tüm Yagma Listesini Açma veya Kapama Tuşu " + "\n";
            break;
        case "cl":
            this.getdata = "Obtener Datos";
            this.start = "Comenzar";
            this.stop = "Detener";
            this.savetoserver = "Guardar en el servidor";
            this.deletedata = "Borrar Datos";
            this.sendsms = "Enviar SMS";
            this.cropfinder = "Buscador de Granjas/Cerealeras";
            this.succesful = "Hecho";
            this.tasklist = "Lista de tareas";
            this.farmlist = "Lista de Granjas";
            this.trade = "Comercio";
            this.train = "Entrenar";
            this.fill = "lleno";
            this.empty = "Vacio";
            this.priority = "Prioridad";
            this.to = "A";
            this.on = "Encender";
            this.name = "Nombre";
            this.type = "tipo";
            this.del = "Borrar";
            this.turnon = "Activar";
            this.turnoff = "Desactivar";
            this.repetevery = "Repetir cada";
            this.minutes = "Minutos";
            this.sendonreturn = "Mandar cuando regresen";
            this.login = "Entrar a Travian y oprimir Obtener Datos";
            this.edit = "Doble click Para editar";
            this.newval = "Entrar un nuevo valor";
            this.inputnum = "Nesecitas escribir un numero";
            this.attopt = "Entrar un nuevo valor:" + "\n" + "2=Refuerzos" + "\n" + "3=Ataque" + "\n" + "4=Asalto";
            this.attoptallowed = "Solo valores 2, 3 y 4 estan permitidos.";
            this.allfields = "Todos los campos";
            this.buldings = ["Construir sitio", "Bosque", "Barrera", "Mina de Hierro", "Granja", "Serreria", "Ladrillar", "Fundicion de hierro", "Molino", "Panaderia", "Almacen", "Granero", "Herreria", "Armeria", "Plaza de Torneos", "Edificio principal", "Plaza de reuniones", "Mercado", "Embajada", "Cuartel", "Establo", "Taller", "Academia", "Escondite", "Centro civico", "Residencia", "Palacio", "Tesoro", "Oficina de Comercio", "Gran Cuartel", "Gran Establo", "Muralla", "Terraplen", "Empalizada", "Canterero", "Cerveceria", "Trampero", "Mansion del Heroe", "Gran Almacen", "Gran Granero", "Maravilla del Mundo", "Abrevadero"];
            this.datarecieved = "Datos recividos. Oprimir Comenzar Para activar el script.";
            this.datanotrecieved = "Datos no recividos. Oprimir actualizar para intentarlo de nuevo.";
            this.checking = "Comprobando que hacer";
            this.analysingvillages = "Analizando todas tus aldeas.";
            this.sendingresurces = "Mandando recursos";
            this.trainingtroops = "Entrenando Tropas";
            this.building = "Construyendo";
            this.sendingtroops = "Mandando tropas a ";
            this.stopped = "detenido";
            this.buildingsucessful = "Construccion terminada";
            this.buildingatwantedlevel = "Construccion fallida. La construccion estan en el nivel deseado";
            this.unabletobuild = "Construccion fallida. No se puede construir.";
            this.sendingressucessful = "Recursos mandados completado";
            this.notenoughtres = "No hay suficientes recursos.";
            this.unabletosendres = "No se puede mandar recursos a este sitio.";
            this.trainingsuccesful = "Entrenado de tropas terminado";
            this.sendingtroopssuccesul = "Mandando tropas correctamente.";
            this.deletedfarm = "Granja borrada/bloqueada";
            this.farminunsuccesful = "Granjeo fallido";
            this.gettingdata = "Obteniendo datos";
            this.deletingdata = "Borrando datos";
            this.deleted = "Borrando";
            this.nodata = "Error: probablemente no hay datos en el servidor";
            this.upgradeallfields = "Levantado todos los campos";
            this.veryhigh = "Muy Alta";
            this.high = "Alta";
            this.normal = "Normal";
            this.low = "Baja";
            this.verylow = "Muy baja";
            this.level = "Nivel";
            this.addtask = "Agregar tarea";
            this.fillres = "Completar recursos hasta obtener %:";
            this.emptyres = "Vaciar recursos hasta obtener % :";
            this.onetimesending = "Mandar una vez";
            this.bypercent = "Mandar por %";
            this.custom = "Personalizado";
            this.minsres = "Minimo:";
            this.trainonce = "Entrenar una vez";
            this.trainlater = "Entrenar despues";
            this.addtofarmlist = "Agregar a la lista de granjas";
            this.helpupgradeallfields = "Configurar la actualizacion de los campos. Si se configura en nivel 10, todos los campos se actualizaran del nivel 1 y luego el 2 etc. hasta el nivel deseado";
            this.helptrain = "Entrenar tropas luego. " + "\n";
            this.helptrain += "Entrenar tropas una vez: La tarea de entrenar tropas sera borrada" + "\n";
            this.helptrain += "Repetir cada tantos minutos: después de los script de entrenamiento de tropa , esperará el tiempo establecido y luego tratara de entrenar a las unidades de nuevo. Si usted no tiene los recursos suficientes, el script va a esperar hasta obtener los recursos necesarios, y asi sucesivamente. La tarea no se borra de la lista.";
            this.helpsendres = "Mercadeo" + "\n"
            this.helpsendres += "Enviar solo una vez: ponga la cantidad de recursos en el cuadro de los recursos y establesca coordenadas, haga clic en Agregar tarea y el bot los enviará más tarde" + "\n"
            this.helpsendres += "Enviar a la entrega: ponga la cantidad de recursos en el cuadro de los recursos y establesca coordenadas, haga clic en Agregar tarea y el bot los enviará a otro pueblo tan pronto como los comerciantes vuelvan del viaje" + "\n"
            this.helpsendres += "Enviar cada tantos minutos: ponga la cantidad de recursos en el cuadro de los recursos y establesca coordenadas, ponga cada X minutos quiere enviar, haga clic en Agregar tarea y el bot tratará de enviar a otra aldea cada X minutos" + "\n"
            this.helpsendres += "Enviar en % : " + "\n";
            this.helpsendres += "Minimos recursos: minimo envio de recursos que se enviaran (no se enviaran ni un recurso menos)" + "\n"
            this.helpsendres += "Vaciar los recursos para establecer%: este pueblo debe enviar recursos para establecer un % maximo en almacen que ha sido programado:" + "\n"
            this.helpsendres += "Si ha establecido que un 10% de recusos queden en la aldea usted tiene en almacen 80 000, la aldea tratara de enviar todos los recursos menos 8000 que permanecerán en la aldea." + "\n"
            this.helpsendres += "Recursos de relleno para establecer%: el pueblo que está enviando los RECURSOS debe llenar el almacen de la aldea que está enviando a este valor:" + "\n"
            this.helpsendres += "Si ha establecido un 90% y el almacen puede contener 80 000 recursos, enviará los recursos a este pueblo hasta llegar a 72 000." + "\n"
            this.helpsendres += "Este pueblo no debe tener menos recursos del % establecido (a menos que se gasten de otra manera) y el pueblo va a enviar recursos hasta no tener más recursos del % establecido (a menos que lo produscan ellos o conseguirlo de otros pueblos más adelante)." + "\n"
            this.helptasklist = "Tarea anadida en la ventana de travian se mostrarán aquí." + "\n";
            this.helptasklist += "Cada pueblo tiene su lista de edificios";
            this.helpfarmlist = "Granjas anadidas en la ventana de travian se mostrarán aquí. Haga doble clic en el número que desea cambiar y la ventana de configuracion se mostrara para poner el nuevo numero." + "\n";
            this.helpfarmlist += "Casilla de verificación para decidir si el granjeo se enciende o apaga" + "\n";
            this.helpfarmlist += "Botones de encender y apagar para decidir si toda la lista de granjeo esta activada para este pueblo" + "\n";
            break;
        case "net":
            this.getdata = "Obtener Datos";
            this.start = "Comenzar";
            this.stop = "Detener";
            this.savetoserver = "Guardar en el servidor";
            this.deletedata = "Borrar Datos";
            this.sendsms = "Enviar SMS";
            this.cropfinder = "Buscador de Granjas/Cerealeras";
            this.succesful = "Hecho";
            this.tasklist = "Lista de tareas";
            this.farmlist = "Lista de Granjas";
            this.trade = "Comercio";
            this.train = "Entrenar";
            this.fill = "lleno";
            this.empty = "Vacio";
            this.priority = "Prioridad";
            this.to = "A";
            this.on = "Encender";
            this.name = "Nombre";
            this.type = "tipo";
            this.del = "Borrar";
            this.turnon = "Activar";
            this.turnoff = "Desactivar";
            this.repetevery = "Repetir cada";
            this.minutes = "Minutos";
            this.sendonreturn = "Mandar cuando regresen";
            this.login = "Entrar a Travian y oprimir Obtener Datos";
            this.edit = "Doble click Para editar";
            this.newval = "Entrar un nuevo valor";
            this.inputnum = "Nesecitas escribir un numero";
            this.attopt = "Entrar un nuevo valor:" + "\n" + "2=Refuerzos" + "\n" + "3=Ataque" + "\n" + "4=Asalto";
            this.attoptallowed = "Solo valores 2, 3 y 4 estan permitidos.";
            this.allfields = "Todos los campos";
            this.buldings = ["Construir sitio", "Bosque", "Barrera", "Mina de Hierro", "Granja", "Serreria", "Ladrillar", "Fundicion de hierro", "Molino", "Panaderia", "Almacen", "Granero", "Herreria", "Armeria", "Plaza de Torneos", "Edificio principal", "Plaza de reuniones", "Mercado", "Embajada", "Cuartel", "Establo", "Taller", "Academia", "Escondite", "Centro civico", "Residencia", "Palacio", "Tesoro", "Oficina de Comercio", "Gran Cuartel", "Gran Establo", "Muralla", "Terraplen", "Empalizada", "Canterero", "Cerveceria", "Trampero", "Mansion del Heroe", "Gran Almacen", "Gran Granero", "Maravilla del Mundo", "Abrevadero"];
            this.datarecieved = "Datos recividos. Oprimir Comenzar Para activar el script.";
            this.datanotrecieved = "Datos no recividos. Oprimir actualizar para intentarlo de nuevo.";
            this.checking = "Comprobando que hacer";
            this.analysingvillages = "Analizando todas tus aldeas.";
            this.sendingresurces = "Mandando recursos";
            this.trainingtroops = "Entrenando Tropas";
            this.building = "Construyendo";
            this.sendingtroops = "Mandando tropas a ";
            this.stopped = "detenido";
            this.buildingsucessful = "Construccion terminada";
            this.buildingatwantedlevel = "Construccion fallida. La construccion estan en el nivel deseado";
            this.unabletobuild = "Construccion fallida. No se puede construir.";
            this.sendingressucessful = "Recursos mandados completado";
            this.notenoughtres = "No hay suficientes recursos.";
            this.unabletosendres = "No se puede mandar recursos a este sitio.";
            this.trainingsuccesful = "Entrenado de tropas terminado";
            this.sendingtroopssuccesul = "Mandando tropas correctamente.";
            this.deletedfarm = "Granja borrada/bloqueada";
            this.farminunsuccesful = "Granjeo fallido";
            this.gettingdata = "Obteniendo datos";
            this.deletingdata = "Borrando datos";
            this.deleted = "Borrando";
            this.nodata = "Error: probablemente no hay datos en el servidor";
            this.upgradeallfields = "Levantado todos los campos";
            this.veryhigh = "Muy Alta";
            this.high = "Alta";
            this.normal = "Normal";
            this.low = "Baja";
            this.verylow = "Muy baja";
            this.level = "Nivel";
            this.addtask = "Agregar tarea";
            this.fillres = "Completar recursos hasta obtener %:";
            this.emptyres = "Vaciar recursos hasta obtener % :";
            this.onetimesending = "Mandar una vez";
            this.bypercent = "Mandar por %";
            this.custom = "Personalizado";
            this.minsres = "Minimo:";
            this.trainonce = "Entrenar una vez";
            this.trainlater = "Entrenar despues";
            this.addtofarmlist = "Agregar a la lista de granjas";
            this.helpupgradeallfields = "Configurar la actualizacion de los campos. Si se configura en nivel 10, todos los campos se actualizaran del nivel 1 y luego el 2 etc. hasta el nivel deseado";
            this.helptrain = "Entrenar tropas luego. " + "\n";
            this.helptrain += "Entrenar tropas una vez: La tarea de entrenar tropas sera borrada" + "\n";
            this.helptrain += "Repetir cada tantos minutos: después de los script de entrenamiento de tropa , esperará el tiempo establecido y luego tratara de entrenar a las unidades de nuevo. Si usted no tiene los recursos suficientes, el script va a esperar hasta obtener los recursos necesarios, y asi sucesivamente. La tarea no se borra de la lista.";
            this.helpsendres = "Mercadeo" + "\n"
            this.helpsendres += "Enviar solo una vez: ponga la cantidad de recursos en el cuadro de los recursos y establesca coordenadas, haga clic en Agregar tarea y el bot los enviará más tarde" + "\n"
            this.helpsendres += "Enviar a la entrega: ponga la cantidad de recursos en el cuadro de los recursos y establesca coordenadas, haga clic en Agregar tarea y el bot los enviará a otro pueblo tan pronto como los comerciantes vuelvan del viaje" + "\n"
            this.helpsendres += "Enviar cada tantos minutos: ponga la cantidad de recursos en el cuadro de los recursos y establesca coordenadas, ponga cada X minutos quiere enviar, haga clic en Agregar tarea y el bot tratará de enviar a otra aldea cada X minutos" + "\n"
            this.helpsendres += "Enviar en % : " + "\n";
            this.helpsendres += "Minimos recursos: minimo envio de recursos que se enviaran (no se enviaran ni un recurso menos)" + "\n"
            this.helpsendres += "Vaciar los recursos para establecer%: este pueblo debe enviar recursos para establecer un % maximo en almacen que ha sido programado:" + "\n"
            this.helpsendres += "Si ha establecido que un 10% de recusos queden en la aldea usted tiene en almacen 80 000, la aldea tratara de enviar todos los recursos menos 8000 que permanecerán en la aldea." + "\n"
            this.helpsendres += "Recursos de relleno para establecer%: el pueblo que está enviando los RECURSOS debe llenar el almacen de la aldea que está enviando a este valor:" + "\n"
            this.helpsendres += "Si ha establecido un 90% y el almacen puede contener 80 000 recursos, enviará los recursos a este pueblo hasta llegar a 72 000." + "\n"
            this.helpsendres += "Este pueblo no debe tener menos recursos del % establecido (a menos que se gasten de otra manera) y el pueblo va a enviar recursos hasta no tener más recursos del % establecido (a menos que lo produscan ellos o conseguirlo de otros pueblos más adelante)." + "\n"
            this.helptasklist = "Tarea anadida en la ventana de travian se mostrarán aquí." + "\n";
            this.helptasklist += "Cada pueblo tiene su lista de edificios";
            this.helpfarmlist = "Granjas anadidas en la ventana de travian se mostrarán aquí. Haga doble clic en el número que desea cambiar y la ventana de configuracion se mostrara para poner el nuevo numero." + "\n";
            this.helpfarmlist += "Casilla de verificación para decidir si el granjeo se enciende o apaga" + "\n";
            this.helpfarmlist += "Botones de encender y apagar para decidir si toda la lista de granjeo esta activada para este pueblo" + "\n";
            break;
        case "com.my":
            this.getdata = "dapatkan data";
            this.start = "mula";
            this.stop = "berhenti";
            this.savetoserver = "simpan di server";
            this.deletedata = "padam data";
            this.sendsms = "hantar SMS";
            this.cropfinder = "mencari Farm/crop ";
            this.succesful = "berjaya";
            this.tasklist = "senarai tugas";
            this.farmlist = "senarai farm";
            this.trade = "berdagang";
            this.train = "melatih";
            this.fill = "isi";
            this.empty = "kosong";
            this.priority = "keutamaan";
            this.to = "ke";
            this.on = "buka";
            this.name = "Nama";
            this.type = "jenis";
            this.del = "padam";
            this.turnon = "membuka";
            this.turnoff = "matikan";
            this.repetevery = "ulang tiap";
            this.minutes = "minit";
            this.sendonreturn = "kirim lagi bila kembali";
            this.login = "Login ke travian dan klik ambil data";
            this.edit = "Double click pada edit";
            this.newval = "masukan new value";
            this.inputnum = "perlu memasukan angka";
            this.attopt = "masukan angka baru:" + "\n" + "2=bantuan" + "\n" + "3=serang" + "\n" + "4=Rompak";
            this.attoptallowed = "hanya angka 2, 3 dan 4 yang dibenarkan";
            this.allfields = "semua sumber";
            this.buldings = ["lokasi bangunan", "penebang kayu", "penggalian tanah liat", "lombong besi", "ladang", "kilang kayu", "kilang bata", "kilang besi", "pengisar gandum", "kedai roti", "gudang", "lombong", "pandai besi", "pabrik prisai", "pusat kebugaran", "bagunan utama", "titik perhimpunan", "pasar", "kedutaan", "Berek", "istana", "bengkel", "akademi", "gua", "balairaya", "residen", "istana", "perbendaharaan", "pejabat dagangan", "berek besar", "istal besar", "pagar besi", "pagar tanah", "pagar kayu", "tukang batu", "kilang arak", "perangkap", "padepokan", "gudang besar", "lombong besar", "Keajaiban dunia", "palung kuda"];
            this.datarecieved = "Data diterima. klik start untuk menjalankan script.";
            this.datanotrecieved = "data ditolak.ulangi, Klik update lagi.";
            this.checking = "memeriksa";
            this.analysingvillages = "memeriksa semua kampung.";
            this.sendingresurces = "menghantar sumber";
            this.trainingtroops = "Melatih askar";
            this.building = "pembangunan";
            this.sendingtroops = "menghantar askar ke ";
            this.stopped = "berhenti";
            this.buildingsucessful = "pembangunan selesei";
            this.buildingatwantedlevel = "pembangunan gagal. Bangunan telah berada pada level yang diinginkan";
            this.unabletobuild = "pembinaan gagal. Tidak boleh dibina.";
            this.sendingressucessful = "penghantaran sumber berjaya";
            this.notenoughtres = "tidak cukup sumber.";
            this.unabletosendres = "tidak boleh menghantar sumber ke tujuan.";
            this.trainingsuccesful = "askar berjaya dilatih";
            this.sendingtroopssuccesul = "sumber berjaya dihantar.";
            this.deletedfarm = "padam senarai farm";
            this.farminunsuccesful = "rompakan gagal dihantar";
            this.gettingdata = "mengambil data";
            this.deletingdata = "hapus data";
            this.deleted = "hapus";
            this.nodata = "Error: tidak ada data di server";
            this.upgradeallfields = "menaikan semua sumber";
            this.veryhigh = "sangat tinggi";
            this.high = "tinggi";
            this.normal = "biasal";
            this.low = "rendah";
            this.verylow = "sangat rendah";
            this.level = "Tahap";
            this.addtask = "tambahkan senarai tugas";
            this.fillres = "Masukkan sumber untuk di masukkan %:";
            this.emptyres = "Kosongkan sumber untuk dimasukkan % :";
            this.onetimesending = "hantar sekali";
            this.bypercent = "hantar mengikut %";
            this.custom = "Custom";
            this.minsres = "sumber terendah:";
            this.trainonce = "latih sekali";
            this.trainlater = "latih kemudian";
            this.addtofarmlist = "masukkan ke senarai rompakan";
            this.helpupgradeallfields = "atur tugas menaikan semua sumber, jika di set ke level 10, semua sumber akan meningkat kelevel 1 kemudian 2 dst, sampai semua sumber mencapai level yang diinginkan.";
            this.helptrain = "latih. " + "\n";
            this.helptrain += "latih sekali: askar akan dilatih kemudian tugas akan dihapus" + "\n";
            this.helptrain += "ulangi melatih: setelah scripts melatih askar, dan menunggu sampai masa yang telah di set, dan kemudian askar seterusnya akan dilatih lagi. Jika anda tidak memiliki cukup sumber, script akan menunggu sampai cukup sumber, tugas tidak akan dihapus dari daftar.";
            this.helpsendres = "pedagang" + "\n"
            this.helpsendres += "pengiriman sekali: masukan sumber ke kotak sumber dan set kordinat, click tambahkan tugas, dan bot akan mengirimnya nanti" + "\n"
            this.helpsendres += "kirim kembali: masukan sumber ke kotak sumber dan set kordinat, click tambahkan tugas, dan bot akan mengirimnya setelah pedagang kembali" + "\n"
            this.helpsendres += "kirim tiap saat: masukan sumber ke kotak sumber dan set kordinat, click tambahkan tugas, dan bot akan mengirimnya, masukan angka X, click tambahkan tugas dan bot akan mengirim sumber setiap X minit" + "\n"
            this.helpsendres += "dikirim oleh % : " + "\n";
            this.helpsendres += "Min res: jumlah minimal yang dikirim (tidak dapat mengirim 1 sumber)" + "\n"
            this.helpsendres += " Sumber daya Kosong untuk mengatur%: desa ini harus mengirimkan sebagai resourses banyak untuk mengatur desa yang di desa akan tetap yang% dari sumber daya yang ditetapkan:" + "\n"
            this.helpsendres += " Jika semua set ke 10% dan Anda memiliki warhouse 80 000, desa akan mencoba untuk mengirimkan semua sumber daya tapi 8000 dari masing-masing akan tetap tinggal di desa." + "\n"
            this.helpsendres += " Isi sumber daya untuk mengatur%: desa yang Anda kirimkan resourses untuk harus mengisi untuk warhouse desa Anda kirimkan untuk untuk nilai ini:" + "\n"
            this.helpsendres += " Jika diatur semua untuk 90% dan warhouse dapat berisi 80 000 sumber daya, akan mengirim sumber daya ke desa ini hingga mencapai 72 000." + "\n"
            this.helpsendres += " Jadi desa ini seharusnya tidak pernah kurang sumber daya% set (kecuali anda menghabiskan itu dinyatakan) dan desa Anda mengirim sumber daya untuk tidak harus memiliki sumber daya lebih kemudian mengatur% (kecuali jika memproduksi mereka atau mendapatkannya dari desa-desa lainnya kemudian)." + "\n"
            this.helptasklist = "Task added in travian window will show up here." + "\n";
            this.helptasklist += "tiap desa memiliki daftar pembangunan sendiri ";
            this.helpfarmlist = " Farms ditambahkan dalam travian jendela akan muncul di sini. Klik dua kali pada nomor yang ingin Anda ubah dan jendela akan muncul di mana Anda dapat mengatur nomor baru." + "\n";
            this.helpfarmlist += "tanda kotak untuk menentukan rompakan dilakukan atau tidak" + "\n";
            this.helpfarmlist += " Tombol Aktifkan dan Nonaktifkan memutuskan apakah senarai farm seluruh kampung ini diaktifkan " + "\n";
            break;
        case "dk":
            this.getdata = "Hent Data";
            this.start = "Start";
            this.stop = "Stop";
            this.savetoserver = "Gem pa server";
            this.deletedata = "Slet data";
            this.sendsms = "Send SMS";
            this.cropfinder = "Farm/crop soger";
            this.succesful = "Fuldfort";
            this.tasklist = "Opgave liste";
            this.farmlist = "Farm liste";
            this.trade = "Byt";
            this.train = "Tran";
            this.fill = "Fyld";
            this.empty = "Tom";
            this.priority = "Prioritet";
            this.to = "Til";
            this.on = "SLA TIL";
            this.name = "Navn";
            this.type = "type";
            this.del = "Slet";
            this.turnon = "Sla TIL";
            this.turnoff = "Sla FRA";
            this.repetevery = "Gentag hvert";
            this.minutes = "minuter";
            this.sendonreturn = "send igen ved retur";
            this.login = "Login i travian og tryk Hent Data";
            this.edit = "Double click for at redigere";
            this.newval = "Indsat ny vardi";
            this.inputnum = "Du skal indtaste et tal";
            this.attopt = "Indsat ny vardi:" + "\n" + "2=Reinforcement" + "\n" + "3=Angreb" + "\n" + "4=Plyndre";
            this.attoptallowed = "Kun vardier 2, 3 og 4 er tilladt.";
            this.allfields = "Alle felter";
            this.buldings = ["Byggested", "Skovhugger", "Lergrav", "Jernmine", "Kornavler", "Savvark", "Lerbranderi", "Jernstoberi", "Kornmolle", "Bageri", "Rastoflager", "Kornkammer", "Vaben smedje", "Rustnings smedje", "Turneringsplads", "Hovedbygning", "Forsamlingsplads", "Markedsplads", "Ambassade", "Kaserne", "Stald", "Varksted", "Akademi", "Gemmested", "Radhus", "Residens", "Palads", "Skatkammer", "Handelskontor", "Stor Kaserne", "Stor Stald", "Mur", "Jordvold", "Palisade", "Stenhugger", "Bryggeri", "Faldebygger", "Heltebygning", "Stor Rastoflager", "Stor Kornkammer", "Verdensvidunder", "Heste Drikkebrond"];
            this.datarecieved = "Data modtaget. tryk start for at starte script.";
            this.datanotrecieved = "Data ikke modtaget. Tryk Opdater og prov igen.";
            this.checking = "Kigger efter hvad der skal gores";
            this.analysingvillages = "Analysere alle dine byer.";
            this.sendingresurces = "Sender resourcer";
            this.trainingtroops = "Traner tropper";
            this.building = "Bygger";
            this.sendingtroops = "Sender tropper til ";
            this.stopped = "Stoppet";
            this.buildingsucessful = "Bygning fuldfort";
            this.buildingatwantedlevel = "bygning ej fuldfort. Bygning er allerede den onskede level";
            this.unabletobuild = "Bygning ej fuldfort. kunne ikke bygge.";
            this.sendingressucessful = "Sendt resourcer fuldendt";
            this.notenoughtres = "Ikke nok resourcer.";
            this.unabletosendres = "Kan ikke sende resourcer til denne destination.";
            this.trainingsuccesful = "Troppetraning fuldfort";
            this.sendingtroopssuccesul = "Tropper Sendt.";
            this.deletedfarm = "Farm slettet/blokeret";
            this.farminunsuccesful = "Farming ej fuldfort";
            this.gettingdata = "Henter data";
            this.deletingdata = "Sletter data";
            this.deleted = "Slettet";
            this.nodata = "Fejl: ingen data pa server";
            this.upgradeallfields = "Opgrader alle felter";
            this.veryhigh = "Meget Hoj";
            this.high = "Hoj";
            this.normal = "Normal";
            this.low = "Lav";
            this.verylow = "Meget lav";
            this.level = "Level";
            this.addtask = "Tilfoj opgave";
            this.fillres = "Fill resourcer til sat %:";
            this.emptyres = "Tom resourcer til sat % :";
            this.onetimesending = "engangs sending";
            this.bypercent = "Send med %";
            this.custom = "Custom";
            this.minsres = "Min res:";
            this.trainonce = "Tran en gang";
            this.trainlater = "Tran senere";
            this.addtofarmlist = "Tilfoj til farmliste";
            this.helpupgradeallfields = "Sat opgave til opgrader alle felter. hvis sat til level 10, vil alle felter blive opgraderet til level 1, og sa alle til level 2,... indtil alle er den onskede level.";
            this.helptrain = "Tran tropper senere. " + "\n";
            this.helptrain += "Tran en gang: Tropperne vil blive tranet, og opgaven slettet " + "\n";
            this.helptrain += "Gentag hver minuter: Nar scriptet har tranet tropper, vil det vente den anslaet tid og forsoge at trane tropper igen. Hvis du ikke har nok resourcer, vil scriptet vente til der er nok resourcer, trane tropper nar der er nok resourcer og igen vente til anslaet tid for traning af tropper igen. Opgaven vil ikke blive slettet fra listen.";
            this.helpsendres = "Handler" + "\n"
            this.helpsendres += "engangs sending: indtast resourcer i resource bokserne og indtast koordinater, klik tilfoj opgave og botten vil sende dem senere" + "\n"
            this.helpsendres += "send ved retur: indtast resourcer i resource bokserne og indtast koordinater, klik tilfoj opgave og botten vil sende dem til valgte by sa snart handelsfolkene kommer tilbage fra deres tur" + "\n"
            this.helpsendres += "Send hver minuter: indtast resourcer i resource bokserne og indtast koordinater, imput X number, klik tilfoj opgave og botten vil forsoge at sende dem til valgte by hver X minuter" + "\n"
            this.helpsendres += "Send ved % : " + "\n";
            this.helpsendres += "Min res: min belob af res script skal sende (sa det ikke sender 1 resource)" + "\n"
            this.helpsendres += "Tom resourser til % : denne by skal sende sa manger resourcer til valgte by  og skal undlade at sende % af resourcerne der er sat:" + "\n"
            this.helpsendres += "Hvis alle er sat til 10% og dit rastoflager er pa 80 000, byen vil sende alle resourcer undtagen 8000 af hver, som vil forblive i byen." + "\n"
            this.helpsendres += "Udfyld resourcer til %: byen du sender resourcer til skald udfylde rastoflageret af byen du sender til med denne vardi:" + "\n"
            this.helpsendres += "Hvis alle er sat til 90% og rastoflageret kan holde 80 000 resourcer, vil der blive sendt resourcer til denne by indtil den nar 72 000." + "\n"
            this.helpsendres += "Sa denne by skal aldrig have mindre sat end % resourser (med mindre du bruger dem pa en anden made) og byen du sender resourcer til skal ikke have mere end % resourcer (med mindre den selv producere dem eller far fra en anden by)." + "\n"
            this.helptasklist = "Opgaver tilfojet i travian vinduet bliver vist her." + "\n";
            this.helptasklist += "Alle byer har sin egen byggeliste";
            this.helpfarmlist = "Farms tilfojet i travian vindue bliver vist her. Dobbelt klik pa nummeret du onsker at andre og vinduet vil komme frem hvor du kan satte et nyt nummer." + "\n";
            this.helpfarmlist += "Checkbox bestemmer om farm er slaet til eller fra" + "\n";
            this.helpfarmlist += "Knapperne Sla TIL og Sla FRA bestemmer om farming er slaet til for denne by" + "\n";
            break;
        case "bg":
            this.getdata = "??????? ????????";
            this.start = "?????";
            this.stop = "????";
            this.savetoserver = "?????? ???????? ?? ???????";
            this.deletedata = "?????? ???????? ?? ???????";
            this.sendsms = "????? SMS";
            this.cropfinder = "???????? ?? ??????? ? ??????";
            this.succesful = "???????";
            this.tasklist = "???? ??? ??????";
            this.farmlist = "???? ??? ??????? ?? ?????????";
            this.trade = "???????";
            this.train = "????????";
            this.fill = "???????";
            this.empty = "??????";
            this.priority = "?????????";
            this.to = "??";
            this.on = "???.";
            this.name = "???";
            this.type = "???";
            this.del = "??????";
            this.turnon = "??????";
            this.turnoff = "???????";
            this.repetevery = "???????? ?? ?????";
            this.minutes = "??????";
            this.sendonreturn = "??????? ?????? ???? ?????????";
            this.login = "????? ?? ? ??????? ??????? ????????";
            this.edit = "?????? 2 ???? ?? ???????";
            this.newval = "?????? ???? ????????";
            this.inputnum = "?????? ?? ???????? ?????";
            this.attopt = "?????? ????????:" + "\n" + "2=????????????" + "\n" + "3=???????? ?????" + "\n" + "4=?????";
            this.attoptallowed = "????????? ????????? ?? ???? 2,3 ? 4";
            this.allfields = "?????? ??????";
            this.buldings
            this.datarecieved = "???????? ?? ?????????, ??????? ????? ?? ?? ?????? ????";
            this.datanotrecieved = "???????? ?? ?? ?????????, ???? ??????????? ?????????? ? ???????? ??????";
            this.checking = "?????????? ????? ?? ??????";
            this.analysingvillages = "?????? ?? ?????????";
            this.sendingresurces = "????????? ?? ???????";
            this.trainingtroops = "? ?????? ?? ?????????? ?? ??????";
            this.building = "? ?????? ?? ???????";
            this.sendingtroops = "????????? ?? ?????? ?? ";
            this.stopped = "??????";
            this.buildingsucessful = "????????? ? ???????";
            this.buildingatwantedlevel = "????????? ? ?? ???????.???? ?????? ???? ? ?? ?????? ????? ???????";
            this.unabletobuild = "????????????? ? ?????????! ?? ???? ?? ????????? ????";
            this.sendingressucessful = "??????????? ?? ??????? ? ?????????";
            this.notenoughtres = "?????? ?????????? ???????.";
            this.unabletosendres = "?? ???? ?? ????????? ??????? ?? ???? ??????????.";
            this.trainingsuccesful = "???????????? ?? ?????? ? ???????";
            this.sendingtroopssuccesul = "??????????? ?? ?????? ? ???????.";
            this.deletedfarm = "?????? ? ???????/?????????";
            this.farminunsuccesful = "?????????? ?????????";
            this.gettingdata = "?????????? ?? ?????";
            this.deletingdata = "????????? ?? ?????";
            this.deleted = "???????";
            this.nodata = "??????:???? ?????? ????? ?? ???????";
            this.upgradeallfields = "??????? ?? ?????? ??????";
            this.veryhigh = "????? ?????";
            this.high = "?????";
            this.normal = "????????";
            this.low = "?????";
            this.verylow = "????? ?????";
            this.level = "????";
            this.addtask = "?????? ? ??????";
            this.fillres = "??????? ????????? ??%:";
            this.emptyres = "???????? ????????? ?? % :";
            this.onetimesending = "?????????? ?????????";
            this.bypercent = "??????? ?? %";
            this.custom = "?? ?????";
            this.minsres = "??????? ??????:";
            this.trainonce = "???????? ??????";
            this.trainlater = "???????? ??-?????";
            this.addtofarmlist = "?????? ??? ????? ? ??????";
            this.helpupgradeallfields = "???? ????? ?????? ?????? ?? ????????? ?? ?????? ??????. ??? ???????? ???????? ?? ?? ??????? ?? ???? 10, ?? ?????? ?? ????? ??????? ?? ???? 1 ???? ???? ?????? ?? ???? 2??, ? ???? ?????? ?? ????????? ???????? ?? ??? ????";
            this.helptrain = "T????????? ?????? ?????? ??-????? " + "\n";
            this.helptrain += "???????? ??????????.???????? ?? ???? ????????? ? ???????? ?? ???? ???????" + "\n";
            this.helptrain += "???????? ????? ? ??????.??????? ???? ????????? ???????????? ?? ?????????? ?? ??? ?????? ??????? ?????????? ?? ? ????? ?? ????????? ???????????? ?? ??? ??????? ??????. ??? ?????? ?????????? ??????? ???? ??????? ?????? ?? ???????? ? ??????? ??????";
            this.helpsendres = "??????????? ???????" + "\n"
            this.helpsendres += "?????????? ???????: ???????? ???????? ?????????? ?????? ????? ?????? ?? ????????? ? ???????? ??????????.. " + "\n"
            this.helpsendres += "??????? ?????? ??? ?????????: ?????? ?????????? ? ?????? ? ????????? ? ?????? ?????? ??? ??????.. ?????? ?????????? ?? ?? ???????? ?? ???????? ??????? ?? ??????? ?? ???????? ??? ?????????? ?????" + "\n"
            this.helpsendres += "???????? ?? ????? ??????: ????????? ?? ? ??????? ?? ? ?????? ??? ????? ????" + "\n"
            this.helpsendres += "??????? ?? % : " + "\n";
            this.helpsendres += "??????? ??????: ??????????? ?????????? ?????? ????? ???? ???? ?? ???????(? ???? ?? ??????? 1 ??????)" + "\n"
            this.helpsendres += "???????? ????????? ?? % : ??????? ??????? ?????? ?? ???? ????, ???? ?? ? ???? ???? ?? ??????? ? % ??????:" + "\n"
            this.helpsendres += "??? ?????? ? ?? 10% ? ????? ????? 80000, ???? ?? ??????? ??????? ?????? ?? ? ????? ?? ??????? ???? 8000 (10%) ?????? . ??????: ????? 60000 ????? 55000 ????????? ? 48000 ??????, ?????? ?????? 80000..????????? 10% ? ?????????: ??????????? ?????? ?? ???? 52000 ????? ,48000 ????????? ? 40000 ??????.. 8000 ?? ?????? ?????? ? ?????" + "\n"
            this.helpsendres += "??????? ????????? ?? %: ??????? ??????? ?? ???? ???? ?????? ?????? ?? ???????? ? %:" + "\n"
            this.helpsendres += "??? ?????? ? ?? 90%. ? ?????? ?????? 80000. ?? ?? ?? ?????? ??????? ?? ??????? ?????? ?????? ?? ????? ?? ????? ??????? ?? ???????? 72000." + "\n"
            this.helpsendres += "????? ???? ???? ???? ?? ??? ?????? ?? ????? ?? ? % ??????? (?????????? ??? ?? ?? ????????? ?? ?????) ? ????? ?? ????? ??????? ?????? ???? ?? ??? ?????? ?? ? % ????? ??? ?????? ?????? ??? ?? ??????????? ??? ?? ??????? ?? ???? ????." + "\n"
            this.helptasklist = "???? ?? ???????? ????? ????? ?? ????? ?????????." + "\n";
            this.helptasklist += "????? ???? ??? ???? ???? ??? ??????";
            this.helpfarmlist = "???? ?? ?????? ????? ??? ????????.. ????? ???? ?? ??????? ????? ?????????? ????? ?????? ?? ????????? ? ?? ?? ?????? ???????? ?????? ?????? ?? ???????? ??????????." + "\n";
            this.helpfarmlist += "????????? ? ??????? ???????? ???? ???? ???? ?? ???? ????????? ??? ???????? ????????? ??? ??" + "\n";
            this.helpfarmlist += "???????? ?????? ? ??????? ????????? ???? ?????? ???? ? ???? ? ???????" + "\n";
        default:
            break;
        case "com.br":
            this.getdata = "Obter dados";
            this.start = "Iniciar";
            this.stop = "Parar";
            this.savetoserver = "Salvar no servidor";
            this.deletedata = "Apagar dados";
            this.sendsms = "Enviar SMS";
            this.cropfinder = "Achar Farm/crop ";
            this.succesful = "Successfull";
            this.tasklist = "Lista de tarefas";
            this.farmlist = "Lista de Farms";
            this.trade = "Comercio";
            this.train = "Treinar";
            this.fill = "Preencher";
            this.empty = "Vazio";
            this.priority = "Prioridade";
            this.to = "Parar";
            this.on = "Ligar";
            this.name = "Nome";
            this.type = "tipo";
            this.del = "Apagar";
            this.turnon = "Ligar";
            this.turnoff = "Desligar";
            this.repetevery = "Repetir todos";
            this.minutes = "Minutos";
            this.sendonreturn = "enviar após retornar";
            this.login = "Logar no travian e depois carregue dados";
            this.edit = "Clique 2 vezes para editar";
            this.newval = "Digitar um novo valor";
            this.inputnum = "Voce precisa inserir um número";
            this.attopt = "Inserir um número:" + "\n" + "2=Reforço" + "\n" + "3=Ataque" + "\n" + "4=Assalto";
            this.attoptallowed = "Somente os números 2, 3 and 4 sao aceitos.";
            this.allfields = "Todos os campos";
            this.buldings = ["Construir", "Bosque", "Poço de Barro", "Mina de Ferro", "Campo de Cereais", "Serraria", "Alvenaria", "Fundiçao", "Moinho", "Padaria", "Armazém", "Celeiro", "Ferreiro", "Armadura", "Praça de Torneios", "Edifício Principal", "Ponto de Reuniao", "Mercado", "Embaixada", "Quartel", "Cavalaria", "Oficina", "Academia", "Esconderijo", "Prefeitura", "Residencia", "Palácio", "Tesouraria", "Companhia do Comércio", "Grande Quartel", "Grande Cavalaria", "Muralha", "Muralha de barro", "Paliçada", "Pedreiro", "Cervejaria", "Fabrica de Armadilha", "Mansao do Herói", "Grande Armazém", "Grande Celeiro", "Maravilha do Mundo", "Cavalo Bebedouro"];
            this.datarecieved = "Dados carregados! Pressione o botao para iniciar o lançamento script.";
            this.datanotrecieved = " Dados nao carregados. Pressione o botao obter dados, novamente.";
            this.checking = "Verificando o que fazer";
            this.analysingvillages = "Analisando suas aldeias.";
            this.sendingresurces = "Enviar recursos";
            this.trainingtroops = "Tropas em treino";
            this.building = "Construir";
            this.sendingtroops = "O envio de tropas para";
            this.stopped = "Parou";
            this.buildingsucessful = "Construçao concluída.";
            this.buildingatwantedlevel = "Construçao deu errado. Construçao chegou ao nível pedido ou maximo";
            this.unabletobuild = "Construçao deu errado. Incapaz de construir.";
            this.sendingressucessful = "Envio de recursos concluído";
            this.notenoughtres = "Nao é possível enviar.";
            this.unabletosendres = "Incapaz de enviar recursos para o destino.";
            this.trainingsuccesful = "Treino de tropas concluído";
            this.sendingtroopssuccesul = "Envio de tropas deu certo.";
            this.deletedfarm = "Farm apagado/bloqueado";
            this.farminunsuccesful = "Farmar deu certo";
            this.gettingdata = "Carregar dados";
            this.deletingdata = "Apagar dados";
            this.deleted = "Apagar";
            this.nodata = "Erro: nao há dados no servidor";
            this.upgradeallfields = "Atualizar todos os campos";
            this.veryhigh = "Muito alta";
            this.high = "Alta";
            this.normal = "Normal";
            this.low = "Baixo";
            this.verylow = "Muito Baixo";
            this.level = "Nível";
            this.addtask = "Adicionar tarefa";
            this.fillres = "Encher recurso até %:";
            this.emptyres = "Recurso mínimo em % :";
            this.onetimesending = "Enviar 1 vez";
            this.bypercent = "Enviar tantos %";
            this.custom = "Personalizado";
            this.minsres = "Em minutos:";
            this.trainonce = "Treinar 1 vez";
            this.trainlater = "Treinar depois";
            this.addtofarmlist = "Adicionar a lista de farms";
            this.helpupgradeallfields = "Conjunto de tarefas para atualizar todos os seus campos. Se definido como o nível 10, todos os campos serao atualizados para nível 1, depois todos para o nível 2, até que todos os campos estejam no nível desejado.";
            this.helptrain = "Treinar tropas depois." + "\n";
            this.helptrain += "Treinar uma vez: Após o treino de tropas a tarefa será excluída" + "\n";
            this.helptrain += "Repetir a cada minuto:. depois de treinadas, ele vai esperar por um tempo definido e tentará treinar unidades de novo. Se nao tiver recursos suficientes, irá esperar para obter recursos suficientes, unidades de treino quando há recursos suficientes e, novamente, esperar o tempo definido antes de treinar novamente tarefa nao será excluída da lista.";
            this.helpsendres = "Comercio" + "\n"
            this.helpsendres += "Enviar uma vez: inserir recursos e coordenadas, clique em Adicionar tarefa e será enviado mais tarde." + "\n"
            this.helpsendres += "Enviar ao retornar: inserir recursos e coordenadas, clique em Adicionar tarefa e bot irá enviá-los para outra aldeia, logo que retornar da viagem." + "\n"
            this.helpsendres += "Envio programado: inserir recursos e coordenadas, inserir número X, clique em Adicionar tarefa e o bot vai tentar enviá-los para outra aldeia a cada X minutos " + "\n"
            this.helpsendres += "Enviar tantos %:" + "\n";
            this.helpsendres += "Envio por min: quantidade min que o script pode enviar (para que ele nao envie um recurso ) " + "\n"
            this.helpsendres += "Recurso mínimo de %: esta aldeia enviará recursos para outra aldeia, ao enviar ela manterá a quantia mínima de % dos recursos definidos para envio." + "\n"
            this.helpsendres += "Se destinou 10% para envio e em seu armazém tem 80.000, esta vila enviará 72.000 recursos mas 8.000 ficará na aldeia." + "\n"
            this.helpsendres += "Recurso cheio em %: esta aldeia receberá recursos de outra aldeia. Ela manterá a quantia máxima de % dos recursos definidos." + "\n"
            this.helpsendres += " Ao definir que os recursos devem chegar a 90% da capacidade. E se o armazém pode conter 80.000 recursos, o sistema irá enviar recursos para esta vila, até atingir 72 000." + " \n"
            this.helpsendres += " Portanto, esta vila chegará com os recursos até % da capacidade a menos que gaste de outra forma. E a aldeia que está enviando recursos deve ter o mínimo de % da capacidade. Só terá mais ao buscar de outras aldeias mais tarde." + " \n "
            this.helptasklist = "A Tarefa adicionada vai aparecer aqui" + "\n";
            this.helptasklist += "Cada as aldeias tem a sua lista de construçao ";
            this.helpfarmlist = " O farm adicionado vai aparecer aqui. De um duplo clique sobre o número que deseja alterar e uma janela aparecerá onde poderá fazer a alteraçao" + "\n";
            this.helpfarmlist += "Caixa de Seleçao decidir se a fazenda será ligado ou desligada" + "\n";
            this.helpfarmlist += "Botoes, Ligar e desligar para decidir se toda a lista de farms será usada por esta aldeia" + "\n";
            break;
        case "cz":
            this.getdata = "Načíst";
            this.start = "Start";
            this.stop = "Stop";
            this.savetoserver = "Uložit data";
            this.deletedata = "Smazat data";
            this.sendsms = "Poslat SMS";
            this.cropfinder = "Vyhledávač farem/multicropů";
            this.succesful = "Úspěšné";
            this.tasklist = "Stavbyvedoucí";
            this.farmlist = "Farmlist";
            this.trade = "Trade";
            this.train = "Trénovat";
            this.fill = "Vyplnit";
            this.empty = "Prázdné";
            this.priority = "Priorita";
            this.to = "Do";
            this.on = "Zapnuto";
            this.name = "Název";
            this.type = "Typ útoku";
            this.del = "Smazat";
            this.turnon = "Zapnout";
            this.turnoff = "Vypnout";
            this.repetevery = "Opakovat každých";
            this.minutes = "minut";
            this.sendonreturn = "Opět odeslat po návratu";
            this.login = "Přihlaš se do Travianu a Načti data";
            this.edit = "Dvojí klik pro úpravu";
            this.newval = "Zadej novou hodnotu";
            this.inputnum = "Musíš zadat hodnotu";
            this.attopt = "Zadej hodnotu:" + "\n" + "2=Podpora" + "\n" + "3=Normální útok" + "\n" + "4=Loupež";
            this.attoptallowed = "Pouze hodnoty 2, 3 a 4 jsou povoleny.";
            this.allfields = "Všechna pole";
            this.buldings = ["Staveniště", "Dřevorubec", "Hliněný důl", "Železný důl", "Obilné pole", "Pila", "Cihelna", "Slévárna", "Mlýn", "Pekárna", "Sklad surovin", "Sýpka", "Kovář", "Zbrojnice", "Turnajové hříště", "Hlavní budova", "Shromaždiště", "Tržiště", "Ambasáda", "Kasárny", "Stáje", "Dílna", "Akademie", "Úkryt", "Radnice", "Rezidence", "Palác", "Pokladnice", "Obchodní kancelář", "Velké kasárny", "Velké stáje", "Městská zeď", "Zemní hráz", "Palisáda", "Kameník", "Pivovar", "Pasti", "Hrdinský dvůr", "Velké sklady", "Velké sýpky", "Div světa", "Koňské napajedlo"];
            this.datarecieved = "Data načteny. Stiskni Start pro spuštění skriptu.";
            this.datanotrecieved = "Data nenačteny. Stiskni Aktualizovat k opětovnému načtení.";
            this.checking = "Přemýšlím";
            this.analysingvillages = "Analyzování tvých vesnic.";
            this.sendingresurces = "Odesílání jednotek";
            this.trainingtroops = "Trénování jednotek";
            this.building = "Stavba";
            this.sendingtroops = "Odesílání jednotek do ";
            this.stopped = "Zastaveno";
            this.buildingsucessful = "Stavba dokončena";
            this.buildingatwantedlevel = "Neúspěná stavba, již je na požadované úrovni";
            this.unabletobuild = "Neúspěšná stavba, nelze ji postavit";
            this.sendingressucessful = "Jednotky úspěšně odeslány";
            this.notenoughtres = "Málo jednotek k odeslání.";
            this.unabletosendres = "Nelze odeslat jednotky do požadovaného cíle.";
            this.trainingsuccesful = "Jednotky úspěšně vytrénovány";
            this.sendingtroopssuccesul = "Jednotky úspěšně odeslány.";
            this.deletedfarm = "Farma smazána/blokována";
            this.farminunsuccesful = "Neúspěšné farmení";
            this.gettingdata = "Načítání";
            this.deletingdata = "Mazání dat";
            this.deleted = "Smazáno";
            this.nodata = "Chyba: pravděpodoboně nejsou data na serveru";
            this.upgradeallfields = "Rozšířit všechna pole";
            this.veryhigh = "Velmi vysoká";
            this.high = "Vysoká";
            this.normal = "Normální";
            this.low = "Nízká";
            this.verylow = "Velmi nízká";
            this.level = "Úroveň";
            this.addtask = "Stavbyvedoucí";
            this.fillres = "Fill resources to set %:";
            this.emptyres = "Empty resources to set % :";
            this.onetimesending = "Odeslat pouze jednou";
            this.bypercent = "Send by %";
            this.custom = "Přednastaveno";
            this.minsres = "Min res:";
            this.trainonce = "Trénovat pouze jednou";
            this.trainlater = "Trénovat později";
            this.addtofarmlist = "Přidat do Farmlistu";
            this.helpupgradeallfields = "Zadat požadavek k rozšíření všech polí. Pokud zadáš na úroveň 10, všechny pole budou rozšířeny na úroveň 1, poté na úroveň 2,...dokud všechny pole nebudou na požadované úrovni 10.";
            this.helptrain = "Trénovat jednotky později. " + "\n";
            this.helptrain += "Trénovat jednou: Jednotky budou vytrénovány pouze nyní, poté bude příkaz zrušen. " + "\n";
            this.helptrain += "Opakovat po minutách: Poté, co budou vytrénovány jednotky, bude čekáno stanovenou dobu a poté budou jednotky opět trénovány. Pokud nebude dostatek surovin, bude čekáno jakmile bue dostatek surovin, poté bude opět vytrénováno. Požadavek se neodstraní.";
            this.helpsendres = "Traider" + "\n"
            this.helpsendres += "Jednorázové odeslání: jednorázově bude odesláno zadané množství." + "\n"
            this.helpsendres += "Odeslat po návratu: po návratu z cílové vesnice, bude opět odesláno zadané množství." + "\n"
            this.helpsendres += "Odeslat po minutách: zadané množství bude odesíláno po zvolených minutách." + "\n"
            this.helpsendres += "Odeslat dle % : " + "\n";
            this.helpsendres += "Minimální množství: nejmenší množství, které se mohou odeslat." + "\n"
            this.helpsendres += "Empty resources to set % : this village should send as much resourses to set village that in village will remain that % of resources that are set:" + "\n"
            this.helpsendres += "If all set to 10% and you have warhouse 80 000, village will try to send out all resources but 8000 of each will remain in village." + "\n"
            this.helpsendres += "Fill resources to set %: the village you are sending resourses to should fill to warhouse of village you are sending to to this value:" + "\n"
            this.helpsendres += "If all set to 90% and warhouse can contain 80 000 resources, it will send resources to this village untill it reaches 72 000." + "\n"
            this.helpsendres += "So this village should never have less then set % resources (unless you spend it otherwise) and village you are sending resources to should not have more resources then set % (unless it produce them or get it from other villages later)." + "\n"
            this.helptasklist = "Task added in travian window will show up here." + "\n";
            this.helptasklist += "Every village has its own building list";
            this.helpfarmlist = "Farms added in travian window will show up here. Double click on number you wish to change and window will show up where you can set new number." + "\n";
            this.helpfarmlist += "Checkbox decide if farm is turned on or off" + "\n";
            this.helpfarmlist += "Buttons Turn On and Turn Off decide if whole farmlist for this village is turned on" + "\n";
            break;
        case "gr": //server
            this.getdata = "???????? ????µ????";
            this.start = "??????";
            this.stop = "???????";
            this.savetoserver = "?????????? ???? server";
            this.deletedata = "???????? ????µ????";
            this.sendsms = "???????? SMS";
            this.cropfinder = "?????? ???µ??/????????";
            this.succesful = "????????";
            this.tasklist = "????? ????????";
            this.farmlist = "????? ???µ??";
            this.trade = "????????";
            this.train = "?????????";
            this.fill = "Fill";
            this.empty = "?????";
            this.priority = "?????????????";
            this.to = "To";
            this.on = "ON";
            this.name = "???µ?";
            this.type = "?????";
            this.del = "????????";
            this.turnon = "????????????";
            this.turnoff = "???????";
            this.repetevery = "???????ß? ????";
            this.minutes = "?????";
            this.sendonreturn = "?????? ???? ???? ??? ?????????";
            this.login = "?????????? ??? travian ??? ?????? ???????? ????µ????";
            this.edit = "????? click to edit";
            this.newval = "???????? ??? ??µ?";
            this.inputnum = "?????? ?? ???????? ??? ????µ?";
            this.attopt = "???????? ??? ??µ?:" + "\n" + "2=??????????" + "\n" + "3=??????? ????????" + "\n" + "4=??????? ??????µ?";
            this.attoptallowed = "???? ?? ??µ?? 2, 3 and 4 ????????????.";
            this.allfields = "??? ?? ?????";
            this.buldings = ["?????????", "?????????", "??????? ?????", "??????? ???????", "?????? ????????", "????????????", "??????????", "??????? ???????", "????? ????????", "??????????", "??????? ?????? ????", "??????????", "Blacksmith", "????????????", "??????? ????µ????", "???????? ??????", "??????? ?????????????", "?????", "????ß???", "??????????", "???ß???", "??????????", "?????µ??", "???????", "??µ??????", "??????", "??????", "??????????????", "?µ?????? ???????", "?????? ??????????", "??????? ???ß???", "?????? ??????", "??µ????? ??????", "?????? µ? ?????????", "??????µ??", "??????????", "???????", "??????? ?????", "?????? ??????? ????", "?????? ??????????", "??????µ?? ???µ?", "???????? ??????"];
            this.datarecieved = "????µ??? ?????????. ??????? ?? ???µ?? ?????? ??? ?? ????????? ?? script.";
            this.datanotrecieved = "????µ??? ??? ?????????. ??????? ?? ???µ?? ???µ????? ??? ?????????.";
            this.checking = "??????? ?? ?? ???????";
            this.analysingvillages = "??????? ???? ??? ?????? ???.";
            this.sendingresurces = "???????? ????";
            this.trainingtroops = "?????????? ???????µ????";
            this.building = "??????";
            this.sendingtroops = "???????? ???????µ???? ??? ";
            this.stopped = "???µ???µ???";
            this.buildingsucessful = "???????? ?????µ?";
            this.buildingatwantedlevel = "?????????? ?????µ?. ?? ?????? ????? ??? ?????µ??? ???????";
            this.unabletobuild = "?????????? ?????µ?. ??????? ?? ??????.";
            this.sendingressucessful = "???????? ???????? ????";
            this.notenoughtres = "?? ??????? ????.";
            this.unabletosendres = "?????????? ???????? ???? ?? ???'?? ??? ???????µ?.";
            this.trainingsuccesful = "???????? ?????????? ???????µ????";
            this.sendingtroopssuccesul = "???????? ???????? ???????µ????.";
            this.deletedfarm = "???µ? ??????????/µ????????????";
            this.farminunsuccesful = "Farming ??????????";
            this.gettingdata = "???? ????µ????";
            this.deletingdata = "???????? ????µ????";
            this.deleted = "????????";
            this.nodata = "?????: ??????? ????? ????µ??? ? server";
            this.upgradeallfields = "???ß??µ??? ???? ??? ??????";
            this.veryhigh = "???? ?????";
            this.high = "?????";
            this.normal = "????????";
            this.low = "??µ???";
            this.verylow = "???? ??µ???";
            this.level = "???????";
            this.addtask = "???????? ???????";
            this.fillres = "??µ??? ???? ??? %:";
            this.emptyres = "??????? ???? ??? % :";
            this.onetimesending = "??? ???? ????????";
            this.bypercent = "?????? ?? %";
            this.custom = "Custom";
            this.minsres = "????????? ????:";
            this.trainonce = "?????????? µ?? ????";
            this.trainlater = "?????????? ????????";
            this.addtofarmlist = "???????? ??? ????? ???µ??";
            this.helpupgradeallfields = "?????? ??? ???????? ???ß??µ???? ??? ??????. ??? ??????? ??? ??????? 10 , ??? ?? ????? ?? ???ß??µ?????? ??? ??????? 1 µ??? ??? ??? ??????? 2,... µ???? ?? ??????? ?? ?????µ??? ???????.";
            this.helptrain = "?????????? ???????µ???? ????????. " + "\n";
            this.helptrain += "?????????? µ?? ????: ?? ???????µ??? ?? ???????????? ??? ? ??????? ?? ?????????" + "\n";
            this.helptrain += "???????ß? ???? ?????: after script trains units, it will wait for set time and then try to train units again. If you dont have enought resources, script will wait to get enought resources, train units when there is enought resources and again wait for set time before training again. Task will not get deleted from list.";
            this.helpsendres = "????????????" + "\n"
            this.helpsendres += "??? ???? ????????: imput resources into resource boxes and set coordinate, click add task and bot will send them later" + "\n"
            this.helpsendres += "???????? ???? ??? ?????????: imput resources into resource boxes and set coordinate, click add task and bot will send them to other village as soon as traiders return from trip" + "\n"
            this.helpsendres += "???????? ???? ?????: imput resources into resource boxes and set coordinate, imput X number, click add task and bot will try to send them to other village every X minutes" + "\n"
            this.helpsendres += "???????? % : " + "\n";
            this.helpsendres += "????????? ????: min amount of res script can send (so it wont send 1 resource)" + "\n"
            this.helpsendres += "Empty resources to set % : this village should send as much resourses to set village that in village will remain that % of resources that are set:" + "\n"
            this.helpsendres += "If all set to 10% and you have warhouse 80 000, village will try to send out all resources but 8000 of each will remain in village." + "\n"
            this.helpsendres += "Fill resources to set %: the village you are sending resourses to should fill to warhouse of village you are sending to to this value:" + "\n"
            this.helpsendres += "If all set to 90% and warhouse can contain 80 000 resources, it will send resources to this village untill it reaches 72 000." + "\n"
            this.helpsendres += "So this village should never have less then set % resources (unless you spend it otherwise) and village you are sending resources to should not have more resources then set % (unless it produce them or get it from other villages later)." + "\n"
            this.helptasklist = "Task added in travian window will show up here." + "\n";
            this.helptasklist += "Every village has its own building list";
            this.helpfarmlist = "Farms added in travian window will show up here. Double click on number you wish to change and window will show up where you can set new number." + "\n";
            this.helpfarmlist += "Checkbox decide if farm is turned on or off" + "\n";
            this.helpfarmlist += "Buttons Turn On and Turn Off decide if whole farmlist for this village is turned on" + "\n";
            break;
        case "rs": //server
            this.getdata = "Preuzmi Podatke";
            this.start = "Start";
            this.stop = "Stop";
            this.savetoserver = "Sačuvaj na server";
            this.deletedata = "Obriši podatke";
            this.sendsms = "Pošalji SMS";
            this.cropfinder = "Farme/žitnice pronalazač";
            this.succesful = "Uspešno";
            this.tasklist = "Lista zadataka";
            this.farmlist = "Lista farmi";
            this.trade = "Trgovina";
            this.train = "Istreniraj";
            this.fill = "Popuni";
            this.empty = "Prazno";
            this.priority = "Prioritet";
            this.to = "u";
            this.on = "na";
            this.name = "Ime";
            this.type = "vrsta";
            this.del = "Brisanje";
            this.turnon = "Upali";
            this.turnoff = "Ugasi";
            this.repetevery = "Ponovi svakih";
            this.minutes = "minuta";
            this.sendonreturn = "pošalji ponovo po povratku";
            this.login = "Uloguj se na travian i klikni na Preuzmi Podatke";
            this.edit = "Dupli klik za ispravku";
            this.newval = "Unesi novu vrednost";
            this.inputnum = "Treba da ubaciš broj";
            this.attopt = "Ubaci novu vrednost:" + "\n" + "2=Pojačanje" + "\n" + "3=Napad" + "\n" + "4=Pljačka";
            this.attoptallowed = "Samo vrednosti 2, 3 i 4 su dozvoljene.";
            this.allfields = "Sva polja";
            this.buldings = ["Mesto gradnje", "Drvoseča", "Rudnik gline", "Rudnik gvožđa", "Njiva", "Pilana", "Ciglana", "Livnica", "Mlin", "Pekara", "Skladište", "Silos", "Kovačnica", "Oružarnica", "Viteška arena", "Glavna zgrada", "Mesto okupljanja", "Pijaca", "Ambasada", "Kasarna", "Štala", "Radionica", "Akademija", "Pekara", "Opština", "Rezidencija", "Palata", "Riznica", "Trgovački centar", "Velika Kasarna", "Velika Štala", "Gradski Zid", "Zemljani Zid", "Palisada", "Kamenorezac", "Pivara", "Postavljač zamki", "Dvorac Heroja", "Veliko Skladište", "Veliki Silos", "Svetsko Čudo", "Pojilište"];
            this.datarecieved = "Podaci primljeni. Pritisni start dugme da pokreneš skriptu.";
            this.datanotrecieved = "Podaci nisu primljeni. Pritisni updejtuj dugme da pokušaš ponovo.";
            this.checking = "Proveravam šta da radim";
            this.analysingvillages = "Analiziranje svih tvojih sela.";
            this.sendingresurces = "Slanje resursa";
            this.trainingtroops = "Obučavanje jedinica";
            this.building = "Izgradnja";
            this.sendingtroops = "Slanje trupa u ";
            this.stopped = "Zaustavljeno";
            this.buildingsucessful = "Izgradnja uspešna";
            this.buildingatwantedlevel = "Izgradnja nije uspela. Građevina je već na željenom nivou";
            this.unabletobuild = "Izgradnja nije uspela. U nemogućnosti da se izgradi.";
            this.sendingressucessful = "Slanje sirovina uspešno";
            this.notenoughtres = "Nema dovoljno sirovina.";
            this.unabletosendres = "Nije moguće poslati sirovine na ovo odredište.";
            this.trainingsuccesful = "Obučavanje jedinica uspešno";
            this.sendingtroopssuccesul = "Slanje jedinica uspešno.";
            this.deletedfarm = "Farma obrisana/blokirana";
            this.farminunsuccesful = "Farmanje neuspelo";
            this.gettingdata = "Dobijanje podataka";
            this.deletingdata = "Brisanje podataka";
            this.deleted = "Obrisano";
            this.nodata = "Greška: verovatno nema podataka na serveru";
            this.upgradeallfields = "Nadogradi sva polja";
            this.veryhigh = "Veoma visoko";
            this.high = "Visoko";
            this.normal = "Normalno";
            this.low = "Nisko";
            this.verylow = "Veoma nisko";
            this.level = "Nivo";
            this.addtask = "Dodaj zadatak";
            this.fillres = "Popunite sirovine da podesite %:";
            this.emptyres = "Ispraznite sirovine da podesite % :";
            this.onetimesending = "Slanje jedanputa";
            this.bypercent = "Pošalji %";
            this.custom = "po narudžbini";
            this.minsres = "Min sirovina:";
            this.trainonce = "Obuči jednom";
            this.trainlater = "Obuči kasnije";
            this.addtofarmlist = "Dodaj na listu farmi";
            this.helpupgradeallfields = "Postavite zadatak da nadogradite sva vaša polja. ako je podešeno na nivo 10, sva polja će bitinadograđena na nivo 1, onda sva do nivoa 2,... dok sva polja nisu na željenom nivou.";
            this.helptrain = "Obuči jedinice kasnije. " + "\n";
            this.helptrain += "Obuči jednom: jedinice će biti obučene i zadatak će biti izbrisan" + "\n";
            this.helptrain += "Ponavljaj svake minute: kada skripta obuči jedinicu, ona će čekati određeno vreme, a zatim će pokušati da obuči jedinice ponovo. Ako nemaš dovoljno sirovina, skripta će čekati da dobiješ dovoljno sirovina, obučiti jedinice kada ima dovoljno resursa i ponovo čekati određeno vreme pre nego pokuša ponovo. Zadatak neće biti obrisan sa liste.";
            this.helpsendres = "Trgovac" + "\n"
            this.helpsendres += "Slanje jedanput: unesite količinu sirovina u kvadratiće i podesite koordinate, klikni dodaj zadatak i bot će ih poslati kasnije" + "\n"
            this.helpsendres += "Poslati po povratku: unesite sirovine u kvadratiće i postavite koordinate , kliknite na dugme dodaj zadatak i bot će ih poslati u drugo selo čim se trgovci vrate sa puta" + "\n"
            this.helpsendres += "Pošalji svakih minuta: unesite sirovine u kvadratiće i postavite koordinate, unesite X broj, kliknite na dugme dodaj zadatak i bot će pokušati da ih pošalje u drugo selo svakih X minuta" + "\n"
            this.helpsendres += "Pošalji po % : " + "\n";
            this.helpsendres += "Min sirovina: minimalna količina koju bot može da pošalje (tako neće slati po 1 sirovinu)" + "\n"
            this.helpsendres += "Isprazniti sirovine do % : ovo selo će slati onoliko sirovina u zadano selo dok ne preostane po % sirovina kliko je zadato:" + "\n"
            this.helpsendres += "Ako je sve podešeno na 10% a imaš skladište na 80 000, selo će pokušati da pošalje sve sirovine osim 8000 od svake će ostati u selu." + "\n"
            this.helpsendres += "Napuni sirovine do %: selo kome šalješ sirovine će popuniti skladište u selu kome šalješ do zadate vrednosti:" + "\n"
            this.helpsendres += "Ako je sve podešeno na 90% a skladište može da primi 80 000 sirovina, ono će slati sirovine u to selo dok ne dostigne 72 000." + "\n"
            this.helpsendres += "Dakle u ovom selu nikad ne bi trebalo da ima manje od % sirovina (osim ako ih potrošite drugačije) a selo kome šaljete sirovine ne bi trebalo da ima više od % (osim ako ih proizvede ili ih dobije od drugog sela kasnije)." + "\n"
            this.helptasklist = "Task added in travian window will show up here." + "\n";
            this.helptasklist += "Svako selo ima sopstvenu listu gradnje";
            this.helpfarmlist = "Farme dodane u travian prozoru će se pojaviti tamo. Dupli klik na broj koji želite da promenite i pojaviće se prozor u kome možete da unesete novu vrednost." + "\n";
            this.helpfarmlist += "Čekiranjem u kvadratiću odlučujete dali je farma aktivna ili ne" + "\n";
            this.helpfarmlist += "Dugmeta upaljeno i ugašeno odlučuju dali je cela lista farmi za to selo upaljena ili ne" + "\n";
            break;
        case "ir": //multiple servers
            this.getdata = "?????? ???????";
            this.start = "????";
            this.stop = "????";
            this.savetoserver = "????? ?? ????";
            this.deletedata = "??? ???? ???????";
            this.sendsms = "????? ?????";
            this.cropfinder = "?????? ????/????";
            this.succesful = "??????";
            this.tasklist = "?????";
            this.farmlist = "???? ????";
            this.trade = "????";
            this.train = "?????";
            this.fill = "??";
            this.empty = "????";
            this.priority = "??????";
            this.to = "??";
            this.on = "????";
            this.name = "???";
            this.type = "???";
            this.del = "??? ????";
            this.turnon = "???? ????";
            this.turnoff = "????? ????";
            this.repetevery = "????? ??";
            this.minutes = "?????";
            this.sendonreturn = "????? ???? ?? ?? ?????";
            this.login = "???? ?????? ???? ? ??? ?? ?????? ??????? ???? ????";
            this.edit = "???? ?????? 2 ??? ???? ????";
            this.newval = "???? ???? ????? ????";
            this.inputnum = "??? ???? ?? ????? ???? ????";
            this.attopt = "???? ???? ????? ????" + "\n" + "2=????????" + "\n" + "3=????" + "\n" + "4=????";
            this.attoptallowed = "??? ???????? ????? 2? 3? 4 ?? ???? ????";
            this.allfields = "??? ? ???? ??";
            this.buldings
            this.datarecieved = "??????? ?????? ??. ???? ???? ?? ???? ???? ??????? ?????";
            this.datanotrecieved = "??????? ?????? ???. ???? ????????? ?? ???? ???? ???? ?????";
            this.checking = "?? ??? ?? ???? ????? ?? ?? ???? ????? ???";
            this.analysingvillages = "?????? ???? ??? ????? ??.";
            this.sendingresurces = "????? ?????";
            this.trainingtroops = "????? ????";
            this.building = "?????";
            this.sendingtroops = "????? ?????? ?? ";
            this.stopped = "???? ???";
            this.buildingsucessful = "???? ?? ??????";
            this.buildingatwantedlevel = "???? ??????. ??????? ?? ????? ?? ??? ???? ??? ???";
            this.unabletobuild = "???? ??????. ?????? ?? ?????";
            this.sendingressucessful = "????? ????? ?????? ???? ???.";
            this.notenoughtres = "????? ???? ????.";
            this.unabletosendres = "???? ????? ????? ?? ??? ??? ??????";
            this.trainingsuccesful = "????? ???? ?????? ???? ???";
            this.sendingtroopssuccesul = "????? ???? ?????? ???? ???";
            this.deletedfarm = "???? ??? ??/???? ??";
            this.farminunsuccesful = "???? ???? ??????";
            this.gettingdata = "?????? ???????";
            this.deletingdata = "??? ???? ???????";
            this.deleted = "??? ??";
            this.nodata = "????: ??????? ???????? ?? ???? ????";
            this.upgradeallfields = "????????? ??? ? ???? ??";
            this.veryhigh = "????? ????";
            this.high = "????";
            this.normal = "??????";
            this.low = "?????";
            this.verylow = "???? ?????";
            this.level = "?????";
            this.addtask = "????? ?????";
            this.fillres = "?? ??? ????? ?? ????? ?? %:";
            this.emptyres = "???? ???? ????? ?? ????? ?? % :";
            this.onetimesending = "????? ????? ?????";
            this.bypercent = "????? ?? %";
            this.custom = "??????";
            this.minsres = "????? ?????:";
            this.trainonce = "????? ????? ????";
            this.trainlater = "???? ????? ????";
            this.addtofarmlist = "????? ???? ?? ???? ????";
            this.helpupgradeallfields = "????? ??? ???? ???????? ??? ???? ??. ??? ??????? ???? ???? ?? ??? 10 ????? ??? ????? ???? ?? ???? ?? ??? 1? ??? ??? 2?... ?? ????? ?? ??? ???? ?? ????? ?? ??? ????????.";
            this.helptrain = "???? ?? ?? ???? ????? ??. " + "\n";
            this.helptrain += "????? ?????: ???? ?? ????? ?? ???? ? ????? ?? ??? ?? ????" + "\n";
            this.helptrain += "????? ???? ?? ?????: ??? ?? ????? ??????? ????? ??? ?????? ??? ??? ??? ????? ???? ???????? ? ??? ??? ????? ?? ????? ???? ?? ??????. ??? ??? ?????? ????? ????? ??????? ??? ????? ?? ????? ???? ?? ???? ??????? ????? ?????? ?????? ????? ?? ????? ???? ???? ? ?????? ??? ?????? ???? ???????? ??? ?? ????? ??????. ????? ??? ?????? ?? ????.";
            this.helpsendres = "????" + "\n"
            this.helpsendres += "????? ?????: ???? ????? ?? ?? ???? ?? ????? ? ????? ??????? ?????? ??? ???? ???? ?? ????? ???? ??? ? ??? ????? ????? ?? ?? ?? ?????" + "\n"
            this.helpsendres += "????? ?? ?????: ???? ????? ?? ?? ???? ?? ????? ? ????? ??????? ?????? ??? ???? ???? ?? ????? ???? ??? ? ??? ????? ????? ?? ?? ?? ????? ??? ???? ?? ??? ????? ?????? ??????? ?? ?????" + "\n"
            this.helpsendres += "????? ?? ?? ?? ?? ?????: ???? ????? ?? ?? ???? ?? ????? ? ????? ??????? ?????? ??? ???? ????? ????? ???? ??? ???? ???? ?? ????? ???? ??? ? ??? ??? ????? ?? ????? ???? ?? ????? ??? ???? ?? ???? ?????" + "\n"
            this.helpsendres += "????? ?? % : " + "\n";
            this.helpsendres += "????? ?????: ????? ????? ????? ?? ??????? ?? ????? ????? ??? (?????? ????? ?????? 1 ????)" + "\n"
            this.helpsendres += "???? ???? ????? ?? % : ??? ????? ???? ????? ??? ????? ?????? ?? ????? ?? ????? ?? ????? ????? ?? ????? % ?? ????? ?? ?? ???" + "\n"
            this.helpsendres += "??? ??? ????? ????? ?? 10 ???? ? ????? ??? 80000 ???? ???? ???? ?? ????? ????? ??? ????? ?????? ??? 8000 ?? ?? ?? ???? ?? ???? ?? ?????" + "\n"
            this.helpsendres += "?? ???? ????? ?? ????? ?? %: ????? ????? ????? ????? ?? ?? ??? ????? ????? ??? ????? ?????? ?? ??? ?????" + "\n"
            this.helpsendres += "??? ??? ???? ????? ?? 90 ???? ? ????? ???? 80000 ????? ???? ????? ????? ????? ?? ??? ???? ?? ????? ?? ???? ?? 72000." + "\n"
            this.helpsendres += "???????? ????? ?????? ?? ??? ????? ????? ???? ?? % ????? ??? (????? ??? ???? ???? ?? ??? ????) ? ????? ?? ?? ??? ????? ?? ????? ????? ?? ?????? ???? ????? ????? ?? % (????? ???? ????? ??? ?? ?? ????? ??? ???? ?????)." + "\n"
            this.helptasklist = "????? ??? ????? ??? ?? ?????? ????? ????? ???? ?????" + "\n";
            this.helptasklist += "??? ????? ?? ?? ??? ???? ???? ??????? ?????? ?????";
            this.helpfarmlist = "???? ??? ????? ??? ?? ???? ?????? ????? ???? ???? ??????. 2??? ???? ???? ?? ???? ?? ???????? ??? ???? ? ???? ???? ????? ?? ??? ???? ?? ??? ???? ?? ???? ????" + "\n";
            this.helpfarmlist += "???? ????? ???? ????? ???? ??? ???? ?? ????" + "\n";
            this.helpfarmlist += "???? ???? ????? ???? ???? ???? ???? ???? ??? ????? ???" + "\n";
            break;
        case "fr": //multiple servers
            this.getdata = "Obtenir les données";
            this.start = "Démarrer";
            this.stop = "Arreter";
            this.savetoserver = "Sauvegarder";
            this.deletedata = "Supprimer les données";
            this.sendsms = "Envoyer un SMS";
            this.cropfinder = "Rechercher des frigos/oasis/15c";
            this.succesful = "Effectué";
            this.tasklist = "Liste des tâches";
            this.farmlist = "Liste de pillage";
            this.trade = "Envoyer des ressources";
            this.train = "Former";
            this.fill = "Remplir";
            this.empty = "Vide";
            this.priority = "Priorité";
            this.to = "A";
            this.on = "ON";
            this.name = "Nom";
            this.type = "type";
            this.del = "Effacer";
            this.turnon = "Activer";
            this.turnoff = "Désactiver";
            this.repetevery = "Répéter chaque x";
            this.minutes = "minutes";
            this.sendonreturn = "renvoyer des le retour";
            this.login = "Connectez vous a Travian et cliquez sur Obtenir les données";
            this.edit = "Double clic pour éditer";
            this.newval = "Entrez une nouvelle valeur";
            this.inputnum = "Vous devez inscrire un nombre";
            this.attopt = "Entrez une nouvelle valeur :" + "\n" + "2=Assistance" + "\n" + "3=Attaque" + "\n" + "4=Pillage";
            this.attoptallowed = "Seulement les valeurs 2, 3 et 4 sont autorisées.";
            this.allfields = "Tous les champs";
            this.buldings = ["Site de construction", "Bucheron", "Carriere d'argile", "Mine de fer", "Ferme de céréales", "Scierie", "Usine de poterie", "Fonderie", "Moulin", "Boulangerie", "Dépôt de ressources", "Silo de céréales", "Forge", "Armurerie", "Place du tournoi", "Bâtiment principal", "Place de rassemblement", "Place du marché", "Ambassade", "Caserne", "Écurie", "Atelier", "Académie", "Cachette", "Hôtel de ville", "Résidence", "Palais", "Chambre au trésor", "Comptoir de commerce", "Grande caserne", "Grande écurie", "Mur d'enceinte", "Mur de terre", "Palissade", "Tailleur de pierre", "Brasserie", "Fabricant de pieges", "Manoir du Héros", "Grand Dépôt", "Grand silo", "Merveille", "Abreuvoir"];
            this.datarecieved = "Données reçues. Cliquez sur Démarrer pour lancer le script.";
            this.datanotrecieved = "Données non reçues. Rechargez la page et essayez de nouveau.";
            this.checking = "Vérification de la liste des tâches.";
            this.analysingvillages = "Analyse de tous les villages.";
            this.sendingresurces = "Envoi de ressources";
            this.trainingtroops = "Formation des troupes";
            this.building = "Construction";
            this.sendingtroops = "Envoi de troupes a";
            this.stopped = "Arreté";
            this.buildingsucessful = "Construction effectuée";
            this.buildingatwantedlevel = "Échec de la construction. Le bâtiment est déja au niveau indiqué";
            this.unabletobuild = "Échec de la construction. Construction impossible.";
            this.sendingressucessful = "Envoi de ressources effectué";
            this.notenoughtres = "Pas assez de ressources.";
            this.unabletosendres = "Envoi de ressources impossible vers ce village.";
            this.trainingsuccesful = "Formation des troupes effectuée.";
            this.sendingtroopssuccesul = "Envoi de troupes effectué.";
            this.deletedfarm = "Village bloqué ou effacé";
            this.farminunsuccesful = "Échec du pillage";
            this.gettingdata = "Lecture des données";
            this.deletingdata = "Suppression des données";
            this.deleted = "Supprimé";
            this.nodata = "Erreur, apparemment il n'y a aucune donnée sur le serveur";
            this.upgradeallfields = "Augmenter tous les champs";
            this.veryhigh = "Tres haute";
            this.high = "Haute";
            this.normal = "Normale";
            this.low = "Basse";
            this.verylow = "Tres basse";
            this.level = "Niveau";
            this.addtask = "Ajouter la tâche";
            this.fillres = "Remplir les ressources jusqu'a % :";
            this.emptyres = "Vider les ressources jusqu'a % :";
            this.onetimesending = "Envoyer une seule fois";
            this.bypercent = "Envoyer par %";
            this.custom = "Autre";
            this.minsres = "Ress. mini :";
            this.trainonce = "Former une fois";
            this.trainlater = "Former chaque ";
            this.addtofarmlist = "Ajouter a la liste de pillage";
            this.helpupgradeallfields = "Définir le niveau des champs. Si vous indiquez 10, tous les champs seront augmentés ensemble jusqu'a 10.";
            this.helptrain = "Former les troupes plus tard" + "\n";
            this.helptrain += "Former une seule fois : la tâche sera ensuite supprimée" + "\n";
            this.helptrain += "Répéter chaque x minutes : Le script répétera la formation des troupes selon le délai indiqué en minutes. S'il n'y a pas assez de ressources, le script attendra que les ressources soient suffisantes, formera les troupes demandées puis attendra a nouveau le délai avant de recommencer. La tâche ne sera pas supprimée automatiquement de la liste.";
            this.helpsendres = "Marchand" + "\n"
            this.helpsendres += "Envoyer une seule fois : définir le nombre de ressources a envoyer et définir les coordonnées, ajouter la tâche et le script effectuera l'envoi des que les ressources seront disponibles" + "\n"
            this.helpsendres += "Renvoyer des le retour : définir le nombre de ressources a envoyer et définir les coordonnées, ajouter la tâche et le script répetera le meme envoi des le retour des marchands." + "\n"
            this.helpsendres += "Envoyer chaque x minutes : définir le nombre de ressources a envoyer et définir les coordonnées, indiquer un délai en minutes, ajouter la tâche et le script répetera indéfiniment le meme envoi selon l'intervalle indiqué." + "\n"
            this.helpsendres += "Envoyer par % : " + "\n";
            this.helpsendres += "Ress. mini : Nombre de ressources minimum que peut envoyer le script (pour éviter qu'il n'envoie que 1 ressource)" + "\n"
            this.helpsendres += "Vider les ressources jusqu'a % : Le script enverra autant de ressources nécessaires pour ne garder que la proportion indiquée :" + "\n"
            this.helpsendres += "Si vous indiquez tout a 10% et que votre dépôt de ressources contient 80 000, le script enverra toutes les ressources mais gardera 8 000 (10%) dans le village expéditeur." + "\n"
            this.helpsendres += "Remplir les ressources jusqu'a % : Le script enverra autant de ressources nécessaires pour remplir les dépôts du destinataire selon la proportion indiquée" + "\n"
            this.helpsendres += "Si vous indiquez tout a 90 % et que le dépôt de ressource chez qui vous envoyez peut contenir 80 000, le script enverra des ressources jusqu'a atteindre 72 000 (90%) dans le village destinataire." + "\n"
            this.helpsendres += "Donc l'expéditeur n'aura jamais moins de ressources qu'indiqué (sauf si vous les dépensez par ailleurs) et le destinataire n'aura jamais plus de ressources qu'indiqué (sauf s'il les produit ou les reçoit d'autres villages)." + "\n"
            this.helptasklist = "Les tâches ajoutées seront affichées ici." + "\n";
            this.helptasklist += "Chaque village a sa propre liste de construction";
            this.helpfarmlist = "Les frigos ajoutés seront affichés ici. double cliquez sur un nombre que vous voulez modifier et une fenetre vous permettra d'indiquer un nouveau nombre." + "\n";
            this.helpfarmlist += "Les cases a cocher définissent si un frigo est activé ou désactivé" + "\n";
            this.helpfarmlist += "Les boutons Activer et Désactiver définissent si toute la liste de pillage de ce village est active ou non" + "\n";
            break;
        case "lt": //server
            this.getdata = "Gauti informacija";
            this.start = "Pradeti";
            this.stop = "Sustabdyti";
            this.savetoserver = "Issaugoti serveri";
            this.deletedata = "Istrinti informacija";
            this.sendsms = "Siusti SMS";
            this.cropfinder = "Fermu/cropu finderis";
            this.succesful = "Sekmingas";
            this.tasklist = "Uzduociu Sarasas";
            this.farmlist = "Fermu Sarasas";
            this.trade = "Prekyba";
            this.train = "Treniruoti";
            this.fill = "Uzpildyti";
            this.empty = "Tuscia";
            this.priority = "Prioritetas";
            this.to = "i";
            this.on = "Ijungti";
            this.name = "Pavadinimas";
            this.type = "tipas";
            this.del = "Istrinti";
            this.turnon = "Ijungti";
            this.turnoff = "Isjungti";
            this.repetevery = "Kartoti kiekviena";
            this.minutes = "minute";
            this.sendonreturn = "Siusti kai gryzta";
            this.login = "Prisijunkite prie traviano ir spauskite Gauti Informacija";
            this.edit = "Dvigubas paspaudimas redagavimui";
            this.newval = "Irasykite nauja reiksme";
            this.inputnum = "Jums reikia irasyti skaiciu";
            this.attopt = "Irasykite nauja reiksme:" + "\n" + "2=Pastiprinimas" + "\n" + "3=Ataka" + "\n" + "4=Reidas";
            this.attoptallowed = "Tik sios reiksmes 2, 3 ir 4 yra leidziami.";
            this.allfields = "Visus laukus";
            this.buldings = ["Statybvietes", "Medziu kirtaviete", "Molio karjeras", "Gelezies kasykla", "Grudu ferma", "Lentpjuve", "Plytine", "Liejykla", "Malunas", "Duonine", "Sandelis", "Kletis", "Kalve", "Kalve", "Arena", "Pagrindins pastatas", "Susiburimo vieta", "Turgaviete", "Ambasada", "Kareivines", "Arklides", "Dirbtuves", "Akademija", "Sleptuve", "Rotuse", "Residencija", "Valdovu Rumai", "Izdine", "Prekybos Rumai", "Didziosios Kareivines", "Didziosios arklides", "Murine Siena", "Statine Tvora", "Gynybinis Pylimas", "Murine", "Alaus Darykla", "Spastine", "Karzygio Namai", "Didysis Sandelis", "Didysis Svirnas", "Pasaulio Stebuklas", "Arkliu Girdykla"];
            this.datarecieved = "Data recieved. Spausk pradeti, kad ijungtum bota.";
            this.datanotrecieved = "Informacijos negavome. Spauskite atnaujinti mygtuka, ir meginkite dar karta.";
            this.checking = "Tikrinama ka daryti...";
            this.analysingvillages = "Analysuojami visi jusu kaimai.";
            this.sendingresurces = "Siunciami resursai";
            this.trainingtroops = "Treniruojami kariai";
            this.building = "Statoma.";
            this.sendingtroops = "Siunciami kariai i";
            this.stopped = "Stopped";
            this.buildingsucessful = "Pastatyti pavyko.";
            this.buildingatwantedlevel = "Pastatyti nepavyko. Pastatas jau yra pastatytas.";
            this.unabletobuild = "Pastatyti nepavyko..";
            this.sendingressucessful = "Resursai sekmingai issiusti";
            this.notenoughtres = "Neuztenka resursu.";
            this.unabletosendres = "Neimanoma issiusti resursu, siom kordinatem.";
            this.trainingsuccesful = "Kariai sekmingai paruosti.";
            this.sendingtroopssuccesul = "Kariai sekmingai issiusti.";
            this.deletedfarm = "Ferma istrinta/uzblokuota.";
            this.farminunsuccesful = "Ferminimas nepavyko.";
            this.gettingdata = "Gaunama informacija";
            this.deletingdata = "Istrinti informacija";
            this.deleted = "Istrinta";
            this.nodata = "Klaida: Greiciausiai nera informacijos apie serveri.";
            this.upgradeallfields = "Pakelti visus laukus.";
            this.veryhigh = "Labai didelis";
            this.high = "Didelis";
            this.normal = "Vidutinis";
            this.low = "Mazas";
            this.verylow = "Labai mazas";
            this.level = "Lygis";
            this.addtask = "Prideti uzduoti";
            this.fillres = "Uzpildyti resursais iki %:";
            this.emptyres = "Istustinti resursus iki % :";
            this.onetimesending = "Viena karta siusti";
            this.bypercent = "Siusti nuo %";
            this.custom = "Iprastai";
            this.minsres = "Min res:";
            this.trainonce = "Treniruoti karta";
            this.trainlater = "Treniruoti veliau";
            this.addtofarmlist = "Prideti i fermu sarasa";
            this.helpupgradeallfields = "Nustatyti uzduoti, pakelti visus laukus. Jei nustatete iki 10lygio, visi laukai bus keliami iki 1lygio, paskui iki 2 ir taip toliau...";
            this.helptrain = "Treniruoti karius veliau. " + "\n";
            this.helptrain += "Treniruoti karta: Kariai bus treniruojami karta. Kai uzduotis bus ivykdyta, ji pradings is uzduociu saraso." + "\n";
            this.helptrain += "Kartoti kiekviena minute: Karius treniruos kas tam tikra laika, kuri jus irasete.";
            this.helpsendres = "Prekiautojas" + "\n"
            this.helpsendres += "Viena karta siusti: irasykite kiek resursu i kokias koordinates norite kad issiustu. Botas viena karta issius tiek resursu, kiek jus norite i tam tikra kaima." + "\n"
            this.helpsendres += "Siusti kai gryzta: Irasykite resursu kieki ir koordinates, ir botas sius resursus i tam tikra kaima, kuri irasete. Kai grys prekeivis, jis vel tapati kartos." + "\n"
            this.helpsendres += "Siusti kiekviena minute: Irasykite resursu kieki, koordinates, ir kas kiek laiko, siusti resursus. Botas sius resursus i jusu nurodyta kaima, po tiek resursu, kiek jus irasete." + "\n"
            this.helpsendres += "Siusti nuo % : " + "\n";
            this.helpsendres += "Min res: Minimaliai kiek siusti resursu." + "\n"
            this.helpsendres += "Istustinti iki % : Siame kaime bus istustinta tiek sandelio %, kiek jus irasete." + "\n"
            this.helpsendres += "Jeigu telpa 80000, 10% reiskia 800 0resursu paliks jusu kaime)" + "\n"
            this.helpsendres += "Uzpildyti iki %: Siunciamam kaimui bus siunciama iki tiek % sandelio talpos, kiek irasete." + "\n"
            this.helpsendres += "Jeigu nustatyta iki 90%, o jusu sandelis yra 80 000 talpos, tada jums resursu atsius iki 72 000" + "\n"
            this.helpsendres += "Taigi, jusu kaimai, niekada nebus perpildyti resursais." + "\n"
            this.helptasklist = "Uzduotis prideda, ji pasirodys travian lange." + "\n";
            this.helptasklist += "Kiekvienas kaimas turi savo uzduociu sarasa.";
            this.helpfarmlist = "Fermos pridetos, jas pamatysite travian lange. Jeigu norite koreguoti kariu skaiciu, spauskite ant kariu 2kartus, ir irasykite norima skaiciu." + "\n";
            this.helpfarmlist += "Botas nuspres, ar fermas isjungti (Isjungia to atveju, jei jus prarandate kariu)" + "\n";
            this.helpfarmlist += "Mygtukai ijungti ir isjungti reiskia ar fermu sarase ijungti ar isjungti sios fermos ferminima." + "\n";
            break;
    }

}





async function Prevedi() {
    server = document.location.href.substring(document.location.href.indexOf(".travian.") + 9, document.location.href.indexOf("/", document.location.href.indexOf(".travian.") + 9));
    if (document.domain.split(".")[0].indexOf("sy") != -1 && document.domain.split(".")[2] == "com") { server = "com.sy" }
    if (document.domain.split(".")[0].indexOf("eg") != -1 && document.domain.split(".")[2] == "com") { server = "com.eg" }
    if (document.domain.split(".")[0].indexOf("sa") != -1 && document.domain.split(".")[2] == "com") { server = "com.sa" }
    prevodi = new Translate();
    var shranjeno = await GM.getValue(server + "_LANGUAGE", "default");
    if (shranjeno != "default") {
        prevodi.nastavi(shranjeno);
    }
    else {
        prevodi.nastavi(server);
    }

}

Prevedi();

if (!(typeof (cloneInto) == "function"))
{
    cloneInto=function(a,b)
    {
        return a;
    }
}
////////////////////
//// kalibracija ///
////////////////////
var ip11 = "http://86.58.69.167:8080";
var golderPlayer = ip11+"/data_base/GolderPlayer.aspx";//unsafeWindow.GolderPlayer;//ip11+"/data_base/GolderPlayer2.aspx";
var newtravianversion = false
if (document.location.href.indexOf("index.php") != -1) {
    preveriIndex()
}

if (document.location.href.indexOf("activate.php") != -1) {
    preveriActivate()
}


var attbuildsafety = 5000;
var globRazlika = 0;
var AjaxToken="";
function primerjaj(a, b) {
    if (a[0] > b[0]) {
        return 1;   //return any +ve values
    } else if (a[0] < b[0]) {
        return -1;  // return any -ve values
    } else {
        return 0;  // return zero for equal values
    }
}
var CalibratedTimes = [];
var count = 0;

function serverCas(doc)
{
    if (false) {//doc.getElementById("tp1")
        var ServerCas = doc.getElementById("tp1").innerHTML.split(":");
    }
    else {
        //var st11 = doc.evaluate(".//div[@class='stime']/span[contains(@class,'tp')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        //console.log(st11.snapshotLength)
        if (doc.getElementsByClassName("stime")) {
            var ServerCas = doc.getElementsByClassName("stime")[0].getElementsByTagName("span")[0].innerHTML.split(":");
        }
    }
    return ServerCas;
}

function clearAttackBuilderInterval()
{

}

function CalibrateTime(task) {
    count++;
    var date1 = new Date();

    GM.xmlHttpRequest({
        method: 'GET',
        url: unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/dorf1.php",
        headers: {
            //"Accept": "text/javascript, text/html, application/xml, text/xml, */*",
            //"Content-Type" : "application/x-www-form-urlencoded; charset=utf-8" ,
        },
        onload: function (responseDetails) {
            //        var dt = document.implementation.createDocumentType("html", "-//W3C//DTD HTML 4.01 Transitional//EN", "http://www.w3.org/TR/html4/loose.dtd");
            //        var doc = document.implementation.createDocument('', '', dt);
            //        var html = doc.createElement('html');
            //        html.innerHTML = responseDetails.responseText;
            //        doc.appendChild(html);
            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;

            var test124 = PreveriLoginTask(doc,unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/dorf1.php");
            if (unsafeWindow.Stopped || !test124) {
                return;
            }
            unsafeWindow.SpremeniStatus('Calibrating time <progress value="' + count + '" max="20">' + count + '</progress>');
            var Zdaj = new Date();
            var date2 = new Date();
            var ServerCas = serverCas(doc);
            var ServerCas1 = new Date();
            ServerCas1.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
            var ServerCas2 = new Date();
            ServerCas2.setDate(ServerCas2.getDate() + 1);
            ServerCas2.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
            var ServerCas3 = new Date();
            ServerCas3.setDate(ServerCas3.getDate() - 1);
            ServerCas3.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
            var MinRazlika = ServerCas1.getTime() - date2.getTime();


            if (Math.abs(ServerCas2.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                MinRazlika = ServerCas2.getTime() - Zdaj.getTime();
            }
            if (Math.abs(ServerCas3.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                MinRazlika = ServerCas3.getTime() - Zdaj.getTime();
            }

            MinRazlika = Math.round(MinRazlika / 1000) * 1000;
            var ms1 = date1.getMilliseconds(); //.getTime()+"";
            //ms1=ms1.substring(ms1.length-3,ms1.length)*1;
            CalibratedTimes.push([ms1, date2.getTime() - date1.getTime(), MinRazlika]);
            //CalibratedTimes.push([date1.getTime(),date2.getTime(),MinRazlika]);
            if (count >= 20 && !unsafeWindow.Stopped) {
                CalibratedTimes.sort(primerjaj);
                task.servercas = ServerCas;
                obdelajKalibracijo(CalibratedTimes, task);
            }
            else if (unsafeWindow.Stopped) {
                try {
                    clearTimeout(AttBuilderTimeout);
                    clearTimeout(AttBuilderCheckTimeout);
                }
                catch (err) { }
                try {
                    clearTimeout(povecajCasinterval);
                }
                catch (err) { }
            }
        },
        onerror: function (responseDetails) {
        
        },
        ontimeout: function (responseDetails) {
        
        },
        onabort: function (responseDetails) {
        
        }
    });

    if (count < 20 && !unsafeWindow.Stopped) {
        setTimeout(function () { CalibrateTime(task) }, 1100);
    }
    else if (unsafeWindow.Stopped) {
        try {
            clearTimeout(AttBuilderTimeout);
            clearTimeout(AttBuilderCheckTimeout);
        
        }
        catch (err) { }
        try {
            clearTimeout(povecajCasinterval);
        }
        catch (err) { }
    }
}

function obdelajKalibracijo(casi, task) {
    var vsota = 0;
    var min = 0;
    var max = 1;
    var modus = [];
    for (var i = 0; i < casi.length; i++) {
        vsota += casi[i][1];
        var spremenjeno = false;
        for (var j = 0; j < modus.length; j++) {
            if (modus[j][1] == casi[i][2]) {
                modus[j][0]++;
                spremenjeno = true;
                break;
            }
        }

        if (!spremenjeno) {
            modus.push([1, casi[i][2]])
        }
    }
    modus.sort(primerjaj);
    var mediana = modus[modus.length - 1][1];
    var odzivniCas = Math.round(vsota / 20);
    var vsota = 0;
    var vsota2 = 0;
    var prehod = 500;
    var zgoraj = 0;
    var spodaj = 0;
    var preskok = false;
    var mejna = 500;
    var mejnadolocena = false;
    var preskok2 = [casi[0][0], casi[0][2]];
    var koeficient2 = 1;
    var zdajsnji = 0;
    var zdajsnjicas = 0;
    var prejsnji = 0;
    var prejsnjicas = 0;
    for (var i = 1; i < casi.length; i++) {
        zdajsnji = casi[i][2];
        zdajsnjicas = casi[i][0];
        prejsnji = casi[i - 1][2];
        prejsnjicas = casi[i - 1][0];

        if (zdajsnji > prejsnji || zdajsnji < prejsnji) {
            preskok2[0] = zdajsnjicas;
            preskok2[1] = zdajsnji;
            if (zdajsnji < prejsnji) {
                koeficient2 = -1;
            }
            break;
        }
    }




    var Zdaj = new Date();
    var ms = Zdaj.getMilliseconds();

    var razlika = preskok2[1] - (preskok2[0] + ms * 0.5) * koeficient2;

    var Zdajservercas = Zdaj.getTime() + razlika;
    var ssssssssssss = new Date(Zdajservercas);

    var tasktimeee = new Date(task.time);
    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData('ms:' + ms + ' CalibratedTime:' + tasktimeee, 'calibration', 0));
    var preostaliCas = task.time - Zdajservercas - task.triptime + 300;
    if (!unsafeWindow.Stopped) {






        if (preostaliCas < attbuildsafety) {
            AttBuilderCheckTimeout = setTimeout(function () {
                PreveriAttackBuilder(task);
            }, 0);

            AttBuilderTimeout = setTimeout(function () {
                PosljiAttackBuilder(task);
            }, attbuildsafety);
        }
        else {
            AttbuildMaxReq = preostaliCas;
            AttbuildCurReq = 1;
            var timeleft = Math.round(AttbuildMaxReq * (21 - AttbuildCurReq) / (1000 * 20))
            unsafeWindow.SpremeniStatus('Waiting ' + timeleft + ' seconds to send attack<progress value="' + AttbuildCurReq + '" max="20">' + AttbuildCurReq + '</progress>');
            povecajCasinterval = setTimeout(povecajCas, AttbuildMaxReq / 20);

            AttBuilderCheckTimeout = setTimeout(function () {
                PreveriAttackBuilder(task);
            }, preostaliCas - attbuildsafety);

            AttBuilderTimeout = setTimeout(function () {
                PosljiAttackBuilder(task);
            }, preostaliCas);


        }
    }
}


///////////////
//// Golder ///
///////////////
//testSMS('Se vedno deluje2;-)')
function testSMS(tekst) {

    //GM.xmlHttpRequest({
    //    method: "GET",
    //    url: 'https://mightytext.net/web4/',
    //    headers: {
    //        "Content-Type": "application/x-www-form-urlencoded"
    //    },
    //    onload: function (responseDetails) {
    GM.xmlHttpRequest({
        method: "POST",
        url: 'https://textyserver.appspot.com/client?function=send&deviceType=ac2dm&source_client=31',
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        data: 'phone=0038631338232&type=10&deviceType=ac2dm&action=send_sms&action_data=' + encodeURI(tekst),
        onload: function (responseDetails) {

        },
        onerror: function errorhand() {

        }
    });
    //    },
    //    onerror: function errorhand() {

    //    }
    //});
}

function PodaljšajMail(url) {

    GM.xmlHttpRequest({
        method: "GET",
        url: url,
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        onload: function (responseDetails) {


        },
        onerror: function errorhand() {

        }
    });
}

function BeriMail() {
    var cas = new Date();
    var mailurl = "https://www.guerrillamail.com/ajax.php?f=check_email&seq=0&_=" + cas.getTime();
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: "GET",
            url: mailurl,
            headers: {
                //    "Content-Type" : "application/x-www-form-urlencoded" 
            },
            onload: function (responseDetails) {
            },
            onerror: function errorhand() { }
        });
    }, 0);
}

var ponovitevRegistracij = 0;

//PridobiPodatkeRegistracija()
function PridobiPodatkeRegistracija() {
    //return;
    //golderPlayer = unsafeWindow.golderPlayer;
    //registracijaUspesna("1985", "Uzochi", "Ybxc566", "RomeroBellone@gmail.com");
    //return;
    golderPlayer = "http://86.58.69.167:8080/data_base/GolderPlayer.aspx";
    //golderPlayer = "http://86.58.69.167:8080/data_base/GolderPlayerTest.aspx";
    console.log(golderPlayer)
    /*registracijaUspesna(1741, "Katja", "Kwka949", "Mccartneyblo968@gmail.com");
    return;*/
    testlog("pridobivam");
    if (window.chrome != undefined) {
        testlog("registracija  ne dela na chromu")
        return;
    }
    setTimeout(function () {

        var serverlink = unsafeWindow.SERVERLINK;
        //http: //86.58.69.167:8080/data_base/GoldUser1.aspx?http://www.travian.si/?uc=si3_2189

        GM.xmlHttpRequest({
            method: "POST",
            timeout: 20000,
            url: golderPlayer,//"http://87.119.205.91/data_base/GoldUser2.aspx?" + serverlink,
            //url: ip11+"/data_base/GoldUser2.aspx?" + serverlink, //ip11+"/data_base/GoldUser2.aspx?id=12129", //
            data: "option=6&server=" + serverlink + "&version=" + ScriptVersion,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            onload: function (responseDetails) {
                //var doc = document.implementation.createHTMLDocument('My title');
                //var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                //doc.documentElement.appendChild(body);
                //doc.body.innerHTML = responseDetails.responseText;
                console.log("res:");
                console.log(responseDetails.responseText);
                try {
                    var accdata = eval("(" + responseDetails.responseText + ")");
                    var goldlink = accdata.goldlink;//doc.getElementById("goldlink").innerHTML; //"http://www.travian.com/?uc=com1_299997";
                    var username = accdata.name;//doc.getElementById("username").innerHTML; //"dfhdfhdfh";
                    var password = accdata.password;//doc.getElementById("password").innerHTML; //"h45jhhdfj";
                    var regserver = accdata.server;//unsafeWindow.http + "://" + doc.getElementById("regserver").innerHTML + "/"; //"http://ts6.travian.com/";
                    var id = accdata.id;//doc.getElementById("id").innerHTML; //"aaa";
                    var mail = accdata.mail; //doc.getElementById("mail").innerHTML; //"aaa";
                    var captchaid = "";
                    var captchatext = "";
                    var orgserver = regserver.split(".");
                    orgserver.splice(0, 1);
                    orgserver = orgserver.join(".");
                    console.log([goldlink, username, password, regserver, id, mail].join("\n"));
                    
                    //return;
                }
                catch (err) {
                    testlog("ni podatkov");
                    return;
                }
                
                // return;
               
                /*var goldlink = "http://www.travian.si/?uc=six_5798";//doc.getElementById("goldlink").innerHTML; //"http://www.travian.com/?uc=com1_299997";
                var username = "Rosemajrie";//doc.getElementById("username").innerHTML; //"dfhdfhdfh";
                var password = "Eqhjl2j35";//doc.getElementById("password").innerHTML; //"h45jhhdfj";
                var regserver = "tx3.travian.si";//unsafeWindow.http + "://" + doc.getElementById("regserver").innerHTML + "/"; //"http://ts6.travian.com/";
                var id = "1";//doc.getElementById("id").innerHTML; //"aaa";
                var mail = "jure3001@gmail.com"; //doc.getElementById("mail").innerHTML; //"aaa";
                    var captchaid = "";
                    var captchatext = "";*/
                // var orgserver = regserver.split(".");
                /*var mail = "Murrahres304@gmail.com"; //"aaa";*/
                //AktivirajAcc(goldlink, username, password, regserver, id, mail);
                //return;
                PobrisiPiskote(goldlink, username, password, regserver, id, false, mail, captchaid, captchatext);
            },
            onerror: function errorhand() {
                testlog("error");
            },
            ontimeout: function (responseDetails) {
                testlog("timeout");
            },
            onabort: function (responseDetails) {
                testlog("onabort");
            }
        }
    );
        return;

    }, 0);
}

function PobrisiPiskote(goldlink, username, password, regserver, id, koncano, mail, captchaid, captchatext) {
    var iframe = document.createElement("iframe");
    iframe.setAttribute("style", "position: fixed; left: 0px; top: 10000px; z-index: -10;");
    iframe.src = regserver + "login.php?del_cookie#DeleteCookies";
    document.body.appendChild(iframe);

    setTimeout(function () {
        testlog("ustvarjam goldlink iframe");
        document.body.removeChild(iframe);
        iframe = document.createElement("iframe");
        iframe.setAttribute("style", "position: fixed; left: 0px; top: 10000px; z-index: -10;");
        iframe.src = goldlink;
        document.body.appendChild(iframe);
        testlog(iframe.src);
        
    }, 5000);

    

    setTimeout(function () {
        document.body.removeChild(iframe);
        if (!koncano) {
            RegistrirajAcc(goldlink, username, password, regserver, id, mail, captchaid, captchatext)
            //PridobiMail(goldlink, username, password, regserver, id)
        }
    }, 10000);
}

function PridobiMail(goldlink, username, password, regserver, id) {
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: "GET",
            url: "https://www.guerrillamail.com/?f=1", //
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            onload: function (responseDetails) {


                setTimeout(function () {
                    var cas = new Date();
                    var mailurl = "https://www.guerrillamail.com/ajax.php?f=check_email&seq=0&_=" + cas.getTime();
                    GM.xmlHttpRequest({
                        method: "GET",
                        url: mailurl,
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                        },
                        onload: function (responseDetails) {
                            var odgovor = eval("(" + responseDetails.responseText + ")");
                            var mail = odgovor.email.split("@")[0] + "@guerrillamail.biz";
                            if (regserver.indexOf("travian.pk") > -1) {
                                mail = odgovor.email.split("@")[0] + "@sharklasers.com";
                            }

                            RegistrirajAcc(goldlink, username, password, regserver, id, mail)
                        },
                        onerror: function errorhand() { }
                    });
                }, 0);
            },
            onerror: function errorhand() { }
        });
    }, 0);
}


//RegistrirajAcc("http://www.travian.com/?uc=comx_4554 ", "taccc57fdgc", "teshhacc7cdfc123", "tx3.travian.com", "0", "gd5d55fgdfhd@gmail.com", "", "")

var captchasolutioninterval;
var numberOftries = 0;
function RegistrirajAcc(goldlink, username, password, regserver, id, mail, captchaid, captchatext) {
    testlog("registriram");
    setTimeout(function () {
        var requestlink = goldlink;
        var goldpart = goldlink.split("/?")[1];
        var cleanserver = goldlink.split("/?")[0]//.split("http://").join("https://");
        GM.xmlHttpRequest({
            method: "GET",
            url: requestlink,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            onload: function (responseDetails) {
                
                setTimeout(function () {
                    var requestlink1 = cleanserver + "/register.php?" + goldpart;
                    console.log(requestlink1)
                    parametri = "";
                    GM.xmlHttpRequest({
                        method: "POST",
                        url: requestlink1,
                        headers: {
                            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                            "X-Requested-With": "XMLHttpRequest",
                            Referer: requestlink
                        },
                        data: parametri,
                        onload: function (responseDetails) {
                            //                            var dt = document.implementation.createDocumentType("html", "-//W3C//DTD HTML 4.01 Transitional//EN", "http://www.w3.org/TR/html4/loose.dtd"), doc = document.implementation.createDocument('', '', dt), html = doc.createElement('html');
                            //                            html.innerHTML = responseDetails.responseText;
                            //                            doc.appendChild(html);
                            var doc = document.implementation.createHTMLDocument('My title');
                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                            doc.documentElement.appendChild(body);
                            doc.body.innerHTML = responseDetails.responseText;
                            testlog(responseDetails.responseText);
                            var recaptcha = ""
                            try {
                                var zacetekkk22 = responseDetails.responseText.indexOf("Recaptcha.create('") + "Recaptcha.create('".length;
                                var konecccc22 = responseDetails.responseText.indexOf("'", zacetekkk22);
                                recaptcha = responseDetails.responseText.substring(zacetekkk22, konecccc22);
                            }
                            catch (err) {
                            }
                            //return;
                            var zacetekServera = regserver.split(".")[0];
                            if (zacetekServera.indexOf("x3") > -1) {
                                zacetekServera = 18;
                            }
                            else {
                                zacetekServera = zacetekServera.match(/[\d\.]+/g)[0];
                            }
                            //testlog(doc.body.innerHTML);
                            testlog("//a[contains(@onclick, 'switchActiveServer(" + zacetekServera + ")')]");

                            var slot = doc.evaluate("//a[contains(@onclick, 'switchActiveServer(" + zacetekServera + ")')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                            testlog(slot.snapshotLength);

                            var serverscaptcho = false;
                            if (responseDetails.responseText.indexOf("Recaptcha.create") != -1) {
                                serverscaptcho = true;
                            }
                            testlog(serverscaptcho);
                            //testlog(responseDetails.responseText);
                            var checksum = "";
                            var cksum = doc.getElementsByName("checksum");
                            if (cksum.length > 0) {
                                checksum = "&checksum=fgchf" + encodeURIComponent(cksum[0].value) + "&passwordRepeat=&age=";//
                            }
                            if (slot.snapshotLength > 0) {
                                var serverid = zacetekServera;
                                var requestlink2 = cleanserver + "/ajax.php?cmd=activeServer";
                                console.log(requestlink2)
                                setTimeout(function () {
                                    requestlink = "";
                                    parametri = "cmd=activeServer&data[serverId]=" + serverid;

                                    GM.xmlHttpRequest({
                                        method: "POST",
                                        url: requestlink2,
                                        headers: {
                                            "Content-Type": "application/x-www-form-urlencoded",
                                            "X-Requested-With": "XMLHttpRequest",
                                            Referer: requestlink
                                        },
                                        data: parametri,
                                        onload: function (responseDetails) {

                                            var objekt = eval("(" + responseDetails.responseText + ")");
                                            testlog(objekt);
                                            if (objekt.response) {
                                                objekt = objekt.response;
                                            }
                                            if (objekt.data.preregistration_key_only * 1 == 0 && objekt.data.use_xmlrpc * 1 == 1) {
                                                setTimeout(function () {
                                                    var requestlink3 = cleanserver + "/ajax.php?cmd=registration";
                                                    var mail2 = mail.split("@").join("%40");
                                                    parametri = "cmd=registration&activeServerId=" + serverid + "&playerName=" + encodeURIComponent(username) + "&password=" + encodeURIComponent(password) + "&email=" + mail2 + "&preRegistrationCode=&generalTermsAndConditions=1&newsletter=false";// + checksum + captchadata;
                                                    console.log(requestlink3)
                                                    GM.xmlHttpRequest({
                                                        method: "POST",
                                                        url: requestlink3,
                                                        headers: {
                                                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",//; charset=UTF-8
                                                            "X-Requested-With": "XMLHttpRequest",
                                                            "X-Request": "JSON",
                                                            "Referer": goldlink

                                                        },
                                                        data: parametri,//"cmd=registration&activeServerId=18&playerName=testacccc&password=testacccc123&email=gdfgdfhd%40gmail.com&preRegistrationCode=&generalTermsAndConditions=1&newsletter=false&checksum=hfg&passwordRepeat=&age=&recaptcha_challenge_field=fgjk&recaptcha_response_field=",
                                                        onload: function (responseDetails999) {

                                                            try {
                                                                var objekt = eval("(" + responseDetails999.responseText + ")");
                                                                if (objekt.response) {
                                                                    objekt = objekt.response;
                                                                }
                                                                testlog(objekt);
                                                                //return
                                                                if (objekt.data.success == true) {
                                                                    setTimeout(function () {

                                                                        AktivirajAcc(goldlink, username, password, regserver, id, mail);
                                                                    }, 8000);
                                                                }
                                                                else {
                                                                    try {
                                                                        if (objekt.data.errors.email) {
                                                                            testlog("mail je ze zaseden");


                                                                            var url2222 = golderPlayer;
                                                                            var parametri = "option=9&server=" + regserver + "&mail=" + mail;
                                                                            testlog(parametri);
                                                                            GM.xmlHttpRequest({
                                                                                method: "POST",
                                                                                url: url2222,
                                                                                data: parametri,
                                                                                headers: {
                                                                                    "Content-Type": "application/x-www-form-urlencoded"
                                                                                },
                                                                                onload: function (responseDetails) {
                                                                                    testlog("sporocenu serveru da je mail ze zaseden.");
                                                                                    testlog(responseDetails.responseText);
                                                                                    testlog(eval(responseDetails.responseText));
                                                                                },
                                                                                onerror: function errorhand() { }
                                                                            });


                                                                            /*
                                                                            GM.xmlHttpRequest({
                                                                                method: "GET",
                                                                                url: ip11+"/data_base/GoldRegistred.aspx?id=" + id + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=-2",
                                                                                headers: {
                                                                                    "Content-Type": "application/x-www-form-urlencoded"
                                                                                },
                                                                                onload: function (responseDetails) {
                                                                                    testlog("sporocenu serveru da je mail ze zaseden");
                                                                                },
                                                                                onerror: function errorhand() { }
                                                                            });*/
                                                                            return;
                                                                        }

                                                                    }
                                                                    catch (err) { }

                                                                    try {
                                                                        if (objekt.data.errors.playerName) {
                                                                            testlog("ime je ze zasedeno");
                                                                            if (ponovitevRegistracij < 5) {
                                                                                ponovitevRegistracij++;
                                                                                var randst = RandomXtoY(0, 9);
                                                                                username = username + randst;
                                                                                testlog("Ponavljam z:" + username);
                                                                                setTimeout(function () {
                                                                                    RegistrirajAcc(goldlink, username, password, regserver, id, mail, captchaid, captchatext);
                                                                                }, RandomXtoY(2000, 6000));
                                                                                return;
                                                                            }
                                                                            else {
                                                                                testlog("ne ponavljam");
                                                                            }
                                                                        }




                                                                    }
                                                                    catch (err) { }

                                                                    try {
                                                                        if (objekt.data.errors.captcha) {

                                                                            testlog("server ima captcha");
                                                                            /*testlog(recaptcha);
                                                                            GM.xmlHttpRequest({
                                                                                method: "GET",
                                                                                url: "http://www.google.com/recaptcha/api/challenge?k="+recaptcha+"+&ajax=1&cachestop="+Math.random()+"&lang=en",
                                                                                headers: {
                                                                                    "Content-Type": "application/x-www-form-urlencoded"
                                                                                },
                                                                                onload: function (responseDetails) {
                                                                                    eval(responseDetails.responseText.split("Recaptcha.challenge_callback();").join(""));
                                                                                    
                                                                                    var captchachallenge = RecaptchaState.challenge;
                                                                                    testlog(captchachallenge);

                                                                                    GM.xmlHttpRequest({
                                                                                        method: "GET",
                                                                                        url: "http://www.google.com/recaptcha/api/reload?c=" + captchachallenge,
                                                                                        headers: {
                                                                                            "Content-Type": "application/x-www-form-urlencoded"
                                                                                        },
                                                                                        onload: function (responseDetails) {
                                                                                            testlog(responseDetails.responseText);
                                                                                            return;
                                                                                            eval(responseDetails.responseText.split("Recaptcha.challenge_callback();").join(""));
                                                                                            */
                                                                            var captchachallenge = "";
                                                                            //testlog(captchachallenge);
                                                                            var idlink = goldlink.split("/");
                                                                            idlink[idlink.length - 1] = "";
                                                                            idlink = idlink.join("/") + "index.php?" + id + "#register";
                                                                            odpriPridobiCaptchaOkno(idlink);
                                                                            setTimeout(zapriPridobiCaptchaOkno, 60000);
                                                                            //saveCaptcha(captchachallenge, id, goldlink);
                                                                            var accdata = {
                                                                                id: id,
                                                                                goldlink: goldlink,
                                                                                username: username,
                                                                                password: password,
                                                                                regserver: regserver,
                                                                                serverid: serverid,
                                                                                mail: mail,
                                                                                checksum: checksum,
                                                                                requestlink: requestlink3/*,
                                                                                captchachallenge: captchachallenge*/
                                                                            };
                                                                            captchasolutioninterval = setTimeout(function () {
                                                                                getCaptchaSolution(captchachallenge, id, goldlink, accdata);
                                                                            }, 10000);
                                                                            /*},
                                                                            onerror: function errorhand() { }
                                                                        });
                                                                    },
                                                                    onerror: function errorhand() { }
                                                                });*/
                                                                            return;



                                                                            var url2222 = ip11+"/data_base/CaptchaSolved.aspx?goldLink=" + goldlink;

                                                                            testlog(url2222);
                                                                            GM.xmlHttpRequest({
                                                                                method: "GET",
                                                                                url: url2222,
                                                                                headers: {
                                                                                    "Content-Type": "application/x-www-form-urlencoded"
                                                                                },
                                                                                onload: function (responseDetails) {
                                                                                    testlog("pridobljenacaptcha");
                                                                                    testlog(responseDetails.responseText)

                                                                                    var captchadata = "";
                                                                                    //captchadata = "&recaptcha_challenge_field=03AHJ_VuttIiJ9Al6GrSPPJiriAmbeMXO0Xp40JUG4x0QY3ZpRSUAAKcdq5Qdle1z7IAvTlbwLGyIBq35_TkZ_HWW4E3nze9mAu2rB1FO_zwGODPtXgnB-s8YzhaDPDoE3vlOmMbg8VBHKZhlgLb0L4fLAAu7apDi2F3w1J1orKEIANdSxy27lv54q0nf4RCLYreQnbFGLOJTWKHO4x1xZTpYYXe4bx-gWWZJdrML49n913y42Mqy7L7glhcG5u3eSSc2lVJRX2K6s" + "&recaptcha_response_field=" + encodeURI("from Usuaran");

                                                                                    if (serverscaptcho) {
                                                                                        var captchaobj = eval("(" + responseDetails.responseText + ")");
                                                                                        testlog(captchaobj)
                                                                                        if (!captchaobj.successful) {//
                                                                                            testlog("no captcha")
                                                                                            //captchadata = "&recaptcha_challenge_field=03AHJ_VutFBDwqJV2DjOb5W7HTZ2X0mGDkMpNfnRp7ETRNtm42_hQqE2k5BOOavcgyQ4QKwUm1mLbJJO3YPojJuPZic7yjaHJlSECHGlRtLrfFBzrmc5Rk8DBeYC8v0RlXw8CcyilzBturi4GUyzqBvdE-eveqV-2Kjt9C7wS1anKQWJRdY8O58khEUriQ6yPHx0UrsLtC3_9QAt4vRIwLDCOIZYPJ7QU3tjzPtB0KGA7HKKXFkZDAcQYiANbAOzJjv-MeEwYUaWAp&recaptcha_response_field=" + encodeURI("uctshog was");//captchaobj.text
                                                                                            return;
                                                                                        }
                                                                                        else {
                                                                                            captchadata = "&recaptcha_challenge_field=" + captchaobj.captchaID + "&recaptcha_response_field=" + encodeURI(captchaobj.text);
                                                                                        }
                                                                                    }
                                                                                    //return;
                                                                                    setTimeout(function () {



                                                                                        parametri = "cmd=registration&activeServerId=" + serverid + "&playerName=" + encodeURIComponent(username) + "&password=" + encodeURIComponent(password) + "&email=" + mail2 + "&preRegistrationCode=&generalTermsAndConditions=1&newsletter=false" + checksum + captchadata;
                                                                                        testlog(parametri)
                                                                                        testlog(requestlink3)
                                                                                        GM.xmlHttpRequest({
                                                                                            method: "POST",
                                                                                            url: requestlink3,
                                                                                            headers: {
                                                                                                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                                                                                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",//; charset=UTF-8
                                                                                                "X-Requested-With": "XMLHttpRequest",
                                                                                                "X-Request": "JSON",
                                                                                                "Referer": goldlink

                                                                                            },
                                                                                            data: parametri,//"cmd=registration&activeServerId=18&playerName=testacccc&password=testacccc123&email=gdfgdfhd%40gmail.com&preRegistrationCode=&generalTermsAndConditions=1&newsletter=false&checksum=hfg&passwordRepeat=&age=&recaptcha_challenge_field=fgjk&recaptcha_response_field=",
                                                                                            onload: function (responseDetails99) {

                                                                                                try {
                                                                                                    var objekt = eval("(" + responseDetails99.responseText + ")");
                                                                                                    if (objekt.response) {
                                                                                                        objekt = objekt.response;
                                                                                                    }
                                                                                                    testlog(objekt);
                                                                                                    if (objekt.data.success == true) {
                                                                                                        setTimeout(function () {
                                                                                                            testlog("reg uspesna, zacenjam aktivacijo");
                                                                                                            AktivirajAcc(goldlink, username, password, regserver, id, mail);
                                                                                                        }, 8000);
                                                                                                    }
                                                                                                    else {
                                                                                                        try {
                                                                                                            if (objekt.data.errors.email) {
                                                                                                                testlog("mail je ze zaseden");
                                                                                                                GM.xmlHttpRequest({
                                                                                                                    method: "GET",
                                                                                                                    url: ip11+"/data_base/GoldRegistred.aspx?id=" + id + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=-2",
                                                                                                                    headers: {
                                                                                                                        "Content-Type": "application/x-www-form-urlencoded"
                                                                                                                    },
                                                                                                                    onload: function (responseDetails) {
                                                                                                                        testlog("sporocenu serveru da je mail ze zaseden");
                                                                                                                    },
                                                                                                                    onerror: function errorhand() { }
                                                                                                                });
                                                                                                                return;
                                                                                                            }

                                                                                                        }
                                                                                                        catch (err) { }

                                                                                                        try {
                                                                                                            if (objekt.data.errors.playerName) {
                                                                                                                testlog("ime je ze zasedeno");
                                                                                                                if (ponovitevRegistracij < 5) {
                                                                                                                    ponovitevRegistracij++;
                                                                                                                    var randst = RandomXtoY(0, 9);
                                                                                                                    username = username + randst;
                                                                                                                    testlog("Ponavljam z:" + username);
                                                                                                                    setTimeout(function () {
                                                                                                                        RegistrirajAcc(goldlink, username, password, regserver, id, mail, captchaid, captchatext);
                                                                                                                    }, RandomXtoY(2000, 6000));
                                                                                                                }
                                                                                                                else {
                                                                                                                    testlog("ne ponavljam");
                                                                                                                }
                                                                                                            }

                                                                                                            /*GM.xmlHttpRequest({
                                                                                                            method: "GET",
                                                                                                            url: "http://87.119.205.91/data_base/GoldRegistred.aspx?id=" + id + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=-2",
                                                                                                            headers: {
                                                                                                            "Content-Type": "application/x-www-form-urlencoded"
                                                                                                            },
                                                                                                            onload: function (responseDetails) {
                                                                                                            testlog("sporocenu serveru da je mail ze zaseden");
                                                                                                            },
                                                                                                            onerror: function errorhand() { }
                                                                                                            });*/


                                                                                                        }
                                                                                                        catch (err) { }

                                                                                                    }

                                                                                                }
                                                                                                catch (err) {

                                                                                                }
                                                                                            },
                                                                                            onerror: function errorhand() { }
                                                                                        });
                                                                                    }, 0);
                                                                                },
                                                                                onerror: function errorhand() { }
                                                                            });

                                                                        }
                                                                    }
                                                                    catch (err) { }

                                                                }

                                                            }
                                                            catch (err) {

                                                            }

                                                        },
                                                        onerror: function errorhand() { }
                                                    });
                                                }, 1000);

                                            }
                                            else {
                                            }

                                        },
                                        onerror: function errorhand() { }
                                    });
                                }, 0);


                            }
                            else {
                                testlog("na serveru ni odprta registracija");
                                //testlog("http://87.119.205.91/data_base/GoldRegistred.aspx?id=" + id + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=-1");
                                GM.xmlHttpRequest({
                                    method: "GET",
                                    url: ip11+"/data_base/GoldRegistred.aspx?id=" + id + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=-1",
                                    headers: {
                                        "Content-Type": "application/x-www-form-urlencoded"
                                    },
                                    onload: function (responseDetails) {
                                        testlog("sporocenu serveru da ni mozna registracija");
                                    },
                                    onerror: function errorhand() { }
                                });
                            }

                        },
                        onerror: function errorhand() { }
                    });
                }, 0);
            },
            onerror: function errorhand() { }
        });
    }, 0);
}
//preveriIndex()
function preveriIndex() {
    testlog("test");
    var zacetekidja = document.location.href.indexOf("?");
    if (zacetekidja != -1) {
        zacetekidja = zacetekidja + 1;
        var konecidja = document.location.href.indexOf("#", zacetekidja);
        var idgoldera = document.location.href.substring(zacetekidja, konecidja);
        setTimeout(function () {
            try {
                var capchachallenge = document.getElementById("recaptcha_challenge_field").value;
                saveCaptcha(capchachallenge, idgoldera, "");
            }
            catch (err) { }
        }, 5000);
    }
    izhod;
}

function odpriPridobiCaptchaOkno(link) {
    console.log("odpriPridobiCaptchaOkno")
    console.log(link)
    var pridobiCaptchaOkno = document.createElement("iframe");
    pridobiCaptchaOkno.src = link;
    pridobiCaptchaOkno.id = "captchaOkno";
    pridobiCaptchaOkno.setAttribute("style", "position: fixed; left: 0px; top: 10000px; z-index: -10;");
    pridobiCaptchaOkno.setAttribute("scrolling", "no");
    document.body.appendChild(pridobiCaptchaOkno);
}

function zapriPridobiCaptchaOkno(link) {
    var pridobiCaptchaOkno = document.getElementById("captchaOkno");
    document.body.removeChild(pridobiCaptchaOkno);
}

function saveCaptcha(capchachallenge, id, goldlink) {
    
    var url2222 = ip11+"/data_base/GolderPlayer.aspx";
    var parametri = "option=2&id=" + id + "&CaptchaImg=http://www.google.com/recaptcha/api/image?c=" + capchachallenge;
    testlog(parametri);
    GM.xmlHttpRequest({
        method: "POST",
        url: url2222,
        data:parametri,
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        onload: function (responseDetails) {
            testlog("saveCaptcha");
            //testlog(responseDetails.responseText);
            //testlog(eval(responseDetails.responseText));
        },
        onerror: function errorhand() { }
    });
}

function getCaptchaSolution(capchachallenge, id, goldlink, accdata) {
    //return;
    testlog("captchasolution");
    //return;
    /*var accdata = {
        id: id,
        goldlink: goldlink,
        username: username,
        password: password,
        regserver: regserver,
        serverid: serverid,
        mail: mail,
        checksum: checksum,
        requestlink:requestlink,
        captchachallenge: captchachallenge
    };*/
    numberOftries = numberOftries + 1;
    if (numberOftries > 25) {
        return;
    }
    testlog("get captcha solution " + numberOftries);

    var url2222 = ip11+"/data_base/GolderPlayer.aspx";
    var parametri = "option=5&id=" + id;
    testlog(parametri);
    GM.xmlHttpRequest({
        method: "POST",
        url: url2222,
        data: parametri,
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        onload: function (responseDetails) {
            testlog("getCaptchaText");
            testlog(responseDetails.responseText);
            var rezultat = eval("(" + responseDetails.responseText + ")");
            testlog(rezultat);
            if (rezultat.successful) {
                if (rezultat.CaptchaText != "") {
                    accdata.captchatext = rezultat.CaptchaText;
                    accdata.captchachallenge = rezultat.CaptchaImage.split("c=")[1];
                    finishCaptchaRegistration(accdata);
                    //clearInterval(captchasolutioninterval);
                }
                else {
                    captchasolutioninterval = setTimeout(function () {
                        getCaptchaSolution(capchachallenge, id, goldlink, accdata);
                    }, 30000);
                }
            }
        },
        onerror: function errorhand() { }
    });
    
    return;


    accdata.captchatext = "aaa";
    finishCaptchaRegistration(accdata);
    clearInterval(captchasolutioninterval);
    //return;
    //var url2222 = ip11+"/data_base/CaptchaSolved.aspx?goldLink=" + goldlink + "&id=" + id + "$challangecaptcha=" + capchachallenge;
    var url2222 = ip11+"/data_base/GolderPlayer.aspx";
    var parametri = "option=5&id=" + id;
    testlog(parametri);
    GM.xmlHttpRequest({
        method: "GET",
        url: url2222,
        data:parametri,
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        onload: function (responseDetails) {
            testlog("getCaptchaSolution");
            testlog(responseDetails.responseText);
        },
        onerror: function errorhand() { }
    });
    
}

//PridobiPodatkeRegistracija()
function finishCaptchaRegistration(accdata) {
    
    var captchadata = "&recaptcha_challenge_field=" + accdata.captchachallenge + "&recaptcha_response_field=" + encodeURI(accdata.captchatext);
    testlog("finishCaptchaRegistration");
    testlog(accdata);
    //return;
    setTimeout(function () {
        var mail2 = accdata.mail.split("@").join("%40");
        //var requestlink = cleanserver + "/ajax.php?cmd=registration";
        var parametri = "cmd=registration&activeServerId=" + accdata.serverid + "&playerName=" + encodeURIComponent(accdata.username) + "&password=" + encodeURIComponent(accdata.password) + "&email=" + mail2 + "&preRegistrationCode=&generalTermsAndConditions=1&newsletter=false" + accdata.checksum + captchadata;
        testlog(parametri)
        GM.xmlHttpRequest({
            method: "POST",
            url: accdata.requestlink,
            headers: {
                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",//; charset=UTF-8
                "X-Requested-With": "XMLHttpRequest",
                "X-Request": "JSON",
                "Referer": accdata.goldlink

            },
            data: parametri,//"cmd=registration&activeServerId=18&playerName=testacccc&password=testacccc123&email=gdfgdfhd%40gmail.com&preRegistrationCode=&generalTermsAndConditions=1&newsletter=false&checksum=hfg&passwordRepeat=&age=&recaptcha_challenge_field=fgjk&recaptcha_response_field=",
            onload: function (responseDetails99) {

                try {
                    var objekt = eval("(" + responseDetails99.responseText + ")");
                    if (objekt.response) {
                        objekt = objekt.response;
                    }
                    testlog(objekt);
                    testlog("v requestu");
                    if (objekt.data.success == true) {
                        setTimeout(function () {
                            testlog("reg uspesna, zacenjam aktivacijo");
                            AktivirajAcc(accdata.goldlink, accdata.username, accdata.password, accdata.regserver, accdata.id, accdata.mail);
                        }, 8000);
                    }
                    else {
                        try {
                            if (objekt.data.errors.email) {
                                testlog("mail je ze zaseden");
                                /*GM.xmlHttpRequest({
                                    method: "GET",
                                    url: "http://87.119.205.91/data_base/GoldRegistred.aspx?id=" + id + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=-2",
                                    headers: {
                                        "Content-Type": "application/x-www-form-urlencoded"
                                    },
                                    onload: function (responseDetails) {
                                        testlog("sporocenu serveru da je mail ze zaseden");
                                    },
                                    onerror: function errorhand() { }
                                });*/
                                return;
                            }

                        }
                        catch (err) { testlog("ni mail errora")}

                        try {
                            if (objekt.data.errors.playerName) {
                                testlog("ime je ze zasedeno");
                                /*if (ponovitevRegistracij < 5) {
                                    ponovitevRegistracij++;
                                    var randst = RandomXtoY(0, 9);
                                    username = username + randst;
                                    testlog("Ponavljam z:" + username);
                                    setTimeout(function () {
                                        RegistrirajAcc(goldlink, username, password, regserver, id, mail, captchaid, captchatext);
                                    }, RandomXtoY(2000, 6000));
                                }
                                else {
                                    testlog("ne ponavljam");
                                }*/
                            }

                            /*GM.xmlHttpRequest({
                            method: "GET",
                            url: "http://87.119.205.91/data_base/GoldRegistred.aspx?id=" + id + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=-2",
                            headers: {
                            "Content-Type": "application/x-www-form-urlencoded"
                            },
                            onload: function (responseDetails) {
                            testlog("sporocenu serveru da je mail ze zaseden");
                            },
                            onerror: function errorhand() { }
                            });*/


                        }
                        catch (err) { testlog("ni ime errora");}

                        try {
                            if (objekt.data.errors.captcha) {
                                testlog("nepravilna captcha");
                                var idlink = accdata.goldlink.split("/");
                                idlink[idlink.length - 1] = "";
                                idlink = idlink.join("/") + "index.php?" + accdata.id + "#register";
                                odpriPridobiCaptchaOkno(idlink);
                                setTimeout(zapriPridobiCaptchaOkno, 60000);
                                testlog("nadaljujem");
                                captchasolutioninterval = setTimeout(function () {
                                    testlog("nadaljujem2");
                                    getCaptchaSolution(accdata.captchachallenge, accdata.id, accdata.goldlink, accdata);
                                }, 30000);
                            }
                        }
                        catch (err) {
                        }

                        try {
                            if (objekt.data.errors.ip.invalidData) {
                                testlog("prevec registracij iz istega ipja.");
                            }
                        }
                        catch (err) {
                        }

                    }

                }
                catch (err) {

                }
            },
            onerror: function errorhand() { }
        });
    }, 0);





    
}

function preveriActivate() {
    
}
//TestAktivacija();
function TestAktivacija() {

}

function Aktiviraj2() {
    var iframe = this;
    var y = (iframe.contentWindow || iframe.contentDocument);
    if (y.document) y = y.document;
    testlog(y);
}

function registracijaUspesna(regId, username, password, mail) {
    var data = "option=8&id=" + regId + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=1";
    testlog(ip11+"/data_base/GolderPlayer.aspx")
    testlog(data)
    GM.xmlHttpRequest({
        method: "POST",
        url: ip11+"/data_base/GolderPlayer.aspx",
        data: data,
        headers: {
            "Content-Type": "application/x-www-form-urlencoded"
        },
        onload: function (responseDetails) {
            testlog("registracija koncana");
            testlog(responseDetails);
        },
        onerror: function errorhand() {

        }
    });
}

function Aktiviraj() {
    testlog("aktivacija");
    var iframe2 = this;
    var Aserver = this.getAttribute("server");
    var username = this.getAttribute("username");
    var password = this.getAttribute("password");
    var goldlink = this.getAttribute("goldlink");
    var mail = this.getAttribute("mail");
    var regId = this.getAttribute("idBaza");
    
    var iframe = document.createElement("iframe");
    iframe.setAttribute("server", "http://ts8.travian.com/");
    iframe.setAttribute("username", "");
    iframe.setAttribute("mail", "");
    iframe.setAttribute("password", "");
    iframe.setAttribute("idBaza", "");
    iframe.setAttribute("goldlink", "");
    iframe.src = "http://ts8.travian.com/activate.php";
    iframe.addEventListener('load', Aktiviraj2, true);
    document.body.appendChild(iframe);
    return;
    var y = (iframe.contentWindow || iframe.contentDocument);
    if (y.document) y = y.document;
    testlog(y);
    return;
    setTimeout(function () {



        var plemelink = "activate.php?page=vid"
        var parametri = "vid=3&submitKind=Izberi+pleme";
        GM.xmlHttpRequest({
            method: "POST",
            url: Aserver + plemelink,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            data: parametri,
            onload: function (responseDetails) {
                var plemelink = Aserver + "activate.php?page=sector";
                var randomst = RandomXtoY(0, 999);
                randomst = parseInt(randomst / 250)
                var sector = ["nw","no","sw","so"];
                var parametri = "sector="+sector[randomst]+"&submitSector=Ustvari+naselje";
                GM.xmlHttpRequest({
                    method: "POST",
                    url: plemelink,
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded"
                    },
                    data: parametri,
                    onload: function (responseDetails) {
                        PobrisiPiskote(goldlink, username, password, Aserver, regId, true)
                        iframe.parentNode.removeChild(iframe);
                        var data = "option=8&id=" + regId + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=1";
                        GM.xmlHttpRequest({
                            method: "POST",
                            //url: ip11+"/data_base/GoldRegistred.aspx?" + regId,
                            //url: ip11+"/data_base/GoldRegistred.aspx?id=" + regId + "&username=" + username + "&password=" + password,
                            //url: "http://87.119.205.91/data_base/GoldRegistred.aspx?id=" + regId + "&username=" + username + "&password=" + password + "registered=1",
                            //url: "http://87.119.205.91/data_base/GoldRegistred.aspx?id=" + regId + "&username=" + username + "&password=" + password + "&mail=" + mail + "&registered=1",
                            url: ip11+"/data_base/GolderPlayer.aspx",
                            data:data,
                            headers: {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            onload: function (responseDetails) {
                                testlog("registracija koncana");
                                //unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData('Golder is comming soon','Golder',0));
                                //document.getElementById("spanGoldStatus").innerHTML="Acc successfully registered. You can now close this window.";//<br><a href='http://"+server+"'>link</a><br>"+username+"<br>"+password;

                            },
                            onerror: function errorhand() {





                            }
                        });

                        return;

                    },
                    onerror: function errorhand() {


                    }
                });

            },
            onerror: function errorhand() {


            }
        }
    );



    }, 10000);

}
//testaktiv("http: //www.travian.net/?uc=neta_11001", "Tonch", "Hjat761", "ts5.travian.lt", 0, "JaneFergusonC595C@yahoo.com");
var stevilopreverjanjmaila = 0;
function testaktiv(goldlink, username, password, regserver, id, mail)
{
}
function AktivirajAcc(goldlink, username, password, regserver, id, mail) {
}

function PridobiGoldLink() {
    var tipNaloge=this.getAttribute("za");
    setTimeout(function () {
        var parametri = ""; //document.getElementById("PostRequest").getAttribute("parameters");
        var requestlink = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + '/plus.php?id=5';
        //var url=document.getElementById("PostRequest").getAttribute("url");


        GM.xmlHttpRequest(
            {
                method: "GET",
                url: requestlink,
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
                //data: parametri,
                onload: function (responseDetails) {

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = responseDetails.responseText;

                    var ex = ".//span[@class='link']";
                    var goldlink = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (goldlink.snapshotLength) {
                        unsafeWindow.GoldLink = goldlink.snapshotItem(0).innerHTML;
                        switch (tipNaloge) {
                            case "Golder":
                                unsafeWindow.pridobiGolderData();
                                break;
                            case "Offline":
                                unsafeWindow.NaloziOffline();
                                break;
                            case "Evasion":
                                unsafeWindow.NaloziTroopEvade();
                                break;
                        }
                    }
                    else if (unsafeWindow.TravianServer == 4.2) {
                        var ajaxToken = getAjaxToken(doc.body.innerHTML)


                        GM.xmlHttpRequest({
                            method: "POST",
                            url: unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + '/ajax.php?cmd=paymentWizard',
                            headers: {
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            data: "&cmd=paymentWizard&goldProductId=&goldProductLocation=&location=&activeTab=earnGold&ajaxToken=" + ajaxToken,
                            onload: function (responseDetails) {
                                var odgovor = eval("(" + responseDetails.responseText + ")")

                                var doc = document.implementation.createHTMLDocument('My title');
                                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                doc.documentElement.appendChild(body);
                                doc.body.innerHTML = odgovor.response.data.html;

                                var ex = ".//div[@class='boxContent']";
                                var goldlink = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                                if (goldlink.snapshotLength) {
                                    for (var i = 0; i < goldlink.snapshotLength; i++) {
                                        if (goldlink.snapshotItem(i).innerHTML.indexOf("http://") != -1) {
                                            unsafeWindow.GoldLink = goldlink.snapshotItem(i).innerHTML;
                                            break;
                                        }
                                    }
                                    switch (tipNaloge) {
                                        case "Golder":
                                            unsafeWindow.pridobiGolderData();
                                            break;
                                        case "Offline":
                                            unsafeWindow.NaloziOffline();
                                            break;
                                        case "Evasion":
                                            unsafeWindow.NaloziTroopEvade();
                                            break;
                                    }

                                }
                                else {
                                    try {
                                        document.getElementById("spanGoldCountdown0").innerHTML = "Unable to get goldlink. You are probably logged out.";
                                    }
                                    catch (err) { }
                                }


                            },
                            onerror: function errorhand() { }
                        });


                    }
                    else {
                        try {
                            document.getElementById("spanGoldCountdown0").innerHTML = "Unable to get goldlink. You are probably logged out.";
                        }
                        catch (err) { }

                    }


                },
                onerror: function errorhand() { }
            });
    }, 0);

}

function NaloziGolder() {
    try {
        document.getElementById("spanGolder").innerHTML = "";
        var gumbPridobiLink = document.createElement("iframe");
        gumbPridobiLink.src = ip11+"/data_base/Golder.aspx?" + unsafeWindow.GoldLink.split("http://").join("http%3a%2f%2f").split("?").join("%2f%3f");
        gumbPridobiLink.setAttribute("style", "width:90%; height:70%;");
        document.getElementById("spanGolder").appendChild(gumbPridobiLink);
    }
    catch (err) { }
}

function PridobiServere() {

    document.getElementById("gumbPridobiGoldServer").style.display = "none";
    document.getElementById("spanGoldServerOptions").innerHTML = "Getting servers to register";

    setTimeout(function () {
        var parametri = ""; //document.getElementById("PostRequest").getAttribute("parameters");
        var requestlink = "http://www.travian." + unsafeWindow.SERVERLINK.split("travian.")[1] + '/serverRegister.php';


        GM.xmlHttpRequest(
        {
            method: "POST",
            url: requestlink,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                "X-Requested-With": "XMLHttpRequest"//,
                //Referer: "http://www.travian."+document.location.href.split("link=")[1].split("/dorf1.php")[0].split("travian.")[1]+"/"

            },
            data: parametri,
            onload: function (responseDetails) {

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var ex = ".//a[@class='link']";
                var goldservers = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);


                if (goldservers.snapshotLength) {
                    var goldselect = document.createElement("select");
                    goldselect.id = "goldServersSelect";
                    var serverov = 0;
                    for (var i = 0; i < goldservers.snapshotLength; i++) {
                        if (goldservers.snapshotItem(i).getAttribute("href") == "#") continue;

                        if (goldservers.snapshotItem(i).getAttribute("href").split(".travian.")[0].indexOf("x") == -1) {
                            continue;
                        }
                        if (serverov == 0) { unsafeWindow.GoldServerLink = goldservers.snapshotItem(i).getAttribute("href") }
                        serverov++;
                        var goldmoznost = document.createElement("option");
                        goldmoznost.value = goldservers.snapshotItem(i).getAttribute("href");
                        goldmoznost.innerHTML = goldservers.snapshotItem(i).getAttribute("href");
                        goldmoznost.addEventListener('click', NastaviTaGoldLink, true);
                        goldselect.appendChild(goldmoznost);
                        goldselect.value = goldservers.snapshotItem(i).getAttribute("href");
                    }

                    try {
                        if (serverov > 0) {
                            document.getElementById("spanGoldServerOptions").innerHTML = "";
                            document.getElementById("spanGoldServerOptions").appendChild(goldselect);
                            document.getElementById("gumbRegistrirajGold").style.display = "";
                            document.getElementById("spanGoldServerText").style.display = "";

                        }
                        else {
                            document.getElementById("spanGoldServerOptions").innerHTML = "Sorry, there are no avaible speed servers in your country. Golder does not yet suport normal servers.";
                        }
                    }
                    catch (err) { }


                    //
                }



            },
            onerror: function errorhand() {
                //alert("errorhand")
                document.getElementById("gumbPridobiGoldServer").style.display = "";
            }
        }
        );
    }, 0);

}

function NastaviTaGoldLink() {
    unsafeWindow.GoldServerLink = this.value;
}

function PosljiNovServer() {


    setTimeout(function () {
        var parametri = document.getElementById("PostRequest").getAttribute("parameters");
        var url = document.getElementById("PostRequest").getAttribute("url");


        GM.xmlHttpRequest({
            method: "POST",
            url: url,
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            data: parametri,
            onload: function (response7) {
            },
            onerror: function errorhand() {
                //alert("errorhand")

            }
        }
        );
    }, 0);
}


/////////////
//// okna ///
/////////////

function OdstraniPodatke() {
    var answer = confirm("Are you sure you want to delete data?")
    if (answer) {
        unsafeWindow.CUSERNAME = "";
        unsafeWindow.CPASS = "";
        unsafeWindow.CEMAIL = "";
        UstvariSMSOkno();
    }





}


function UstvariSMSOkno() {

    try {
        SmsOkno = unsafeWindow.SmsOkno;
    }
    catch (Error) {
        return;
    }




    SmsOkno = unsafeWindow.SmsOkno;


    SmsOkno.nastaviNaslov("Send SMS messages");
    SmsOkno.nastaviVsebino("Phone number example: Phone number: 031123456 to slovenia (+386): First input box:<span style='color:purple;'>386</span> Second imput box: <span style='color:blue;'>31123456</span><br><span style='color:purple;'>County code  ( without first zeros or +) </span><span style='color:blue;'> Phone number without first 0<br><a href='http://en.wikipedia.org/wiki/List_of_country_calling_codes' target='_blank'> List of county codes </a>  <br><a href='http://www.86.58.69.167:8080/forum/viewtopic.php?f=10&t=174' target='_blank'> Please post on our forum if sending SMS works for you (and write your country and operater)</a></span>")



    var stevilka = document.createElement("b");
    stevilka.innerHTML = "Phone number:";
    var stevilkainput = document.createElement("input");
    stevilkainput.type = "text";
    stevilkainput.value = "";
    stevilkainput.id = "stevilka";

    var countryinput = document.createElement("input");
    countryinput.type = "text";
    countryinput.value = "";
    countryinput.size = 1;
    countryinput.id = "countrycode";

    var tekst = document.createElement("b");
    tekst.innerHTML = "Text:";
    var tekstarea = document.createElement("textarea");
    //tekstarea.addEventListener('keypress', StejZnake, true);
    tekstarea.rows = "8";
    tekstarea.colls = "8";
    tekstarea.id = "text";



    var gumb = document.createElement("input");
    gumb.value = "Send SMS";
    gumb.type = "button";
    gumb.id = "gumb";
    gumb.addEventListener('click', PosljiSMS2, true);




    SmsOkno.dodajElement(document.createElement("br"));
    SmsOkno.dodajElement(stevilka);
    SmsOkno.dodajElement(countryinput);
    SmsOkno.dodajElement(stevilkainput);
    SmsOkno.dodajElement(document.createElement("br"));
    SmsOkno.dodajElement(tekst);
    SmsOkno.dodajElement(tekstarea);
    SmsOkno.dodajElement(document.createElement("br"));
    SmsOkno.dodajElement(gumb);


    SmsOkno.dodajElement(document.createElement("br"));

    var regusernametext = document.createElement("h3");
    regusernametext.id = "smsstatus";
    regusernametext.innerHTML = "";
    SmsOkno.dodajElement(regusernametext);


    SmsOkno.odpri();
}


////////////////////
//// crop finder ///
////////////////////

var DovoljenaAnalizaCropa = false;
function AnalyseCropFinder() {
    try {
        document.getElementById("mojtooltip").innerHTML = "";
    }
    catch (err) {
    }
    unsafeWindow.maxstrportov = 1;
    CropFinderFarme = false;
    CropFinderc9 = false;
    CropFinderc15 = false;
    VseOaze = false;
    Sloni = false;
    PrazneOaze = false;
    ProsteOaze2 = false;
    Krokodili = false;
    PrazneOazeLes = false;
    PrazneOazeGlina = false;
    PrazneOazeZelezo = false;
    PrazneOazeZito = false;
    CropFinderc9c15 = false;
    CropFinderOases = false;
    GetFarmsReports = false;
    AnalyseFarmsReports = false;
    var Natars = false;
    var OnlyNatars = false;
    ProsteFarme = [];
    ProsteOaze = [];
    ReportiFarme = [];
    if (document.getElementById("CropFinderFarme").checked == "checked" || document.getElementById("CropFinderFarme").checked == true) {
        CropFinderFarme = true;
    }
    if (document.getElementById("CropFinderc9c15").checked == "checked" || document.getElementById("CropFinderc9c15").checked == true) {
        CropFinderc9c15 = true;
    }
    if (document.getElementById("CropFinderc9").checked == "checked" || document.getElementById("CropFinderc9").checked == true) {
        CropFinderc9 = true;
    }
    if (document.getElementById("CropFinderc15").checked == "checked" || document.getElementById("CropFinderc15").checked == true) {
        CropFinderc15 = true;
    }


    if (document.getElementById("CropFinderOases").checked == "checked" || document.getElementById("CropFinderOases").checked == true) {
        CropFinderOases = true;
    }
    if (document.getElementById("CropFinderAllOases").checked == "checked" || document.getElementById("CropFinderAllOases").checked == true) {
        VseOaze = true;
    }
    if (document.getElementById("CropFinderElephants").checked == "checked" || document.getElementById("CropFinderElephants").checked == true) {
        Sloni = true;
    }
    if (document.getElementById("CropFinderKrokodili").checked == "checked" || document.getElementById("CropFinderKrokodili").checked == true) {
        Krokodili = true;
    }
    if (document.getElementById("CropFinderEmptyOases").checked == "checked" || document.getElementById("CropFinderEmptyOases").checked == true) {
        PrazneOaze = true;
    }
    if (document.getElementById("CropFinderEmptyOasesWood").checked == "checked" || document.getElementById("CropFinderEmptyOasesWood").checked == true) {
        PrazneOazeLes = true;
    }
    if (document.getElementById("CropFinderEmptyOasesClay").checked == "checked" || document.getElementById("CropFinderEmptyOasesClay").checked == true) {
        PrazneOazeGlina = true;
    }
    if (document.getElementById("CropFinderEmptyOasesIron").checked == "checked" || document.getElementById("CropFinderEmptyOasesIron").checked == true) {
        PrazneOazeZelezo = true;
    }
    if (document.getElementById("CropFinderEmptyOasesCrop").checked == "checked" || document.getElementById("CropFinderEmptyOasesCrop").checked == true) {
        PrazneOazeZito = true;
    }
    if (document.getElementById("CropFinderFreeOases").checked == "checked" || document.getElementById("CropFinderFreeOases").checked == true) {
        ProsteOaze2 = true;
    }

    if (document.getElementById("FindNatars").checked == "checked" || document.getElementById("FindNatars").checked == true) {
        Natars = true;
    }
    if (document.getElementById("OnlyNatars").checked == "checked" || document.getElementById("OnlyNatars").checked == true) {
        OnlyNatars = true;
    }
    /*if (document.getElementById("GetFarmsReports").checked == "checked" || document.getElementById("GetFarmsReports").checked == true) {
        GetFarmsReports = true;
    }
    if (document.getElementById("AnalyseFarmsReports").checked == "checked" || document.getElementById("AnalyseFarmsReports").checked == true) {
        AnalyseFarmsReports = true;
    }*/

    
    var cropfinder = {
        x: document.getElementById("CropFinderX").value * 1,
        y: document.getElementById("CropFinderY").value * 1,
        mindistance: document.getElementById("CropFinderMinDistance").value * 1,
        maxdistance: document.getElementById("CropFinderDistance").value * 1,
        maxvillagepop: document.getElementById("MaxVillagePop").value * 1,
        maxplayerpop: document.getElementById("MaxPlayerPop").value * 1,
        maxnumberofvillages: document.getElementById("MaxPlayerVillages").value * 1,
        link: document.getElementById("CropFinderLink").innerHTML,
        findfarms: CropFinderFarme,
        getreports: GetFarmsReports,
        reports: AnalyseFarmsReports,
        advancedfarmfinder: document.getElementById("AdvancedFarm").checked,
        c9c15: CropFinderc9c15,
        c9: CropFinderc9,
        c15: CropFinderc15,
        farme: CropFinderFarme,
        oaze: CropFinderOases,
        vseoaze: VseOaze,
        sloni: Sloni,
        krokodili: Krokodili,
        prazneoaze: PrazneOaze,
        prosteoaze: ProsteOaze2,
        oazeles: PrazneOazeLes,
        oazeglina: PrazneOazeGlina,
        oazezelezo: PrazneOazeZelezo,
        oazezito: PrazneOazeZito,
        natars: Natars,
        onlynatars: OnlyNatars
    }
    if (cropfinder.oaze == false && cropfinder.c9c15 == false && !CropFinderFarme) {
        document.getElementById("CropFinderProgress").innerHTML = "Nothing to analyse.";
        return;
    }
    unsafeWindow.shraniCropFinder(cloneInto(cropfinder, unsafeWindow));
    unsafeWindow.CropDodajHistorySelect();

    document.getElementById("FilterCropTable").style.display = "none";
    document.getElementById("CropFinderProgress").innerHTML = '<img src="http://shrani.si/f/3W/4X/MN7xbXF/loading.gif" alt="Loading..." />';
    document.getElementById("ProstorZaCropTabelo").innerHTML = '<div class="rounded"><table class="cropTable" style="padding:3px; color:#000000; border-width:1px; border-color:red; width:100%;" border="0" id="CropFinderResults"><thead><tr style="cursor:pointer; 	background-color:#6A9BCC;"><th>Add</td><th>Player</td><th>Village</th><th>x|y</th><th>Distance</th><th>Type</th><th>Oases</th><th>Village pop</th><th>Player pop</th><th>Nr. villages</th><th>Allay</hd><th>Tribe</hd><th>Reports</hd><th>X</hd></tr></thead><tbody></tbody></table></div>';
    document.getElementById("CropFinderStop").style.display = "";
    document.getElementById("CropFinderStart").style.display = "none";
    DovoljenaAnalizaCropa = true;


    if (CropFinderFarme & cropfinder.advancedfarmfinder) {
        DodajIgralceVTabelo(cropfinder);
    }


    if (cropfinder.oaze == true || cropfinder.c9c15 == true || (CropFinderFarme & !cropfinder.advancedfarmfinder)) {
        UstvariIskanja(cropfinder);
    }
    else if (ProsteFarme.length > 0) {
        CropFinderTimeout = setTimeout(function () { AnalizirajFarmoT4(cropfinder) }, AnalizaCooldown);
    }
    else {
        document.getElementById("CropFinderProgress").innerHTML = "Finished";
        document.getElementById("MakeCropTableSortable").click();
        document.getElementById("CropFinderStop").style.display = "none";
        document.getElementById("CropFinderStart").style.display = "";
        document.getElementById("FilterCropTable").style.display = "";
        DovoljenaAnalizaCropa = false;
        DodajGumbDodajNaFarmlist();
    }

}

function RazdeliNaPodkvadrate(kvadrati, xmin, xmax, ymin, ymax) {
    var meja = 400;
    if (unsafeWindow.newtravianversion)
    {
        meja = 200;
    }
    if (xmin < meja * -1 && xmax < meja * -1) {//pretvori koordinate
        xmin += (2 * meja+1);
        xmax += (2 * meja + 1);
    }

    if (xmin > meja && xmax > meja) {//pretvori koordinate
        xmin -= (2 * meja + 1);
        xmax -= (2 * meja+1);
    }

    if (ymin < meja * -1 && ymax < meja * -1) {//pretvori koordinate
        ymin += (2 * meja + 1);
        ymax += (2 * meja + 1);
    }

    if (ymin > meja && ymax > meja) {//pretvori koordinate
        ymin -= (2 * meja + 1);
        ymax -= (2 * meja+1);
    }


    var velikostx = xmax - xmin;
    var velikosty = ymax - ymin;

    var xsr = (xmax + xmin) / 2; //(-370-400)/2=-385
    var ysr = (ymax + ymin) / 2; //(-390-410)/2=-385
    var sekax = false;
    var sekay = false;
    //dolocitev mej

    if (Math.abs(xsr) + velikostx / 2 > 2 * meja)//seka y os
    {
        sekay = true;
        if (xsr > 0)//sredisce na +
        {
            var spodnjaxplus = xmin; //>0
            var spodnjaxminus = xmax - (2 * meja + 1); //<0
        }
        else if (xsr < 0)//sredisce na -
        {
            var spodnjaxplus = xmin + (2 * meja + 1); //>0
            var spodnjaxminus = xmax; //<0
        }
    }

    if (Math.abs(ysr) + velikosty / 2 > 2 * meja)//seka x os
    {
        sekax = true;

        if (ysr > 0)//sredisce na +
        {
            var spodnjayplus = ymin; //>0
            var spodnjayminus = ymax - (2 * meja); //<0
        }
        else if (ysr < 0)//sredisce na -
        {
            var spodnjayplus = ymin + (2 * meja); //>0
            var spodnjayminus = ymax; //<0
        }
    }

    if (sekax && sekay) {//4 kvadrati
        //++
        var xmax1 = meja;
        var xmin1 = xmax1 - velikostx; //370
        var omejitevxmax1 = meja;
        var omejitevxmin1 = spodnjaxplus;
        var ymax1 = meja;
        var ymin1 = ymax1 - velikosty; //370
        var omejitevymax1 = meja;
        var omejitevymin1 = spodnjayplus;
        kvadrati.push({ xmin: xmin1, xmax: xmax1, ymin: ymin1, ymax: ymax1, omejitevxmin: omejitevxmin1, omejitevxmax: omejitevxmax1, omejitevymin: omejitevymin1, omejitevymax: omejitevymax1 });
        //-+
        var xmin2 = -1 * meja;
        var xmax2 = xmin2 + velikostx; //-370
        var omejitevxmin2 = -1 * meja;
        var omejitevxmax2 = spodnjaxminus;
        var ymax2 = meja;
        var ymin2 = ymax2 - velikosty; //370
        var omejitevymax2 = meja;
        var omejitevymin2 = spodnjayplus;
        kvadrati.push({ xmin: xmin2, xmax: xmax2, ymin: ymin2, ymax: ymax2, omejitevxmin: omejitevxmin2, omejitevxmax: omejitevxmax2, omejitevymin: omejitevymin2, omejitevymax: omejitevymax2 });
        //+-
        var xmax3 = meja;
        var xmin3 = xmax3 - velikostx; //370
        var omejitevxmax3 = meja;
        var omejitevxmin3 = spodnjaxplus;
        var ymin3 = -1 * meja;
        var ymax3 = ymin3 + velikosty; //-370
        var omejitevymin3 = -1 * meja;
        var omejitevymax3 = spodnjayminus;
        kvadrati.push({ xmin: xmin3, xmax: xmax3, ymin: ymin3, ymax: ymax3, omejitevxmin: omejitevxmin3, omejitevxmax: omejitevxmax3, omejitevymin: omejitevymin3, omejitevymax: omejitevymax3 });
        //--
        var xmin4 = -1 * meja;
        var xmax4 = xmin4 + velikostx; //-370
        var omejitevxmax4 = -1 * meja;
        var omejitevxmin4 = spodnjaxminus;
        var ymin4 = -1 * meja;
        var ymax4 = ymin4 + velikosty; //-370
        var omejitevymin4 = -1 * meja;
        var omejitevymax4 = spodnjayminus;
        kvadrati.push({ xmin: xmin4, xmax: xmax4, ymin: ymin4, ymax: ymax4, omejitevxmin: omejitevxmin4, omejitevxmax: omejitevxmax4, omejitevymin: omejitevymin4, omejitevymax: omejitevymax4 });
    }
    else if (sekay) {//2 kvadrata
        //
        var xmax1 = meja;
        var xmin1 = xmax1 - velikostx; //370
        var omejitevxmax1 = meja;
        var omejitevxmin1 = spodnjaxplus;
        var ymax1 = ymax;
        var ymin1 = ymin;
        var omejitevymax1 = ymax;
        var omejitevymin1 = ymin;
        kvadrati.push({ xmin: xmin1, xmax: xmax1, ymin: ymin1, ymax: ymax1, omejitevxmin: omejitevxmin1, omejitevxmax: omejitevxmax1, omejitevymin: omejitevymin1, omejitevymax: omejitevymax1 });
        //-+
        var xmin2 = -1 * meja;
        var xmax2 = xmin2 + velikostx; //-370
        var omejitevxmin2 = -1 * meja;
        var omejitevxmax2 = spodnjaxminus;
        var ymax2 = ymax;
        var ymin2 = ymin;
        var omejitevymax2 = ymax;
        var omejitevymin2 = ymin;
        kvadrati.push({ xmin: xmin2, xmax: xmax2, ymin: ymin2, ymax: ymax2, omejitevxmin: omejitevxmin2, omejitevxmax: omejitevxmax2, omejitevymin: omejitevymin2, omejitevymax: omejitevymax2 });
    }
    else if (sekay) {//2 kvadrata
        //+
        var xmax3 = xmax;
        var xmin3 = xmin;
        var omejitevxmax3 = xmax;
        var omejitevxmin3 = xmin;
        var ymax3 = meja;
        var ymin3 = ymax3 - velikosty; //370
        var omejitevymax3 = meja;
        var omejitevymin3 = spodnjayplus;
        kvadrati.push({ xmin: xmin3, xmax: xmax3, ymin: ymin3, ymax: ymax3, omejitevxmin: omejitevxmin3, omejitevxmax: omejitevxmax3, omejitevymin: omejitevymin3, omejitevymax: omejitevymax3 });
        //-
        var xmax4 = xmax;
        var xmin4 = xmin;
        var omejitevxmax4 = xmax;
        var omejitevxmin4 = xmin;
        var ymin4 = -1 * meja;
        var ymax4 = ymax4 + velikosty; //-370
        var omejitevymin4 = -1 * meja;
        var omejitevymax4 = spodnjayminus;
        kvadrati.push({ xmin: xmin4, xmax: xmax4, ymin: ymin4, ymax: ymax4, omejitevxmin: omejitevxmin4, omejitevxmax: omejitevxmax4, omejitevymin: omejitevymin4, omejitevymax: omejitevymax4 });
    }
    else {
        kvadrati.push({ xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax });
    }
    return kvadrati;
}

var StOaz=1;
var StC9C15=1;


var CelotnaDolzina = 1;
function UstvariIskanja(cropfinder) {//30x30
    var deltar = cropfinder.maxdistance - cropfinder.mindistance;
    var stevilovodoravnihkvadratov = deltar / 30;
    var dy = 30;
    switch (unsafeWindow.TravianServer) {
        case 3:
            dy = 6;
            break;
        case 4:
        case 4.2:
            dy = 30;
            break;
    }
    if (unsafeWindow.MapZoom==2) {
        dy = 20;
    }
    var kvadrati = [];
    for (var i = 0; i < Math.ceil(cropfinder.maxdistance * 2 / dy); i++) {//po y
        var ymax = cropfinder.y + cropfinder.maxdistance - i * dy - i;
        var ymin = cropfinder.y + cropfinder.maxdistance - (i + 1) * dy - i;
        for (var j = 0; j < Math.ceil(cropfinder.maxdistance * 2 / dy); j++) {
            var xmax = cropfinder.x + cropfinder.maxdistance - j * dy - j;
            var xmin = cropfinder.x + cropfinder.maxdistance - (j + 1) * dy - j;
            if (unsafeWindow.TravianServer == 4) {
                kvadrati = RazdeliNaPodkvadrate(kvadrati, xmin, xmax, ymin, ymax);
            }
            else {
                kvadrati.push({ xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax });
            }
        }
    }


    CelotnaDolzina = kvadrati.length;
    document.getElementById("CropFinderProgress").innerHTML = "Analysing map <progress value='0' max='100'>";
    if (!DovoljenaAnalizaCropa) {
        return;
    }

    switch (unsafeWindow.TravianServer) {
        case 3:
            AnalizirajKvadrateT3(kvadrati, cropfinder);
            break;
        case 4:
        case 4.2:
            GetAjaxToken(kvadrati, cropfinder);
            break;
    }


}

function GetAjaxToken(kvadrati, cropfinder) {
    document.getElementById("CropFinderProgress").innerHTML = "Analysing map <progress value='0' max='100'>";
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: "GET",
            url: unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/dorf1.php",
            headers: {},
            onload: function (response1) {

                if (true) {
                    unsafeWindow.AjaxToken = "&ajaxToken=" + getAjaxToken(response1.responseText)
                    console.log(unsafeWindow.AjaxToken)
                }


                AnalizirajKvadrateT4(kvadrati, cropfinder);
            },
            onerror: function (responseDetails) {
                
            },
            ontimeout: function (responseDetails) {
                
            },
            onabort: function (responseDetails) {
                
            }
        });
    }, RandomXtoY(500, 2000));
}

function AnalizirajKvadrateT3(kvadrati, cropfinder)//(minX,maxX,minY,maxY,AnaliziranServer,x,y,r,c9,c15,naselja,vseoaze,sloni,prazneoaze,nezasedene,cropfinder)
{
    var AnalizaCooldown = RandomXtoY(1000, 3000);
    var minX = kvadrati[0].xmin;
    var minY = kvadrati[0].ymin;
    var maxX = kvadrati[0].xmax;
    var maxY = kvadrati[0].ymax;
    var x = cropfinder.x;
    var y = cropfinder.y;
    var AnaliziranServer = unsafeWindow.SERVERLINK;
    var c9c15 = cropfinder.c9c15;
    var c9 = cropfinder.c9;
    var c15 = cropfinder.c9;
    var naselja = cropfinder.farme;
    var c9 = cropfinder.c9;
    var Naslov = unsafeWindow.http+"://" + AnaliziranServer + "/ajax.php?f=k7&x=" + minX + "&y=" + minY + "&xx=" + maxX + "&yy=" + maxY;
    GM.xmlHttpRequest({
        method: 'GET',
        url: Naslov,
        headers: {
            Referrer: unsafeWindow.http+"://" + AnaliziranServer + "/karte.php"
        },
        onload: function (responseDetails) {
            eval("var DobljeniPodatki=" + responseDetails.responseText);

            for (var i = 0; i < DobljeniPodatki.length; i++) {
                var TiPodatki = DobljeniPodatki[i];

                for (var j = 0; j < TiPodatki.length; j++) {
                    var TaPodatek = TiPodatki[j];
                    var JeIgralec = true;
                    var Razdalja = PridobiRazdaljo(x, y, TaPodatek[0], TaPodatek[1]);
                    if (Razdalja <= cropfinder.maxdistance && Razdalja >= cropfinder.mindistance) {
                        if (TaPodatek[6] == undefined) {//neposeljeno
                            //c15: TaPodatek[2]=6
                            //c9:  TaPodatek[2]=1
                            if (TaPodatek[2] == 6 && c15 == true && c9c15 == true)//
                            {
                                ProstaC15.push({ x: TaPodatek[0], y: TaPodatek[1] }); //
                                DodajVCropTabelo("disabled", TaPodatek[0], TaPodatek[1], x, y, "/", "", 0, "/", "/", "c15", AnaliziranServer, TaPodatek[4], "/", "/")
                            }
                            else if (TaPodatek[2] == 1 && c9 == true && c9c15 == true)//
                            {
                                ProstaC9.push({ x: TaPodatek[0], y: TaPodatek[1] });
                                DodajVCropTabelo("disabled", TaPodatek[0], TaPodatek[1], x, y, "/", "", 0, "/", "/", "c9", AnaliziranServer, TaPodatek[4], "/", "/")
                            }
                        }
                        else {

                            if (TaPodatek[3] == 0 & !cropfinder.advancedfarmfinder && cropfinder.findfarms) {//igralec
                                DodajVCropTabelo("", TaPodatek[0], TaPodatek[1], x, y, TaPodatek[6], "?", TaPodatek[8], TaPodatek[9], TaPodatek[7], "farm", AnaliziranServer, TaPodatek[4], "/", "4")
                            }



                            var JeOaza = false;
                            if (TaPodatek[2] == 0) {
                                var JeOaza = true;
                                var PodatekX = TaPodatek[0];
                                var PodatekY = TaPodatek[1];
                                if (cropfinder.oaze) {
                                    if (TaPodatek[7] != null && cropfinder.vseoaze && cropfinder.oaze) {
                                        var Aliansa = TaPodatek[9];
                                        var Igralec = TaPodatek[7];
                                        if (Aliansa == "" || Aliansa == " ") {
                                            Aliansa = "/";
                                        }
                                        DodajVCropTabelo("", PodatekX, PodatekY, x, y, "oases", "/", 0, Aliansa, Igralec, "oases", unsafeWindow.SERVERLINK, "d=" + getCoordfromXY(PodatekX, PodatekY), poljeObjektov[aaa].u, 4);
                                    }
                                    else if (TaPodatek[7] != null) {
                                    }
                                    else if (cropfinder.vseoaze || cropfinder.sloni || cropfinder.prazneoaze || cropfinder.prosteoaze || cropfinder.krokodili || cropfinder.oazeles || cropfinder.oazeglina || cropfinder.oazezelezo || cropfinder.oazezito) {
                                        DodajVCropTabelo("", PodatekX, PodatekY, x, y, "oases", "/", 0, "/", "/", "oases", unsafeWindow.SERVERLINK, TaPodatek[4], 0, 4);
                                        ProsteOaze.push({ x: PodatekX, y: PodatekY, options: cropfinder, link: TaPodatek[4] });
                                    }


                                }

                            }




                        }
                    }
                }
            }

            if (!DovoljenaAnalizaCropa) {
                return;
            }

            kvadrati.splice(0, 1);
            var progress = Math.round((1 - kvadrati.length / CelotnaDolzina) * 100)
            document.getElementById("CropFinderProgress").innerHTML = "Analysing map <progress value='" + progress + "' max='100'>";
            if (kvadrati.length > 0) {
                CropFinderTimeout = setTimeout(function () { AnalizirajKvadrateT3(kvadrati, cropfinder) }, AnalizaCooldown);
            }
            else {
                StC9C15 = ProstaC15.length + ProstaC9.length;
                if (ProstaC15.length > 0 || ProstaC9.length > 0) {
                    CropFinderTimeout = setTimeout(function () { PridobiOazeT3(cropfinder) }, AnalizaCooldown);
                }
                else if (ProsteOaze.length > 0)//
                {
                    CropFinderTimeout = setTimeout(function () { AnalizirajOazoT3(cropfinder) }, AnalizaCooldown);
                }
                else {
                    AnaliziranElement = 0;
                    document.getElementById("CropFinderProgress").innerHTML = "Finished";
                    document.getElementById("MakeCropTableSortable").click();
                    document.getElementById("CropFinderStop").style.display = "none";
                    document.getElementById("CropFinderStart").style.display = "";
                    document.getElementById("FilterCropTable").style.display = "";
                    DovoljenaAnalizaCropa = false;
                    DodajGumbDodajNaFarmlist();
                }
            }

            return;


        },
        onerror: function (responseDetails) {

        },
        ontimeout: function (responseDetails) {

        },
        onabort: function (responseDetails) {

        }
    });

}



function PridobiOazeT3(cropfinder) {

    var naselje;
    if (ProstaC15.length > 0) {
        c = 15;
        naselje = ProstaC15[0];
    }
    else if (ProstaC9.length > 0) {
        c = 9;
        naselje = ProstaC9[0];
    }
    else {
    }

    var MinX = naselje.x - 3;
    var MaxX = naselje.x + 3;
    var MinY = naselje.y - 3;
    var MaxY = naselje.y + 3;

    var Oaze25 = 0;
    var Oaze50 = 0;
    var OazeBonus = 0;
    var Naslov = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/ajax.php?f=k7&x=" + MinX + "&y=" + MinY + "&xx=" + MaxX + "&yy=" + MaxY;
    GM.xmlHttpRequest({
        method: 'GET',
        url: Naslov,
        headers: {
            Referrer: unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/karte.php"
        },
        onload: function (responseDetails) {
            eval("var DobljeniPodatki=" + responseDetails.responseText);

            for (var i = 0; i < DobljeniPodatki.length; i++) {
                var TiPodatki = DobljeniPodatki[i];
                for (var j = 0; j < TiPodatki.length; j++) {
                    var TaPodatek = TiPodatki[j];
                    var JeIgralec = true;
                    if (TaPodatek[6] + "" == "undefined") {//neposeljeno
                    }
                    else {
                        if (TaPodatek[3] != 0) {//oaza
                            //TaPodatek[3]=3 25
                            //TaPodatek[3]=6 25
                            //TaPodatek[3]=9 25
                            //TaPodatek[3]=10 25
                            //TaPodatek[3]=11 25
                            //TaPodatek[3]=12 50
                            if (TaPodatek[3] == 3 || TaPodatek[3] == 6 || TaPodatek[3] == 9 || TaPodatek[3] == 10 || TaPodatek[3] == 11) {
                                Oaze25++;
                            }
                            else if (TaPodatek[3] == 12) {
                                Oaze50++;
                            }
                        }

                    }
                }
                //alert(DobljeniPodatki[i].join("\n"));
            }
            if (c == 15) {
                ProstaC15.splice(0, 1);
            }
            else if (c == 9) {
                ProstaC9.splice(0, 1);
            }
            Oaze50 = Math.min(Oaze50, 3);
            Oaze25 = Math.min(Oaze25, 3);
            if (Oaze50 >= 3) {
                var OazeBonus = 150;
            }
            else {
                var OazeBonus = 50 * Oaze50 + Math.min(3 - Oaze50, Oaze25) * 25;
            }
            var ex = ".//td[@name='oaza'][@x='" + naselje.x + "'][@y='" + naselje.y + "']";
            var CelicaZOazo = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (CelicaZOazo.snapshotLength) {
                CelicaZOazo.snapshotItem(0).innerHTML = OazeBonus;
            }

            if (!DovoljenaAnalizaCropa) {
                return;
            }

            var progress = Math.round((1 - (ProstaC15.length + ProstaC9.length) / StC9C15) * 100);
            document.getElementById("CropFinderProgress").innerHTML = "Analysing c9/c15 <progress value='" + progress + "' max='100'>";
            if (ProstaC15.length > 0 || ProstaC9.length > 0) {
                CropFinderTimeout = setTimeout(function () { PridobiOazeT3(cropfinder) }, AnalizaCooldown);
            }
            else {
                AnaliziranElement = 0;
                document.getElementById("CropFinderProgress").innerHTML = "Finished";
                document.getElementById("MakeCropTableSortable").click();
                document.getElementById("CropFinderStop").style.display = "none";
                document.getElementById("CropFinderStart").style.display = "";
                document.getElementById("FilterCropTable").style.display = "";
                DovoljenaAnalizaCropa = false;
                DodajGumbDodajNaFarmlist();
            }
            return;

        },
        onerror: function (responseDetails) {
            
        },
        ontimeout: function (responseDetails) {
            
        },
        onabort: function (responseDetails) {
            
        }
    });

}

function toType (obj) {
    return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
}

function AnalizirajKvadrateT4(kvadrati, cropfinder) {

    if (!DovoljenaAnalizaCropa) {
        return;
    }


    var AnalizaCooldown = RandomXtoY(1000, 3000);


    var takvadrat = kvadrati[0];
    var centerX = (takvadrat.xmin + takvadrat.xmax) / 2;
    var centerY = (takvadrat.ymin + takvadrat.ymax) / 2;
    var Naslov = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/ajax.php?cmd=mapPositionData";
    var data = "cmd=mapPositionData&data[x]=" + centerX + "&data[y]=" + centerY + "&data[zoomLevel]=" + unsafeWindow.MapZoom + "&" + unsafeWindow.AjaxToken;
    //console.log(Naslov)
    //console.log(data)
    var x = cropfinder.x;
    var y = cropfinder.y;
    GM.xmlHttpRequest({
        method: 'POST',
        url: Naslov,
        headers: {
            Referrer: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/karte.php",
            "X-Requested-With": "XMLHttpRequest",
            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
            "X-Request": "JSON"
        },
        data: data,
        onload: function (responseDetails) {

            eval("var DobljeniPodatki=" + responseDetails.responseText);
            console.log(DobljeniPodatki)
            if (DobljeniPodatki.response) {
                DobljeniPodatki = DobljeniPodatki.response;
            }
            if (DobljeniPodatki.error) {
                if (DobljeniPodatki.errorMsg == "Token invalid") {
                    GetAjaxToken(kvadrati, cropfinder);
                }
                else {
                    alert("Unknown error accured in farmfinder. Please report this on forum.");
                }
                return;
            }


            var poljeObjektov = DobljeniPodatki.data.tiles;

            for (var aaa = 0; aaa < poljeObjektov.length; aaa++) {
              	
                console.log(poljeObjektov[aaa])
                var PodatekX = poljeObjektov[aaa].position.x;
                var PodatekY = poljeObjektov[aaa].position.y;
                var PodatekC = poljeObjektov[aaa].title;
                var PodatekT = poljeObjektov[aaa].text;
                var did=poljeObjektov[aaa].did
                JeIgralec = true
                if(!did)
                {
                    JeIgralec = false
                }
                else if(did==-1)
                {
                    JeIgralec = false
                }
                var razdalja = PridobiRazdaljo(PodatekX, PodatekY, x, y)
                if (razdalja < cropfinder.mindistance || razdalja > cropfinder.maxdistance) {
                    continue;
                }

                if (takvadrat.omejitevxmax) {
                    if (PodatekX > takvadrat.omejitevxmax) {
                        continue;
                    }
                }
                if (takvadrat.omejitevymax) {
                    if (PodatekY > takvadrat.omejitevymax) {
                        continue;
                    }
                }
                if (takvadrat.omejitevxmin) {
                    if (PodatekX < takvadrat.omejitevxmin) {

                        continue;
                    }
                }
                if (takvadrat.omejitevymin) {
                    if (PodatekY < takvadrat.omejitevymin) {
                        continue;
                    }
                }

                try {
                    var PodatekD = poljeObjektov[aaa].d * 1;
                }
                catch (err) {
                    PodatekD = "undefined";
                }
                if (PodatekC + "" != "undefined") {
                    var Je15c = PodatekC.indexOf("f6}");
                    var Je9c = PodatekC.indexOf("f1}");
                    
                    //var JeIgralec = false;
                    //if (PodatekT + "" != "undefined") {
                    //    if (PodatekT.indexOf("k.spieler") != -1 && PodatekT.indexOf("k.einwohner") != -1) {
                    //        JeIgralec = true;
                    //    }
                    //}
                    /*if (poljeObjektov[aaa].u)
                    {
                        JeIgralec = true;
                    }*/

                    var JeOaza = false;
                    if (PodatekC.indexOf("{k.fo}") != -1 || PodatekD == -1) {
                        var JeOaza = true;
                        var Razdalja = PridobiRazdaljo(x, y, PodatekX * 1, PodatekY * 1);
                        if (cropfinder.oaze) {
                            if (PodatekT.indexOf("k.spieler") != -1 && cropfinder.vseoaze && cropfinder.oaze) {
                                var Aliansa = PodatekT.split("{k.allianz}")[1].split("<br")[0];
                                var Igralec = PodatekT.split("{k.spieler}")[1].split("<br")[0];
                                if (Aliansa == "" || Aliansa == " ") {
                                    Aliansa = "/";
                                }
                                else {
                                    Aliansa = [Aliansa, poljeObjektov[aaa].a];
                                }

                                DodajVCropTabelo("", PodatekX, PodatekY, x, y, "oases", "/", 0, Aliansa, Igralec, "oases", unsafeWindow.SERVERLINK, "d=" + getCoordfromXY(PodatekX, PodatekY), poljeObjektov[aaa].u, 4);


                            }
                            else if (PodatekT.indexOf("k.spieler") != -1) {
                            }
                            else if (cropfinder.vseoaze || cropfinder.sloni || cropfinder.prazneoaze || cropfinder.prosteoaze || cropfinder.krokodili || cropfinder.oazeles || cropfinder.oazeglina || cropfinder.oazezelezo || cropfinder.oazezito) {
                                DodajVCropTabelo("", PodatekX, PodatekY, x, y, "oases", "/", 0, "/", "/", "oases", unsafeWindow.SERVERLINK, "d=" + getCoordfromXY(PodatekX, PodatekY), 0, 4);
                                ProsteOaze.push({ x: PodatekX, y: PodatekY, options: cropfinder });
                            }


                        }

                    }




                    var Razdalja = PridobiRazdaljo(x, y, PodatekX * 1, PodatekY * 1);

                    if (cropfinder.c9c15) {
                        if (!JeIgralec) {//neposeljeno
                            //c15: TaPodatek[2]=6
                            //c9:  TaPodatek[2]=1
                            if (Je15c != -1 && cropfinder.c15 == true)//
                            {
                                ProstaC15.push({ x: PodatekX, y: PodatekY, options: cropfinder }); //
                                DodajVCropTabelo("disabled", PodatekX, PodatekY, x, y, "/", "", 0, "/", "/", "c15", unsafeWindow.SERVERLINK, "d=" + getCoordfromXY(PodatekX, PodatekY), 0, 4)
                            }
                            else if (Je9c != -1 && cropfinder.c9 == true)//
                            {
                                ProstaC9.push({ x: PodatekX, y: PodatekY, options: cropfinder });

                                DodajVCropTabelo("disabled", PodatekX, PodatekY, x, y, "/", "", 0, "/", "/", "c9", unsafeWindow.SERVERLINK, "d=" + getCoordfromXY(PodatekX, PodatekY), 0, 4)
                            }
                        }
                    }
                    //console.log(JeIgralec)
                    if (!cropfinder.advancedfarmfinder && cropfinder.findfarms && JeIgralec) {
                        var villagename = PodatekC.split("{k.dt}").join("");
                        var Prebivalci = PodatekT.split("{k.einwohner}")[1].split("<br")[0] * 1;
                        var Aliansa = PodatekT.split("{k.allianz}")[1].split("<br")[0];
                        var Igralec = PodatekT.split("{k.spieler}")[1].split("<br")[0];
                        if (Aliansa == "" || Aliansa == " ") {
                            Aliansa = "/";
                        }
                        else {
                            Aliansa = [Aliansa, poljeObjektov[aaa].a];
                        }
                        // function DodajVCropTabelo(add,x,y,Xorign,Yorign,vname,oases,population,allay,player,type,AnaliziranServer,link)
                        if (Prebivalci <= cropfinder.maxvillagepop) {
                            DodajVCropTabelo("", PodatekX, PodatekY, x, y, villagename, "?", Prebivalci, Aliansa, Igralec, "farm", unsafeWindow.SERVERLINK, "d=" + getCoordfromXY(PodatekX, PodatekY), 0, 4);
                            if (cropfinder.getreports) {
                                ProsteFarme.push({ x: PodatekX, y: PodatekY, options: cropfinder });
                            }
                        }


                    }





                }
            }


            if (!DovoljenaAnalizaCropa) {
                return;
            }

            kvadrati.splice(0, 1);
            var progress = Math.round((1 - kvadrati.length / CelotnaDolzina) * 100)
            document.getElementById("CropFinderProgress").innerHTML = "Analysing map <progress value='" + progress + "' max='100'></progress> " + progress + "%";
            if (kvadrati.length > 0) {
                CropFinderTimeout = setTimeout(function () { AnalizirajKvadrateT4(kvadrati, cropfinder) }, AnalizaCooldown);
            }
            else {
                StOaz = ProsteOaze.length;
                StC9C15 = ProstaC15.length + ProstaC9.length;
                if (ProsteOaze.length > 0)//
                {
                    CropFinderTimeout = setTimeout(function () { AnalizirajOazoT4(cropfinder) }, AnalizaCooldown);
                }
                else if (ProstaC15.length > 0 || ProstaC9.length > 0) {
                    CropFinderTimeout = setTimeout(function () { PridobiOazeT4(cropfinder) }, AnalizaCooldown);
                }
                else if (ProsteFarme.length > 0) {
                    CropFinderTimeout = setTimeout(function () { AnalizirajFarmoT4(cropfinder) }, AnalizaCooldown);
                }
                else {
                    AnaliziranElement = 0;
                    document.getElementById("CropFinderProgress").innerHTML = "Finished";
                    document.getElementById("MakeCropTableSortable").click();
                    document.getElementById("CropFinderStop").style.display = "none";
                    document.getElementById("CropFinderStart").style.display = "";
                    document.getElementById("FilterCropTable").style.display = "";
                    DovoljenaAnalizaCropa = false;
                    DodajGumbDodajNaFarmlist();
                }
            }

            return;

            AnaliziranElement++;

            if (true) {
                try {
                    if (ProsteOaze.length > 0) {
                        //CropFinderTimeout=setTimeout(function(){AnalizirajOazo(ProsteOaze[0][0],ProsteOaze[0][1],ProsteOaze[0][2],ProsteOaze[0][3],unsafeWindow.SERVERLINK,r,c9,c15,naselja,vseoaze,sloni,prazneoaze,nezasedene,cropfinder)},AnalizaCooldown);
                    }
                    else if (ProstaC15.length > 0) {
                        //CropFinderTimeout=setTimeout(function(){PridobiOaze(ProstaC15[0][0],ProstaC15[0][1],ProstaC15[0][2],ProstaC15[0][3],unsafeWindow.SERVERLINK,r,c9,c15,naselja,15,vseoaze,sloni,prazneoaze,nezasedene,cropfinder)},AnalizaCooldown);
                    }
                    else if (ProstaC9.length > 0) {
                        //CropFinderTimeout=setTimeout(function(){PridobiOaze(ProstaC9[0][0],ProstaC9[0][1],ProstaC9[0][2],ProstaC9[0][3],unsafeWindow.SERVERLINK,r,c9,c15,naselja,9,vseoaze,sloni,prazneoaze,nezasedene,cropfinder)},AnalizaCooldown);
                    }
                    else {
                        //test(Koordinate[AnaliziranElement][0]);
                        //CropFinderTimeout=setTimeout(function(){AnalizirajKvadrateT4(kvadrati,cropfinder)},AnalizaCooldown);
                    }
                }
                catch (Error) {

                    AnaliziranElement = 0;
                    document.getElementById("CropFinderProgress").innerHTML = "Finished";
                    document.getElementById("MakeCropTableSortable").click();
                    document.getElementById("CropFinderStop").style.display = "none";
                    document.getElementById("CropFinderStart").style.display = "";
                    document.getElementById("FilterCropTable").style.display = "";
                    DovoljenaAnalizaCropa = false;
                    DodajGumbDodajNaFarmlist();
                    return;
                }
            }
        },
        onerror: function (responseDetails) {

        },
        ontimeout: function (responseDetails) {

        },
        onabort: function (responseDetails) {

        }
    });


}

function DodajIgralceVTabelo(options) {
    if (!DovoljenaAnalizaCropa) {
        return;
    }
    for (var village in unsafeWindow.PLAYERFINDER.villages) {
        var naselje = unsafeWindow.PLAYERFINDER.villages[village];
        var razdalja = PridobiRazdaljo(options.x, options.y, naselje.x, naselje.y);
        PleyerPop = unsafeWindow.PLAYERFINDER.players["P" + naselje.uid].pop;
        PlayerVillages = unsafeWindow.PLAYERFINDER.players["P" + naselje.uid].villages.length;
        if (razdalja <= options.maxdistance && razdalja >= options.mindistance && ((naselje.pop <= options.maxvillagepop && PleyerPop <= options.maxplayerpop && PlayerVillages <= options.maxnumberofvillages) || (options.natars && naselje.tribe == 5))) {
            if (naselje.tribe != 5 && options.onlynatars) {
                continue;
            }

            if (naselje.tribe == 5 && !options.natars) {
                continue;
            }

            var spredaj = "d=";
            switch (unsafeWindow.TravianServer) {
                case 3:
                    spredaj = "z=";
                    break;
                case 4:
                case 4.2:
                    spredaj = "d=";
                    break;
            }
            if (options.getreports) {
                ProsteFarme.push({ x: naselje.x, y: naselje.y, options: options });
            }
            DodajVCropTabelo("", naselje.x, naselje.y, options.x, options.y, naselje.villagename, "farm", naselje.pop, [naselje.ally, naselje.allyid], naselje.playername, "farm", unsafeWindow.SERVERLINK, spredaj + getCoordfromXY(naselje.x, naselje.y), naselje.uid, naselje.tribe);
        }
        //return;
    }
    
}


function CropFinderEventStart() {
    unsafeWindow.OdkljukajVseAlianse();
    if (document.getElementById("FilterCropResultsOptions").style.display != "none") {
        unsafeWindow.FilterCropTableHideEvent();
    }

    if (document.getElementById("CropFinderFarme").checked == "checked" || document.getElementById("CropFinderFarme").checked == true) {
        GetAllVillages();
    }
    else {
        AnalyseCropFinder()
    }

    return;

    CropFinderFarme = false;
    CropFinderc9 = false;
    CropFinderc15 = false;
    VseOaze = false;
    Sloni = false;
    PrazneOaze = false;
    ProsteOaze2 = false;
    Krokodili = false;
    PrazneOazeLes = false;
    PrazneOazeGlina = false;
    PrazneOazeZelezo = false;
    PrazneOazeZito = false;
    if (document.getElementById("CropFinderFarme").checked == "checked" || document.getElementById("CropFinderFarme").checked == true) {
        CropFinderFarme = true;
    }
    if (document.getElementById("CropFinderc9").checked == "checked" || document.getElementById("CropFinderc9").checked == true) {
        CropFinderc9 = true;
    }
    if (document.getElementById("CropFinderc15").checked == "checked" || document.getElementById("CropFinderc15").checked == true) {
        CropFinderc15 = true;
    }
    if (document.getElementById("CropFinderAllOases").checked == "checked" || document.getElementById("CropFinderAllOases").checked == true) {
        VseOaze = true;
    }
    if (document.getElementById("CropFinderElephants").checked == "checked" || document.getElementById("CropFinderElephants").checked == true) {
        Sloni = true;
    }
    if (document.getElementById("CropFinderKrokodili").checked == "checked" || document.getElementById("CropFinderKrokodili").checked == true) {
        Krokodili = true;
    }
    if (document.getElementById("CropFinderEmptyOases").checked == "checked" || document.getElementById("CropFinderEmptyOases").checked == true) {
        PrazneOaze = true;
    }
    if (document.getElementById("CropFinderEmptyOasesWood").checked == "checked" || document.getElementById("CropFinderEmptyOasesWood").checked == true) {
        PrazneOazeLes = true;
    }
    if (document.getElementById("CropFinderEmptyOasesClay").checked == "checked" || document.getElementById("CropFinderEmptyOasesClay").checked == true) {
        PrazneOazeGlina = true;
    }
    if (document.getElementById("CropFinderEmptyOasesIron").checked == "checked" || document.getElementById("CropFinderEmptyOasesIron").checked == true) {
        PrazneOazeZelezo = true;
    }
    if (document.getElementById("CropFinderEmptyOasesCrop").checked == "checked" || document.getElementById("CropFinderEmptyOasesCrop").checked == true) {
        PrazneOazeZito = true;
    }
    if (document.getElementById("CropFinderFreeOases").checked == "checked" || document.getElementById("CropFinderFreeOases").checked == true) {
        ProsteOaze2 = true;
    }
    //CropFinderc9,CropFinderc15,CropFinderFarme,VseOaze,Sloni,PrazneOaze,ProsteOaze2

    var cropfinder = {
        x: document.getElementById("CropFinderX").value,
        y: document.getElementById("CropFinderY").value,
        maxdistance: document.getElementById("CropFinderDistance").value,
        mindistance: document.getElementById("CropFinderMinDistance").value,
        link: document.getElementById("CropFinderLink").innerHTML,
        c9: CropFinderc9,
        c15: CropFinderc15,
        farme: CropFinderFarme,
        vseoaze: VseOaze,
        sloni: Sloni,
        krokodili: Krokodili, //38
        prazneoaze: PrazneOaze,
        prosteoaze: ProsteOaze2,
        oazeles: PrazneOazeLes, //2,3
        oazeglina: PrazneOazeGlina, //6,7
        oazezelezo: PrazneOazeZelezo, //10,11
        oazezito: ProsteOaze2//15,14,3,7,11,
    }

    FindCrop(document.getElementById("CropFinderX").value, document.getElementById("CropFinderY").value, document.getElementById("CropFinderDistance").value, document.getElementById("CropFinderLink").innerHTML, CropFinderc9, CropFinderc15, CropFinderFarme, VseOaze, Sloni, PrazneOaze, ProsteOaze2, cropfinder);

}

function CropFinderEventStop() {

    document.getElementById("CropFinderStart").style.display = "";
    document.getElementById("CropFinderStop").style.display = "none";
    StopFindingCrop();


}

function StopFindingCrop() {
    document.getElementById("CropFinderProgress").innerHTML = 'Stopped';
    DovoljenaAnalizaCropa = false;
    document.getElementById("MakeCropTableSortable").click();
    try {
        clearTimeout(CropFinderTimeout);
    }
    catch (Error) {
    }
}

function oznaciNatarje() {
    var CheckBoxi = document.getElementsByName("farmfindercheckbox");
    var friends = document.getElementById("oznaciNatarjeText").value;
    if (friends.indexOf(",") > -1) {
        friends = friends.split(",");
    }
    else {
        friends = [friends];
    }
    for (var fd = 0; fd < CheckBoxi.length; fd++) {
        for (var friend = 0; friend < friends.length; friend++) {
            if (CheckBoxi[fd].parentNode.parentNode.getElementsByClassName("imeIgralca")[0].innerHTML == friends[friend] && CheckBoxi[fd].parentNode.parentNode.style.display != "none") {
                CheckBoxi[fd].checked = this.checked;
            }
            else
            {
                var igralec = CheckBoxi[fd].parentNode.parentNode.getElementsByClassName("imeIgralca")[0];
                var linkigralec=igralec.getElementsByTagName("a")
                if (linkigralec.length)
                {
                    if (linkigralec[0].innerHTML == friends[friend] && CheckBoxi[fd].parentNode.parentNode.style.display != "none") {
                        CheckBoxi[fd].checked = this.checked;
                    }
                }
            }
        }
    }
}

function oznaciNatarje2() {
    var CheckBoxi = document.getElementsByName("farmfindercheckbox");
    var friends = document.getElementById("oznaciNatarje2Text").value;
    if (friends.indexOf(",") > -1) {
        friends = friends.split(",");
    }
    else {
        friends = [friends];
    }
    for (var fd = 0; fd < CheckBoxi.length; fd++) {
        for (var friend = 0; friend < friends.length; friend++) {
            if (CheckBoxi[fd].parentNode.parentNode.getElementsByClassName("imeNaselja")[0].innerHTML == friends[friend] && CheckBoxi[fd].parentNode.parentNode.style.display != "none") {
                CheckBoxi[fd].checked = this.checked;
            }
        }
    }
}

function oznacivsefarmfinder() {
    var CheckBoxi = document.getElementsByName("farmfindercheckbox");
    for (var fd = 0; fd < CheckBoxi.length; fd++) {
        if (CheckBoxi[fd].disabled == false && CheckBoxi[fd].parentNode.parentNode.style.display != "none") {
            CheckBoxi[fd].checked = this.checked;
        }
    }
}

function PridobiOazeT4(options)//xOaze,yOaze,x,y,AnaliziranServer,r,c9,c15,naselja,c,vseoaze,sloni,prazneoaze,nezasedene,cropfinder)
{

    if (!DovoljenaAnalizaCropa) {
        return;
    }

    if (ProstaC15.length > 0) {
        var oaza = ProstaC15[0];
        var tipoaze = 15;
    }
    else if (ProstaC9.length > 0) {
        var oaza = ProstaC9[0];
        var tipoaze = 9;
    }
    else {

    }
    /*
    var cropfinder={
    x:document.getElementById("CropFinderX").value*1,
    y:document.getElementById("CropFinderY").value*1,
    mindistance:document.getElementById("CropFinderMinDistance").value*1,
    maxdistance:document.getElementById("CropFinderDistance").value*1,
    maxvillagepop:document.getElementById("MaxVillagePop").value*1,
    maxplayerpop:document.getElementById("MaxPlayerPop").value*1,
    maxnumberofvillages:document.getElementById("MaxPlayerVillages").value*1,
    link:document.getElementById("CropFinderLink").innerHTML,
    c9: CropFinderc9,
    c15:CropFinderc15,
    farme:CropFinderFarme,
    vseoaze:VseOaze,
    sloni:Sloni,
    krokodili:Krokodili,//38
    prazneoaze:PrazneOaze,
    prosteoaze:ProsteOaze2,
    oazeles:PrazneOazeLes,//2,3
    oazeglina:PrazneOazeGlina,//6,7
    oazezelezo:PrazneOazeZelezo,//10,11
    oazezito:ProsteOaze2//15,14,3,7,11,
    }*/
    var xOaze = oaza.x;
    var yOaze = oaza.y;
    var x = options.x;
    var y = options.y;
    var AnaliziranServer = unsafeWindow.SERVERLINK;
    var r = options.maxdistance;
    var R = options.mindistance;
    var c9 = options.c9;
    var c15 = options.c15;
    var naselja = options.farme;
    var vseoaze = options.vseoaze;
    //var naselja=options.farme;
    //var naselja=options.farme;

    AnalizaCooldown = RandomXtoY(1000, 3000);


    var Oaze25 = 0;
    var Oaze50 = 0;
    var OazeBonus = 0;

    var centerX = xOaze;
    var centerY = yOaze;
    var Naslov = unsafeWindow.http+"://" + AnaliziranServer + "/ajax.php?cmd=mapPositionData";
    var data = "cmd=mapPositionData&data[x]=" + centerX + "&data[y]=" + centerY + "&data[zoomLevel]=1&"+unsafeWindow.AjaxToken;
    GM.xmlHttpRequest({
        method: 'POST',
        url: Naslov,
        headers: {
            Referrer: unsafeWindow.http+"://" + AnaliziranServer + "/karte.php",
            "X-Requested-With": "XMLHttpRequest",
            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
            "X-Request": "JSON"
        },
        data: data,
        onload: function (responseDetails) {
            eval("var DobljeniPodatki=" + responseDetails.responseText);

            if (DobljeniPodatki.response) {
                DobljeniPodatki = DobljeniPodatki.response;
            }

            var poljeObjektov = DobljeniPodatki.data.tiles;
            for (var aaa = 0; aaa < poljeObjektov.length; aaa++) {
                /*var PodatekX = poljeObjektov[aaa].x;
                var PodatekY = poljeObjektov[aaa].y;
                var PodatekC = poljeObjektov[aaa].c;
                var PodatekT = poljeObjektov[aaa].t;
                var PodatekD = poljeObjektov[aaa].d;*/
                var PodatekX = poljeObjektov[aaa].position.x;
                var PodatekY = poljeObjektov[aaa].position.y;
                var PodatekC = poljeObjektov[aaa].title;
                var PodatekT = poljeObjektov[aaa].text;
                var did=poljeObjektov[aaa].did
                if (PodatekC + "" != "undefined") {

                    var JeOaza = false;
                  	
                    if (did== -1) {
                        JeOaza = true;
                    }

                    if (JeOaza && Math.abs((PodatekX - centerX) * (PodatekX - centerX)) <= 9 && Math.abs((PodatekY - centerY) * (PodatekY - centerY)) <= 9) {//neposeljeno

                        var PoljeOaze = PodatekT.split("{a:r4}");

                        if (PoljeOaze.length > 1) {

                            var KolicinaOaze = PoljeOaze[PoljeOaze.length - 1].split("{a.r4}").join("").split("%")[0] * 1;

                            if (KolicinaOaze == 25) {

                                Oaze25++;
                            }
                            else if (KolicinaOaze == 50) {

                                Oaze50++;
                            }
                        }
                    }
                    //console.log(did,PodatekX,PodatekY,KolicinaOaze,PodatekC,PodatekT)
                }
            }


            if (tipoaze == 15) {
                ProstaC15.splice(0, 1);
            }
            else if (tipoaze == 9) {
                ProstaC9.splice(0, 1);
            }

            Oaze50 = Math.min(Oaze50, 3);
            Oaze25 = Math.min(Oaze25, 3);
            if (Oaze50 >= 3) {
                var OazeBonus = 150;
            }
            else {
                var OazeBonus = 50 * Oaze50 + Math.min(3 - Oaze50, Oaze25) * 25;
            }
            var ex = ".//td[@name='oaza'][@x='" + xOaze + "'][@y='" + yOaze + "']";
            var CelicaZOazo = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);


            if (CelicaZOazo.snapshotLength) {
                CelicaZOazo.snapshotItem(0).innerHTML = OazeBonus;
                try {

                }
                catch (Error) { }
            }


            if (!DovoljenaAnalizaCropa) {
                return;
            }

            var progress = Math.round((1 - (ProstaC15.length + ProstaC9.length) / StC9C15) * 100);
            document.getElementById("CropFinderProgress").innerHTML = "Analysing c9/c15 <progress value='" + progress + "' max='100'>";

            if (ProsteOaze.length > 0)//
            {
                CropFinderTimeout = setTimeout(function () { AnalizirajOazo(options) }, AnalizaCooldown);
            }
            else if (ProstaC15.length > 0 || ProstaC9.length > 0) {
                CropFinderTimeout = setTimeout(function () { PridobiOazeT4(options) }, AnalizaCooldown);
            }
            else {
                AnaliziranElement = 0;
                document.getElementById("CropFinderProgress").innerHTML = "Finished";
                document.getElementById("MakeCropTableSortable").click();
                document.getElementById("CropFinderStop").style.display = "none";
                document.getElementById("CropFinderStart").style.display = "";
                document.getElementById("FilterCropTable").style.display = "";
                DovoljenaAnalizaCropa = false;
                DodajGumbDodajNaFarmlist();
            }
            return;



            if (DovoljenaAnalizaCropa) {
                try {
                    if (ProsteOaze.length > 0) {
                        CropFinderTimeout = setTimeout(function () { AnalizirajOazo(ProsteOaze[0][0], ProsteOaze[0][1], ProsteOaze[0][2], ProsteOaze[0][3], AnaliziranServer, r, c9, c15, naselja, vseoaze, sloni, prazneoaze, nezasedene, cropfinder) }, AnalizaCooldown);
                    }
                    else if (ProstaC15.length > 0) {
                        CropFinderTimeout = setTimeout(function () { PridobiOaze(ProstaC15[0][0], ProstaC15[0][1], ProstaC15[0][2], ProstaC15[0][3], AnaliziranServer, r, c9, c15, naselja, 15, vseoaze, sloni, prazneoaze, nezasedene, cropfinder) }, AnalizaCooldown);
                    }
                    else if (ProstaC9.length > 0) {
                        CropFinderTimeout = setTimeout(function () { PridobiOaze(ProstaC9[0][0], ProstaC9[0][1], ProstaC9[0][2], ProstaC9[0][3], AnaliziranServer, r, c9, c15, naselja, 9, vseoaze, sloni, prazneoaze, nezasedene, cropfinder) }, AnalizaCooldown);
                    }
                    else {
                        test(Koordinate[AnaliziranElement][0]);
                        CropFinderTimeout = setTimeout(function () { AnalizirajKoordinate(Koordinate[AnaliziranElement][0], Koordinate[AnaliziranElement][1], Koordinate[AnaliziranElement][2], Koordinate[AnaliziranElement][3], AnaliziranServer, x, y, r, c9, c15, naselja, vseoaze, sloni, prazneoaze, nezasedene, cropfinder) }, AnalizaCooldown);
                    }
                }
                catch (Error) {
                    AnaliziranElement = 0;
                    document.getElementById("CropFinderProgress").innerHTML = "Finished";
                    document.getElementById("MakeCropTableSortable").click();
                    document.getElementById("CropFinderStop").style.display = "none";
                    document.getElementById("CropFinderStart").style.display = "";
                    document.getElementById("FilterCropTable").style.display = "";
                    DovoljenaAnalizaCropa = false;
                    DodajGumbDodajNaFarmlist();
                    return;
                }
            }
        },
        onerror: function (responseDetails) {
            
        },
        ontimeout: function (responseDetails) {
            
        },
        onabort: function (responseDetails) {
            
        }
    });




}

var ReportiFarme = [];
var TrenutnaFarma =
{
    streportov: 0,
    skupajprihodek: 0,
    skupajizgube: 0,
    skupajnosilnost: 0,
    clear: function () {
        this.streportov = 0;
        this.skupajprihodek = 0;
        this.skupajizgube = 0;
        this.skupajnosilnost = 0;
    }
}

function AnalizirajReportFarmeT4(options) {
    unsafeWindow.maxstrportov = Math.max(unsafeWindow.maxstrportov, ReportiFarme.length);
    var report = ReportiFarme[0];
    //    var x = options.x;
    //    var y = options.y;
    var AnaliziranServer = unsafeWindow.SERVERLINK;
    //    var r = options.maxdistance;
    //    var R = options.mindistance;
    //    var c9 = options.c9;
    //    var c15 = options.c15;
    //    var naselja = options.farme;
    //    var vseoaze = options.vseoaze;
    //var naselja=options.farme;
    //var naselja=options.farme;

    AnalizaCooldown = RandomXtoY(1000, 3000);


    var Naslov = report;

    GM.xmlHttpRequest({
        method: 'GET',
        url: Naslov,
        headers: {
            Referrer: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/karte.php"
        },
        onload: function (responseDetails) {
            ReportiFarme.splice(0, 1);
            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;

            try {
                var nosilnost = doc.getElementsByClassName("carry")[0];
                nosilnost.removeChild(nosilnost.getElementsByTagName("img")[0]);
                nosilnost = nosilnost.innerHTML.match(/[\d\.]+/g);
            }
            catch (err) {
                var nosilnost = [0, 0];
            }

            TrenutnaFarma.skupajprihodek += nosilnost[0] * 1;
            TrenutnaFarma.skupajnosilnost += nosilnost[1] * 1;

            var repp = doc.getElementById("message");
            if (!repp) {
            }

            var tabele = repp.getElementsByTagName("table");
            var plenel = doc.getElementsByClassName("rArea");
            var plen = {
                wood: 0,
                clay: 0,
                iron: 0,
                crop: 0
            }
            var plennames = ["wood", "clay", "iron", "crop"];
            if (plenel.length > 0) {
                for (var i = 0; i < plennames.length & i < plenel.length; i++) {
                    var taplenel = plenel[i];
                    var vseslik = taplenel.getElementsByTagName("img");
                    for (var j = 0; j < vseslik.length; j++) {
                        vseslik[j].parentNode.removeChild(vseslik[j]);
                    }
                    plen[plennames[i]] = taplenel.innerHTML.match(/[\d\.]+/g)[0]
                }
            }
            var headertext = doc.getElementsByClassName("header text");

            var stroski = 0;
            var reportdata = {
                tema: headertext[0].innerHTML,
                time: headertext[1].innerHTML,
                nosilnost: nosilnost,
                plen: plen,
                attackerstroski: {
                    wood: 0,
                    clay: 0,
                    iron: 0,
                    crop: 0
                },
                defenderstroski: {
                    wood: 0,
                    clay: 0,
                    iron: 0,
                    crop: 0
                },
                attackerTroops: [],
                defenderTroops1: [],
                defenderTroops2: [],
                defenderTroops3: [],
                defenderTroops4: [],
                defenderTroops5: []
            }
            //reportdata.attackerTroops.lost = [];
            //reportdata.attackerTroops.trooptype = []
            var dataaaa = ["attackerTroops", "defenderTroops1", "defenderTroops2", "defenderTroops3", "defenderTroops4", "defenderTroops5"];
            var praznetabele = 0;
            var attackerstroski = {
                wood: 0,
                clay: 0,
                iron: 0,
                crop: 0
            }
            var defenderstroski = {
                wood: 0,
                clay: 0,
                iron: 0,
                crop: 0
            }
            for (var j = 0; j < dataaaa.length && j < tabele.length; j++) {

                var errorfound = false;
                var napadalectabela = tabele[j];
                var tipEnot = napadalectabela.getElementsByClassName("units");
                if (tipEnot.length > 1) {
                    var vseenote = tipEnot[1].getElementsByTagName("td");
                    tipEnot = tipEnot[0].getElementsByTagName("img");
                }
                else {
                    if (tipEnot.length == 0) {
                        praznetabele++;
                        continue;
                    }
                    errorfound = true;
                    tipEnot = tipEnot[0].getElementsByTagName("img");

                }
                var stEnott = napadalectabela.getElementsByClassName("units last");
                if (stEnott.length > 0) {
                    stEnott = stEnott[0].getElementsByTagName("td");
                }
                else {
                    errorfound = true;
                }
                reportdata[dataaaa[j - praznetabele]].skupajstroski = 0;
                for (var i = 0; i < tipEnot.length & i < stEnott.length; i++) {
                    try {
                        var taTip = tipEnot[i].getAttribute("class").match(/[\d\.]+/g)[0];

                        if (errorfound) {
                            var toStEnot = "?";
                            var toStVseEnot = "?";
                            var tiStroski = 0;
                        }
                        else {
                            try {
                                var toStEnot = stEnott[i].innerHTML.match(/[\d\.]+/g)[0] * 1;
                                var toStVseEnot = vseenote[i].innerHTML.match(/[\d\.]+/g)[0] * 1;
                                var tiStroski = {
                                    wood: unsafeWindow.uc[taTip][1] * toStEnot,
                                    clay: unsafeWindow.uc[taTip][2] * toStEnot,
                                    iron: unsafeWindow.uc[taTip][3] * toStEnot,
                                    crop: unsafeWindow.uc[taTip][4] * toStEnot
                                };
                            }
                            catch (err) {
                                var toStEnot = "?";
                                var toStVseEnot = "?";
                                var tiStroski = {
                                    wood: 0,
                                    clay: 0,
                                    iron: 0,
                                    crop: 0
                                };
                            }
                        }
                        if (j == 0) {
                            attackerstroski.wood += tiStroski.wood;
                            attackerstroski.clay += tiStroski.clay;
                            attackerstroski.iron += tiStroski.iron;
                            attackerstroski.crop += tiStroski.crop;
                        }
                        else {
                            defenderstroski.wood += tiStroski.wood;
                            defenderstroski.clay += tiStroski.clay;
                            defenderstroski.iron += tiStroski.iron;
                            defenderstroski.crop += tiStroski.crop;
                        }
                        reportdata[dataaaa[j - praznetabele]].push({
                            type: taTip,
                            units: toStVseEnot,
                            lostunits: toStEnot,
                            stroski: tiStroski
                        });
                        reportdata[dataaaa[j - praznetabele]].skupajstroski += tiStroski;

                    }
                    catch (err) {
                    }
                }
            }
            reportdata.attackerstroski = attackerstroski;
            reportdata.defenderstroski = defenderstroski;
            var ex = ".//canvas[@link='" + report + "']";
            var CelicaZOazo = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

            if (CelicaZOazo.snapshotLength) {
                CelicaZOazo.snapshotItem(0).setAttribute("data", JSON.stringify(reportdata));
            }
            var progress = Math.round((unsafeWindow.maxstrportov - ReportiFarme.length) / unsafeWindow.maxstrportov * 100);
            document.getElementById("CropFinderProgress").innerHTML = "Analysing farm reports <progress value='" + progress + "' max='100'></progress> " + progress + "%";

            if (ProsteOaze.length > 0)//
            {
                CropFinderTimeout = setTimeout(function () { AnalizirajOazoT4(options) }, AnalizaCooldown);
            }
            else if (ProstaC15.length > 0 || ProstaC9.length > 0) {
                CropFinderTimeout = setTimeout(function () { PridobiOazeT4(options) }, AnalizaCooldown);
            }
            else if (ProsteFarme.length > 0) {
                CropFinderTimeout = setTimeout(function () { AnalizirajFarmoT4(options) }, AnalizaCooldown);
            }
            else if (ReportiFarme.length > 0) {
                CropFinderTimeout = setTimeout(function () { AnalizirajReportFarmeT4(options) }, AnalizaCooldown);
            }
            else {
                AnaliziranElement = 0;
                document.getElementById("CropFinderProgress").innerHTML = "Finished";
                document.getElementById("MakeCropTableSortable").click();
                document.getElementById("CropFinderStop").style.display = "none";
                document.getElementById("CropFinderStart").style.display = "";
                document.getElementById("FilterCropTable").style.display = "";
                DovoljenaAnalizaCropa = false;
                DodajGumbDodajNaFarmlist();
            }
            return;


        },
        onerror: function (responseDetails) {

        },
        ontimeout: function (responseDetails) {

        },
        onabort: function (responseDetails) {

        }
    });
}

function AnalizirajFarmoT4(options) {
    var farma = ProsteFarme[0];

    //    var x = options.x;
    //    var y = options.y;
    var AnaliziranServer = unsafeWindow.SERVERLINK;
    //    var r = options.maxdistance;
    //    var R = options.mindistance;
    //    var c9 = options.c9;
    //    var c15 = options.c15;
    //    var naselja = options.farme;
    //    var vseoaze = options.vseoaze;
    //var naselja=options.farme;
    //var naselja=options.farme;

    AnalizaCooldown = RandomXtoY(1000, 3000);


    var Naslov = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/position_details.php?x=" + farma.x + "&y=" + farma.y;

    GM.xmlHttpRequest({
        method: 'GET',
        url: Naslov,
        headers: {
            Referrer: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/karte.php"
        },
        onload: function (responseDetails) {

            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;

            var tipoaze = doc.getElementById("tileDetails").getAttribute("class").match(/[\d\.]+/g)[0] * 1;
            var vsireporti = doc.evaluate(".//a[contains(@href, 'berichte.php?id=')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

            var reporti = [];
            ProsteFarme.splice(0, 1);
            if (vsireporti.snapshotLength) {
                for (var gdf = 0; gdf < vsireporti.snapshotLength; gdf++) {
                    reporti.push({
                        type: vsireporti.snapshotItem(gdf).parentNode.getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1,
                        link: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + vsireporti.snapshotItem(gdf).getAttribute("href")
                    });
                    if (options.reports) {
                        ReportiFarme.push(unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + vsireporti.snapshotItem(gdf).getAttribute("href"));
                    }
                    //ReportiFarme.push(unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + vsireporti.snapshotItem(gdf).getAttribute("href"));
                }
            }
            TrenutnaFarma.clear();
            TrenutnaFarma.streportov = ProsteFarme.length;
            ReportiFarme.x = farma.x;
            ReportiFarme.y = farma.y;

            var ex = ".//td[@class='cropreport'][@x='" + farma.x + "'][@y='" + farma.y + "']";
            var CelicaZOazo = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (CelicaZOazo.snapshotLength) {
                CelicaZOazo.snapshotItem(0).innerHTML = "";
                for (var i = 0; i < reporti.length; i++) {
                    var canv = document.createElement("canvas");
                    canv.setAttribute("report", reporti[i].type);
                    canv.setAttribute("id", "report" + unsafeWindow.reportid);

                    canv.setAttribute("link", reporti[i].link);
                    canv.addEventListener('click', unsafeWindow.OpenPage, true);
                    canv.setAttribute("style", "cursor:pointer");
                    canv.width = 19;
                    canv.height = 20;
                    //canv.addEventListener('mouseout', unsafeWindow.uniciTooltip, true);
                    canv.addEventListener('mouseover', unsafeWindow.ustvariReportTooltp, true);

                    var ctx = canv.getContext('2d');
                    ctx.drawImage(unsafeWindow.reportimg, 0, 50 * reporti[i].type, 19, 20, 0, 0, 19, 20);
                    CelicaZOazo.snapshotItem(0).appendChild(canv);
                    unsafeWindow.$("#" + "report" + unsafeWindow.reportid).tooltip({
                        tip: '#mojtooltip' + "report" + unsafeWindow.reportid,
                        //effect: 'slide',
                        position: "center left",
                        predelay:100,
                        offset: [0, -40]//,
                        //onHide: unsafeWindow.uniciTooltip//,
                        //onBeforeShow: unsafeWindow.ustvariReportTooltp
                    }).dynamic({});

                    unsafeWindow.reportid++;
                    //CelicaZOazo.snapshotItem(0).innerHTML = reporti.join("|");
                }
                var vsirep = document.getElementsByClassName("cropreport");
                for (var i = 0; i < vsirep.length; i++) {
                    if (vsirep[i] == CelicaZOazo.snapshotItem(0)) {
                        var progress = Math.round((i + 1) / vsirep.length * 100);
                        document.getElementById("CropFinderProgress").innerHTML = "Getting farm reports <progress value='" + progress + "' max='100'></progress> " + progress + "%";
                        break;
                    }
                }
            }


            if (!DovoljenaAnalizaCropa) {
                return;
            }
            //ProsteOaze.splice(0, 1);
            //var progress = Math.round((1 - (ProsteOaze.length) / StOaz) * 100);
            //document.getElementById("CropFinderProgress").innerHTML = "Analysing oases <progress value='" + progress + "' max='100'>";



            if (ProsteOaze.length > 0)//
            {
                CropFinderTimeout = setTimeout(function () { AnalizirajOazoT4(options) }, AnalizaCooldown);
            }
            else if (ProstaC15.length > 0 || ProstaC9.length > 0) {
                CropFinderTimeout = setTimeout(function () { PridobiOazeT4(options) }, AnalizaCooldown);
            }
            else if (ProsteFarme.length > 0) {
                CropFinderTimeout = setTimeout(function () { AnalizirajFarmoT4(options) }, AnalizaCooldown);
            }
            else if (ReportiFarme.length > 0) {
                TrenutnaFarma.clear();
                TrenutnaFarma.streportov = ReportiFarme.length;
                CropFinderTimeout = setTimeout(function () { AnalizirajReportFarmeT4(options) }, AnalizaCooldown);
            }

            else {
                AnaliziranElement = 0;
                document.getElementById("CropFinderProgress").innerHTML = "Finished";
                document.getElementById("MakeCropTableSortable").click();
                document.getElementById("CropFinderStop").style.display = "none";
                document.getElementById("CropFinderStart").style.display = "";
                document.getElementById("FilterCropTable").style.display = "";
                DovoljenaAnalizaCropa = false;
                DodajGumbDodajNaFarmlist();
            }
            return;


        },
        onerror: function (responseDetails) {

        },
        ontimeout: function (responseDetails) {

        },
        onabort: function (responseDetails) {

        }
    });
}


function AnalizirajOazoT4(options) {

    if (!DovoljenaAnalizaCropa) {
        return;
    }

    var oaza = ProsteOaze[0];
    var xOaze = oaza.x;
    var yOaze = oaza.y;
    var x = options.x;
    var y = options.y;
    var AnaliziranServer = unsafeWindow.SERVERLINK;
    var r = options.maxdistance;
    var R = options.mindistance;
    var c9 = options.c9;
    var c15 = options.c15;
    var naselja = options.farme;
    var vseoaze = options.vseoaze;
    //var naselja=options.farme;
    //var naselja=options.farme;

    AnalizaCooldown = RandomXtoY(1000, 3000);


    var Naslov = unsafeWindow.http+"://" + AnaliziranServer + "/ajax.php?cmd=viewTileDetails";
    var data = "cmd=viewTileDetails&x=" + xOaze + "&y=" + yOaze + unsafeWindow.AjaxToken;
    
    GM.xmlHttpRequest({
        method: 'POST',
        url: Naslov,
        headers: {
            Referrer: unsafeWindow.http+"://" + AnaliziranServer + "/karte.php",
            "X-Requested-With": "XMLHttpRequest",
            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
            "X-Request": "JSON"
        },
        data: data,
        onload: function (responseDetails) {

            eval("var DobljeniPodatki=" + responseDetails.responseText);

            if (DobljeniPodatki.response) {
                DobljeniPodatki = DobljeniPodatki.response;
            }
            var poljeObjektov = DobljeniPodatki.data.html;
            

            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = poljeObjektov;

            var tipoaze = doc.getElementById("tileDetails").getAttribute("class").match(/[\d\.]+/g)[0] * 1;
            var slikeEnot = doc.evaluate(
  	            ".//img[contains(@class, 'unit u')]",
    	            doc,
    	            null,
    	            XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
    	            null);
            var testZaDodat = "";
            var PrisotnostSlonov = false;
            var PrisotnostKrokodilov = false;
            var PraznaOaza = true;
            var zadodat = false;

            if (slikeEnot.snapshotLength) {
                PraznaOaza = false;
                for (var gdf = 0; gdf < slikeEnot.snapshotLength; gdf++) {
                    testZaDodat += slikeEnot.snapshotItem(gdf).parentNode.nextSibling.nextSibling.innerHTML + slikeEnot.snapshotItem(gdf).parentNode.nextSibling.nextSibling.nextSibling.nextSibling.innerHTML + "<br>";
                    if (slikeEnot.snapshotItem(gdf).getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 40) {
                        PrisotnostSlonov = true;
                    }
                    if (slikeEnot.snapshotItem(gdf).getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 38) {
                        PrisotnostKrokodilov = true;
                    }
                }
            }
            else {
                testZaDodat = "Empty";
                if (tipoaze == 2 && (options.prazneoaze && options.oazeles)) {
                    testZaDodat += " wood25";
                    zadodat = true;
                }
                if (tipoaze == 3 && options.prazneoaze && (options.oazeles || options.oazezito)) {
                    testZaDodat += " wood25 crop25";
                    zadodat = true;
                }
                if (tipoaze == 4 && (options.prazneoaze && options.oazeles)) {
                    testZaDodat += " wood50";
                    zadodat = true;
                }
                if (tipoaze == 6 && (options.prazneoaze && options.oazeglina)) {
                    testZaDodat += " clay25";
                    zadodat = true;
                }
                if (tipoaze == 7 && options.prazneoaze && (options.oazeglina || options.oazezito)) {
                    testZaDodat += " clay25 crop25";
                    zadodat = true;
                }
                if (tipoaze == 8 && (options.prazneoaze && options.oazeglina)) {
                    testZaDodat += " clay50";
                    zadodat = true;
                }
                if (tipoaze == 10 && (options.prazneoaze && options.oazezelezo)) {
                    testZaDodat += " iron25";
                    zadodat = true;
                }
                if (tipoaze == 11 && options.prazneoaze && (options.oazezelezo || options.oazezito)) {
                    testZaDodat += " iron25 crop25";
                    zadodat = true;
                }
                if (tipoaze == 12 && (options.prazneoaze && options.oazezelezo)) {
                    testZaDodat += " iron50";
                    zadodat = true;
                }
                if (tipoaze == 14 && (options.prazneoaze && options.oazezito)) {
                    testZaDodat += " crop25";
                    zadodat = true;
                }
                if (tipoaze == 15 && (options.prazneoaze && options.oazezito)) {
                    testZaDodat += " crop50";
                    zadodat = true;
                }


            }


            var ex = ".//td[@name='oaza'][@x='" + xOaze + "'][@y='" + yOaze + "']";
            var CelicaZOazo = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);


            if (CelicaZOazo.snapshotLength) {
                if (options.vseoaze || options.prosteoaze || (PrisotnostSlonov && options.sloni) || (PrisotnostKrokodilov && options.krokodili) || (PraznaOaza && options.prazneoaze) || zadodat) {
                    CelicaZOazo.snapshotItem(0).innerHTML = testZaDodat;
                }
                else {
                    CelicaZOazo.snapshotItem(0).parentNode.parentNode.removeChild(CelicaZOazo.snapshotItem(0).parentNode);
                }
            }


            if (!DovoljenaAnalizaCropa) {
                return;
            }

            ProsteOaze.splice(0, 1);
            var progress = Math.round((1 - (ProsteOaze.length) / StOaz) * 100);
            document.getElementById("CropFinderProgress").innerHTML = "Analysing oases <progress value='" + progress + "' max='100'></progress> " + progress + "%";



            if (ProsteOaze.length > 0)//
            {
                CropFinderTimeout = setTimeout(function () { AnalizirajOazoT4(options) }, AnalizaCooldown);
            }
            else if (ProstaC15.length > 0 || ProstaC9.length > 0) {
                CropFinderTimeout = setTimeout(function () { PridobiOazeT4(options) }, AnalizaCooldown);
            }
            else if (ProsteFarme.length > 0) {
                CropFinderTimeout = setTimeout(function () { AnalizirajFarmoT4(options) }, AnalizaCooldown);
            }
            else if (ReportiFarme.length > 0) {
                TrenutnaFarma.clear();
                TrenutnaFarma.streportov = ReportiFarme.length;
                CropFinderTimeout = setTimeout(function () { AnalizirajReportFarmeT4(options) }, AnalizaCooldown);
            }
            
            else {
                AnaliziranElement = 0;
                document.getElementById("CropFinderProgress").innerHTML = "Finished";
                document.getElementById("MakeCropTableSortable").click();
                document.getElementById("CropFinderStop").style.display = "none";
                document.getElementById("CropFinderStart").style.display = "";
                document.getElementById("FilterCropTable").style.display = "";
                DovoljenaAnalizaCropa = false;
                DodajGumbDodajNaFarmlist();
            }
            return;


        },
        onerror: function (responseDetails) {
            
        },
        ontimeout: function (responseDetails) {
            
        },
        onabort: function (responseDetails) {
            
        }
    });
}

function AnalizirajOazoT3(options) {

    if (!DovoljenaAnalizaCropa) {
        return;
    }

    var oaza = ProsteOaze[0];
    var xOaze = oaza.x;
    var yOaze = oaza.y;
    var x = options.x;
    var y = options.y;
    var AnaliziranServer = unsafeWindow.SERVERLINK;
    var r = options.maxdistance;
    var R = options.mindistance;
    var c9 = options.c9;
    var c15 = options.c15;
    var naselja = options.farme;
    var vseoaze = options.vseoaze;
    //var naselja=options.farme;
    //var naselja=options.farme;
    var cropfinder = options;
    AnalizaCooldown = RandomXtoY(1000, 3000);


    var Naslov = unsafeWindow.http+"://" + AnaliziranServer + "/karte.php?" + oaza.link;

    GM.xmlHttpRequest({
        method: 'GET',
        url: Naslov,
        headers: {
            Referrer: unsafeWindow.http+"://" + AnaliziranServer + "/karte.php"
        },
        onload: function (responseDetails) {

            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;
            var tipoaze = doc.getElementById("detailed_map").getAttribute("class").match(/[\d\.]+/g)[0] * 1;
            var slikeEnot = doc.evaluate(".//img[contains(@class, 'unit u')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            var testZaDodat = "";
            var PrisotnostSlonov = false;
            var PrisotnostKrokodilov = false;
            var PraznaOaza = true;
            var zadodat = false;

            if (slikeEnot.snapshotLength) {
                PraznaOaza = false;
                for (var gdf = 0; gdf < slikeEnot.snapshotLength; gdf++) {
                    testZaDodat += slikeEnot.snapshotItem(gdf).parentNode.nextSibling.nextSibling.innerHTML +" "+ slikeEnot.snapshotItem(gdf).parentNode.nextSibling.nextSibling.nextSibling.nextSibling.innerHTML + "<br>";
                    if (slikeEnot.snapshotItem(gdf).getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 40) {
                        PrisotnostSlonov = true;
                    }
                    if (slikeEnot.snapshotItem(gdf).getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 38) {
                        PrisotnostKrokodilov = true;
                    }
                }
            }
            else {
                testZaDodat = "Empty";
                if (tipoaze == 2 && (options.prazneoaze && options.oazeles)) {
                    testZaDodat += " wood25";
                    zadodat = true;
                }
                if (tipoaze == 3 && options.prazneoaze && (options.oazeles || options.oazezito)) {
                    testZaDodat += " wood25 crop25";
                    zadodat = true;
                }
                if (tipoaze == 4 && (options.prazneoaze && options.oazeles)) {
                    testZaDodat += " wood50";
                    zadodat = true;
                }
                if (tipoaze == 6 && (options.prazneoaze && options.oazeglina)) {
                    testZaDodat += " clay25";
                    zadodat = true;
                }
                if (tipoaze == 7 && options.prazneoaze && (options.oazeglina || options.oazezito)) {
                    testZaDodat += " clay25 crop25";
                    zadodat = true;
                }
                if (tipoaze == 8 && (options.prazneoaze && options.oazeglina)) {
                    testZaDodat += " clay50";
                    zadodat = true;
                }
                if (tipoaze == 10 && (options.prazneoaze && options.oazezelezo)) {
                    testZaDodat += " iron25";
                    zadodat = true;
                }
                if (tipoaze == 11 && options.prazneoaze && (options.oazezelezo || options.oazezito)) {
                    testZaDodat += " iron25 crop25";
                    zadodat = true;
                }
                if (tipoaze == 12 && (options.prazneoaze && options.oazezelezo)) {
                    testZaDodat += " iron50";
                    zadodat = true;
                }
                if (tipoaze == 14 && (options.prazneoaze && options.oazezito)) {
                    testZaDodat += " crop25";
                    zadodat = true;
                }
                if (tipoaze == 15 && (options.prazneoaze && options.oazezito)) {
                    testZaDodat += " crop50";
                    zadodat = true;
                }


            }


            var ex = ".//td[@name='oaza'][@x='" + xOaze + "'][@y='" + yOaze + "']";
            var CelicaZOazo = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);


            if (CelicaZOazo.snapshotLength) {
                if (options.vseoaze || options.prosteoaze || (PrisotnostSlonov && options.sloni) || (PrisotnostKrokodilov && options.krokodili) || (PraznaOaza && options.prazneoaze) || zadodat) {
                    CelicaZOazo.snapshotItem(0).innerHTML = testZaDodat;
                }
                else {
                    CelicaZOazo.snapshotItem(0).parentNode.parentNode.removeChild(CelicaZOazo.snapshotItem(0).parentNode);
                }
            }


            if (!DovoljenaAnalizaCropa) {
                return;
            }

            ProsteOaze.splice(0, 1);
            var progress = Math.round((1 - (ProsteOaze.length) / StOaz) * 100);
            document.getElementById("CropFinderProgress").innerHTML = "Analysing oases <progress value='" + progress + "' max='100'></progress> " + progress + "%";



            StC9C15 = ProstaC15.length + ProstaC9.length;
            if (ProstaC15.length > 0 || ProstaC9.length > 0) {
                CropFinderTimeout = setTimeout(function () { PridobiOazeT3(cropfinder) }, AnalizaCooldown);
            }
            else if (ProsteOaze.length > 0)//
            {
                CropFinderTimeout = setTimeout(function () { AnalizirajOazoT3(cropfinder) }, AnalizaCooldown);
            }
            else {
                AnaliziranElement = 0;
                document.getElementById("CropFinderProgress").innerHTML = "Finished";
                document.getElementById("MakeCropTableSortable").click();
                document.getElementById("CropFinderStop").style.display = "none";
                document.getElementById("CropFinderStart").style.display = "";
                document.getElementById("FilterCropTable").style.display = "";
                DovoljenaAnalizaCropa = false;
                DodajGumbDodajNaFarmlist();
            }
            return;


        },
        onerror: function (responseDetails) {

        },
        ontimeout: function (responseDetails) {

        },
        onabort: function (responseDetails) {

        }
    });
}


////////////////
//// analiza ///
////////////////
function AnalizirajEnoteDoma(doc, village) {
    console.log("AnalizirajEnoteDoma")
    var areagumb = doc.evaluate(".//div[contains(@class, 'container active')]/div[contains(@class, 'favorKey')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    console.log(areagumb.snapshotLength)
    if (areagumb.snapshotLength) {
        var idtaba=0;
        try
        {
            idtaba = areagumb.snapshotItem(0).getAttribute("class").match(/[\d\.]+/g)[0] * 1;
        }
        catch(err)
        {

        }
        console.log("tab " + idtaba)
        if (idtaba != 1) {
            return
        }
        else {
            console.log("pravi tab")
        }
    }
    else {
        log("no  tab result1", 5);
        return
    }

    try {
        //var ex = ".//span[@id='tp1']";
        //var servercasa = document.evaluate(ex, analizadiv, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

        var ServerCas = serverCas(doc)//servercasa.snapshotItem(0).innerHTML.split(":");
        var ServerCas2 = new Date();
        ServerCas2.setHours(ServerCas[0], ServerCas[1], ServerCas[2], 0);



        var ClientCas2 = new Date();
        ClientCas2.setMilliseconds(0);
        if (ServerCas[0] * 1 < 7 && ClientCas2.getHours() > 17)//+1
        {
            ServerCas2.setDate(ServerCas2.getDate() + 1);
        }
        else if (ClientCas2.getHours() < 7 && ServerCas[0] * 1 > 17)//-1
        {
            ServerCas2.setDate(ServerCas2.getDate() - 1);
        }
        RazlikaVCasih = ClientCas2.getTime() - ServerCas2.getTime();
        RazlikaVCasih = RazlikaVCasih / 1000;

    }
    catch (err) {
        if (RazlikaVCasih * 1 == "NaN") {
            RazlikaVCasih = 0;
        }
    }


    var ex = ".//td[@class='role']";
    var Meni = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);



    if (Meni.snapshotLength) {
        var ZadnjiPolozaj = -1;


        for (var i = 0; i < Meni.snapshotLength; i++) {

            var Tabela = Meni.snapshotItem(i);
            var Naslednji = Tabela.nextSibling;
            try {
                Naslednji.getElementsByTagName("a")[0];
            }
            catch (err) {
                Naslednji = Tabela.nextSibling.nextSibling;
            }
            var Link = Naslednji.getElementsByTagName("a")[0];
            ZadnjiPolozaj = Tabela.parentNode.parentNode.parentNode.offsetTop;
            try {
                if (Link.getAttribute("href").split("uid=").length > 1) {
                    if (Link.getAttribute("href").split("uid=")[1] == unsafeWindow.PLAYER.uid) {

                        //var Povezava365 = Tabela.childNodes[0].getAttribute("href");
                        var PraviNode = Tabela.parentNode.parentNode.parentNode;
                        if (TravianServer == 3) {
                            PraviNode = PraviNode.getElementsByTagName("tbody")[0];
                            PraviNode = PraviNode.getElementsByTagName("tr")[1];
                        }
                        else {
                            PraviNode = PraviNode.getElementsByTagName("tbody")[1];
                        }

                        var tdji = PraviNode.getElementsByTagName("td");
                        var TeEnote = [];
                        for (var j = 0; j < tdji.length; j++) {
                            unsafeWindow.PLAYER.getVillage(village).ENOTEDOMA[j] = tdji[j].innerHTML * 1;
                        }

                        if (tdji.length < 10) {
                            unsafeWindow.PLAYER.getVillage(village).ENOTEDOMA[10] = 0;
                        }
                        break;
                        var trenutencas = new Date();
                        unsafeWindow.PLAYER.getVillage(village).CASANALIZEENOT = trenutencas.getTime();
                    }

                }
            }
            catch (err)
            { }

        }

    }

}
function Analiza() {
    this.naloge = [];
    this.stevilonalog = 1;
    this.izvajam = false;
    this.linkireportov = new Array();
    this.reporti = new Array();
    this.idjireportov = new Array();


    this.preverilogin = function (doc)//poreveri login se za server 3******************************************************************
    {
        if (unsafeWindow.Stopped) {
            document.getElementById('ProgressBarDiv').style.display = 'none';
            this.izvajam = false;
            this.naloge = [];
            return;
        }

        if (doc.getElementsByName('login').length != 0 || (doc.getElementsByName('user').length != 0 && unsafeWindow.SERVERLINK.indexOf("86.58.69.167:8080/travian") > -1)) {
            try {
                analiziranje.naloge.splice(0, 0, ZadnjaNaloga);
            } catch (err) { }
            var login = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/login.php";
            frames[0].location.href = login;
            unsafeWindow.SpremeniStatus("Waiting for login");

            return false;
        }
        return true;

    }

    this.prihajajoceenote = function (village) {
    }



    this.enotenapoti = function (village) {
    }

    this.enotedoma = function (village)//****************************************************************
    {
        console.log("enotedoma")
        request(afterloadEnotedoma, "GET", unsafeWindow.http + "://" + unsafeWindow.PLAYER.server2 + "/dorf2.php", "", { "village": village })
        return
        var newdid = "&newdid=" + village;
        if (unsafeWindow.PLAYER.villages.length <= 1) {
            newdid = "";
        }
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {

            return;
        }
        //console.log("enotedoma")

        setTimeout(function () {

            GM.xmlHttpRequest({
                method: "GET",
                url: link + "/build.php?tt=1&id=39" + newdid,
                headers: {
                    Referer: link + "/build.php?gid=16"
                },
                onload: function (response1) {

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response1.responseText;

                    if (!analiziranje.preverilogin(doc)) {
                        setTimeout(function () {
                            analiziranje.izvedinaloge();
                        }, 60000);
                        return;
                    }
                    //"PLAYER.villages[1].ShraniTrgovanje({villageid:71786,type:trade,x:-5,y:73,woodEmpty:100,clayEmpty:100,ironEmpty:100,grainEmpty:100,option:0,optionValue:,woodAccept:0,clayAccept:0,ironAccept:0,grainAccept:0,wood:1,clay:0,iron:0,grain:0,time:0,joinwithprevious:false,tasknumber:220,active:true})"
                    //"PLAYER.villages[1].ShraniTrgovanje({villageid:71786,type:trade,x:-5,y:73,woodEmpty:100,clayEmpty:100,ironEmpty:100,grainEmpty:100,option:0,optionValue:,woodAccept:0,clayAccept:0,ironAccept:0,grainAccept:0,wood:1,clay:0,iron:0,grain:0,time:0,joinwithprevious:false,tasknumber:220,active:true})"
                    //{villageid:"71786",type:"trade",x:"-5",y:"73",woodEmpty:"100",clayEmpty:"100",ironEmpty:"100",grainEmpty:"100",option:"0",optionValue:"",woodAccept:"0",clayAccept:"0",ironAccept:"0",grainAccept:"0",wood:"1",clay:"0",iron:"0",grain:"0",time:"0",joinwithprevious:False,tasknumber:"220",active:True}	
                    switch (TravianServer) {
                        case 3:
                            var lesvvasi = doc.getElementById("l4").innerHTML;
                            var glinavvasi = doc.getElementById("l3").innerHTML;
                            var zelezovvasi = doc.getElementById("l2").innerHTML;
                            var zitovvasi = doc.getElementById("l1").innerHTML;
                            var CasZdaj = new Date();
                            unsafeWindow.PLAYER.getVillage(village).time = CasZdaj.getTime();
                            unsafeWindow.PLAYER.getVillage(village).woodP = doc.getElementById("l1").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(village).clayP = doc.getElementById("l2").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(village).ironP = doc.getElementById("l3").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(village).grainP = doc.getElementById("l4").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(village).warhouse = lesvvasi.split("/")[1] * 1;
                            unsafeWindow.PLAYER.getVillage(village).granary = zitovvasi.split("/")[1] * 1;
                            break;
                        case 4:
                            var lesvvasi = doc.getElementById("res").getElementsByTagName("span")[0].innerHTML;
                            var glinavvasi = doc.getElementById("res").getElementsByTagName("span")[1].innerHTML;
                            var zelezovvasi = doc.getElementById("res").getElementsByTagName("span")[2].innerHTML;
                            var zitovvasi = doc.getElementById("res").getElementsByTagName("span")[3].innerHTML;
                            try {
                                var zacetek = doc.body.innerHTML.indexOf("resources.production = {");
                                zacetek = doc.body.innerHTML.indexOf("{", zacetek);
                                var konec = doc.body.innerHTML.indexOf("}", zacetek);
                                var proizvodnja = eval("(" + doc.body.innerHTML.substring(zacetek, konec) + "})");
                                unsafeWindow.PLAYER.getVillage(village).woodP = proizvodnja.l1;
                                unsafeWindow.PLAYER.getVillage(village).clayP = proizvodnja.l2;
                                unsafeWindow.PLAYER.getVillage(village).ironP = proizvodnja.l3;
                                unsafeWindow.PLAYER.getVillage(village).grainP = proizvodnja.l4;
                            }
                            catch (err) { }
                            unsafeWindow.PLAYER.getVillage(village).warhouse = lesvvasi.split("/")[1] * 1;
                            unsafeWindow.PLAYER.getVillage(village).granary = zitovvasi.split("/")[1] * 1;
                            break;
                        case 4.2:
                            var lesvvasi = doc.getElementById("l1").innerHTML;
                            var glinavvasi = doc.getElementById("l2").innerHTML;
                            var zelezovvasi = doc.getElementById("l3").innerHTML;
                            var zitovvasi = doc.getElementById("l4").innerHTML;
                            var totalcrop = 100;
                            unsafeWindow.PLAYER.getVillage(village).warhouse = doc.getElementById("stockBarWarehouse").innerHTML * 1;
                            unsafeWindow.PLAYER.getVillage(village).granary = doc.getElementById("stockBarGranary").innerHTML * 1;
                            try { totalcrop = doc.getElementById("stockBarFreeCrop").innerHTML * 1; }
                            catch (err) { }
                            unsafeWindow.PLAYER.getVillage(village).grainTotal = totalcrop;
                            try {
                                var zacetek = doc.body.innerHTML.indexOf("resources.production = {");
                                zacetek = doc.body.innerHTML.indexOf("{", zacetek);
                                var konec = doc.body.innerHTML.indexOf("}", zacetek);
                                var proizvodnja = eval("(" + doc.body.innerHTML.substring(zacetek, konec) + "})");
                                unsafeWindow.PLAYER.getVillage(village).woodP = proizvodnja.l1;
                                unsafeWindow.PLAYER.getVillage(village).clayP = proizvodnja.l2;
                                unsafeWindow.PLAYER.getVillage(village).ironP = proizvodnja.l3;
                                unsafeWindow.PLAYER.getVillage(village).grainP = proizvodnja.l4;
                            }
                            catch (err) { }

                            break;
                    }
                    var CasZdaj = new Date();
                    unsafeWindow.PLAYER.getVillage(village).wood = lesvvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(village).clay = glinavvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(village).iron = zelezovvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(village).grain = zitovvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(village).time = CasZdaj.getTime();


                    var analizadiv = document.createElement("div");
                    analizadiv.innerHTML = response1.responseText;

                    analiziranje.preverilogin(doc);

                    try {
                        //var ex = ".//span[@id='tp1']";
                        //var servercasa = document.evaluate(ex, analizadiv, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                        var ServerCas = serverCas(doc)//servercasa.snapshotItem(0).innerHTML.split(":");
                        var ServerCas2 = new Date();
                        ServerCas2.setHours(ServerCas[0], ServerCas[1], ServerCas[2], 0);



                        var ClientCas2 = new Date();
                        ClientCas2.setMilliseconds(0);
                        if (ServerCas[0] * 1 < 7 && ClientCas2.getHours() > 17)//+1
                        {
                            ServerCas2.setDate(ServerCas2.getDate() + 1);
                        }
                        else if (ClientCas2.getHours() < 7 && ServerCas[0] * 1 > 17)//-1
                        {
                            ServerCas2.setDate(ServerCas2.getDate() - 1);
                        }
                        RazlikaVCasih = ClientCas2.getTime() - ServerCas2.getTime();
                        RazlikaVCasih = RazlikaVCasih / 1000;

                    }
                    catch (err) {
                        if (RazlikaVCasih * 1 == "NaN") {
                            RazlikaVCasih = 0;
                        }
                    }


                    var ex = ".//td[@class='role']";
                    var Meni = document.evaluate(ex, analizadiv, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);



                    if (Meni.snapshotLength) {
                        var ZadnjiPolozaj = -1;


                        for (var i = 0; i < Meni.snapshotLength; i++) {

                            var Tabela = Meni.snapshotItem(i);
                            var Naslednji = Tabela.nextSibling;
                            try {
                                Naslednji.getElementsByTagName("a")[0];
                            }
                            catch (err) {
                                Naslednji = Tabela.nextSibling.nextSibling;
                            }
                            var Link = Naslednji.getElementsByTagName("a")[0];
                            ZadnjiPolozaj = Tabela.parentNode.parentNode.parentNode.offsetTop;
                            try {
                                if (Link.getAttribute("href").split("uid=").length > 1) {
                                    if (Link.getAttribute("href").split("uid=")[1] == unsafeWindow.PLAYER.uid) {

                                        //var Povezava365 = Tabela.childNodes[0].getAttribute("href");
                                        var PraviNode = Tabela.parentNode.parentNode.parentNode;
                                        if (TravianServer == 3) {
                                            PraviNode = PraviNode.getElementsByTagName("tbody")[0];
                                            PraviNode = PraviNode.getElementsByTagName("tr")[1];
                                        }
                                        else {
                                            PraviNode = PraviNode.getElementsByTagName("tbody")[1];
                                        }

                                        var tdji = PraviNode.getElementsByTagName("td");
                                        var TeEnote = [];
                                        for (var j = 0; j < tdji.length; j++) {
                                            unsafeWindow.PLAYER.getVillage(village).ENOTEDOMA[j] = tdji[j].innerHTML * 1;
                                        }

                                        if (tdji.length < 10) {
                                            unsafeWindow.PLAYER.getVillage(village).ENOTEDOMA[10] = 0;
                                        }
                                        break;
                                        var trenutencas = new Date();
                                        unsafeWindow.PLAYER.getVillage(village).CASANALIZEENOT = trenutencas.getTime();
                                    }

                                }
                            }
                            catch (err)
                            { }

                        }

                    }
                    unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                    analiziranje.izvedinaloge();
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });

        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));

    }
    
    this.enotedoma2 = function (village)//****************************************************************
    {
        var newdid = "&newdid=" + village;
        if (unsafeWindow.PLAYER.villages.length <= 1) {
            newdid = "";
        }
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {

            return;
        }
        //console.log("enotedoma")

        setTimeout(function () {

            GM.xmlHttpRequest({
                method: "GET",
                url: link + "/build.php?tt=1&id=39" + newdid,
                headers: {
                    Referer: link + "/build.php?gid=16"
                },
                onload: function (response1) {

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response1.responseText;

                    
                    unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                    analiziranje.izvedinaloge();
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });

        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));

    }

    function afterloadEnotedoma(responseDetails, json, status, statusText, responseHeaders, doc, url, data)
    {
        var village2 = data["village"]
        if (unsafeWindow.Stopped) {
            addLog("Analysing", village2, "Bot was stopped. Analysing not completed.", unsafeWindow.PLAYER, 2);
            return
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        console.log("preverjenLogin: " + preverjenLogin)
        if (!preverjenLogin) {
            return
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village2) {
            var newdid = "?newdid=" + village2;

            try {
                var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

            }
            catch (err) {
                return;
            }
            request(afterloadEnotedoma, "GET", link + "/dorf2.php" + newdid, "", data)
            return;
        }
        var areagumb = doc.evaluate(".//area[contains(@href, 'build.php?') and contains(@href, 'id=39')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        console.log(".//area[contains(@href, 'build.php?') and contains(@href, 'id=39')]")
        if (areagumb.snapshotLength) {
            setTimeout(function () {
                request(afterloadEnotedoma2, "GET", unsafeWindow.http + "://" + unsafeWindow.PLAYER.server2 + "/" + areagumb.snapshotItem(0).getAttribute("href"), "", data)
            }, randomXToY(500, 1500))
        }
        else {
            log("no result1", 5);
            unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
            analiziranje.izvedinaloge();
            //console.log(task)
            //console.log(Stavbe[task.building])
            //addLog("Build", village.villageid, "Failed to build " + Stavbe[task.building][0][0] + " to level " + buildinglevel + "; Unable to find building link on " + d12 + " page.", PLAYER, 2);
            //setTimeoutStart(15000, 30000, PLAYER);
        }
        //request(afterloadEnotedoma2, "GET", link + "/dorf2.php", "", { "village": village })
    }

    function afterloadEnotedoma2(responseDetails, json, status, statusText, responseHeaders, doc, url, data) {
        var village2 = data["village"]
        console.log("data.alreadiyswitchedtab "+data.alreadiyswitchedtab)
        if (unsafeWindow.Stopped) {
            addLog("Analysing", village2, "Bot was stopped. Analysing not completed.", unsafeWindow.PLAYER, 2);
            return
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        console.log("preverjenLogin: " + preverjenLogin)
        if (!preverjenLogin) {
            return
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village2) {
            var newdid = "?newdid=" + village2;

            try {
                var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

            }
            catch (err) {
                return;
            }
            data.alreadiyswitchedtab = false;
            request(afterloadEnotedoma, "GET", link + "/dorf2.php" + newdid, "", data)
            return;
        }
        var areagumb = doc.evaluate(".//div[contains(@class, 'container active')]/div[contains(@class, 'favorKey')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        console.log(areagumb.snapshotLength)
        if (areagumb.snapshotLength) {
            var idtaba = areagumb.snapshotItem(0).getAttribute("class").match(/[\d\.]+/g)[0] * 1;
            console.log("tab " + idtaba)
            if (idtaba != 1 && !data.alreadiyswitchedtab)
            {
                data.alreadiyswitchedtab = true;
                console.log(unsafeWindow.http + "://" + unsafeWindow.PLAYER.server2 + "/build.php?tt=1&id=39")
                setTimeout(function () {
                    request(afterloadEnotedoma2, "GET", unsafeWindow.http + "://" + unsafeWindow.PLAYER.server2 + "/build.php?tt=1&id=39", "", data)
                }, randomXToY(500, 1500))
            }
            else
            {
                console.log("pravi tab")
                unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                analiziranje.izvedinaloge();
            }
        }
        else {
            log("no  tab result1", 5);
            unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
            analiziranje.izvedinaloge();
            /*console.log(task)
            console.log(Stavbe[task.building])
            addLog("Build", village.villageid, "Failed to build " + Stavbe[task.building][0][0] + " to level " + buildinglevel + "; Unable to find building link on " + d12 + " page.", PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);*/
        }
        //request(afterloadEnotedoma, "GET", link + "/dorf2.php", "", { "village": village })
    }



    


    this.dorf2 = function (village)//*************************************************************************
    {
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {
            return;
        }
        request(dorf2T4Afterrequest, "GET", link + "/dorf2.php", "", { "village": village })
        return

        var newdid = "?newdid=" + village;

        if (unsafeWindow.PLAYER.villages.length <= 1) {
            newdid = "";
        }
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {
            return;
        }

        setTimeout(function () {
            GM.xmlHttpRequest({
                method: "GET",
                url: link + "/dorf2.php" + newdid,
                headers: {
                    Referer: link + "/dorf2.php"
                },
                onload: function (response1) {

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response1.responseText;

                    if (!analiziranje.preverilogin(doc)) {
                        setTimeout(function () {
                            analiziranje.izvedinaloge();
                        }, 60000);
                        return;
                    }

                    switch (TravianServer) {
                        case 3:
                            var lesvvasi = doc.getElementById("l4").innerHTML;
                            var glinavvasi = doc.getElementById("l3").innerHTML;
                            var zelezovvasi = doc.getElementById("l2").innerHTML;
                            var zitovvasi = doc.getElementById("l1").innerHTML;
                            var CasZdaj = new Date();
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).time = CasZdaj.getTime();
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = doc.getElementById("l1").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = doc.getElementById("l2").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = doc.getElementById("l3").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = doc.getElementById("l4").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = lesvvasi.split("/")[1] * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = zitovvasi.split("/")[1] * 1;
                            break;
                        case 4:
                            var lesvvasi = doc.getElementById("res").getElementsByTagName("span")[0].innerHTML;
                            var glinavvasi = doc.getElementById("res").getElementsByTagName("span")[1].innerHTML;
                            var zelezovvasi = doc.getElementById("res").getElementsByTagName("span")[2].innerHTML;
                            var zitovvasi = doc.getElementById("res").getElementsByTagName("span")[3].innerHTML;
                            try {
                                var zacetek = doc.body.innerHTML.indexOf("resources.production = {");
                                zacetek = doc.body.innerHTML.indexOf("{", zacetek);
                                var konec = doc.body.innerHTML.indexOf("}", zacetek);
                                var proizvodnja = eval("(" + doc.body.innerHTML.substring(zacetek, konec) + "})");
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = proizvodnja.l1;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = proizvodnja.l2;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = proizvodnja.l3;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = proizvodnja.l4;
                            }
                            catch (err) { }
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = lesvvasi.split("/")[1] * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = zitovvasi.split("/")[1] * 1;
                            var totalcrop = 100;
                            try { totalcrop = doc.getElementById("l5").innerHTML * 1; }
                            catch (err) { }
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainTotal = totalcrop;
                            break;
                        case 4.2:
                            var lesvvasi = doc.getElementById("l1").innerHTML;
                            var glinavvasi = doc.getElementById("l2").innerHTML;
                            var zelezovvasi = doc.getElementById("l3").innerHTML;
                            var zitovvasi = doc.getElementById("l4").innerHTML;
                            var totalcrop = 100;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = doc.getElementById("stockBarWarehouse").innerHTML * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = doc.getElementById("stockBarGranary").innerHTML * 1;
                            try { totalcrop = doc.getElementById("stockBarFreeCrop").innerHTML * 1; }
                            catch (err) { }
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainTotal = totalcrop;
                            try {
                                var zacetek = doc.body.innerHTML.indexOf("resources.production = {");
                                zacetek = doc.body.innerHTML.indexOf("{", zacetek);
                                var konec = doc.body.innerHTML.indexOf("}", zacetek);
                                var proizvodnja = eval("(" + doc.body.innerHTML.substring(zacetek, konec) + "})");
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = proizvodnja.l1;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = proizvodnja.l2;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = proizvodnja.l3;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = proizvodnja.l4;
                            }
                            catch (err) { }
                            break;
                    }
                    var CasZdaj = new Date();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).wood = lesvvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clay = glinavvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).iron = zelezovvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grain = zitovvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).time = CasZdaj.getTime();
                    var CasKoncanja1 = [0, 0];

                    var SpanTimer = doc.evaluate(".//span[contains(@id, 'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (SpanTimer.snapshotLength == 0) {
                        SpanTimer = doc.evaluate(".//span[contains(@class, 'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    }
                    var StavbeKiSeGradijo = [];
                    var Stavba1 = [0, 0];
                    var Stavba2 = [0, 0];
                    if (SpanTimer.snapshotLength == 0) {
                        var DatumKoncanja1 = new Date();
                        var DatumKoncanja2 = new Date();
                        var Koncan1 = "0,0" + ":" + DatumKoncanja1.getDate() + ":" + DatumKoncanja1.getMonth() + ":" + DatumKoncanja1.getFullYear() + ":" + DatumKoncanja1.getHours() + ":" + DatumKoncanja1.getMinutes() + ":" + DatumKoncanja1.getSeconds();
                        var Koncan2 = "0,0" + ":" + DatumKoncanja2.getDate() + ":" + DatumKoncanja2.getMonth() + ":" + DatumKoncanja2.getFullYear() + ":" + DatumKoncanja2.getHours() + ":" + DatumKoncanja2.getMinutes() + ":" + DatumKoncanja2.getSeconds();
                        var DatumKoncanjaGradnje = Koncan1 + "/" + Koncan2;
                    }
                    else {


                        Timerji: for (var TaTimer = 0; TaTimer < SpanTimer.snapshotLength; TaTimer++) {
                            try {

                                if (TravianServer == 4.2) {
                                    var StopnjaStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("lvl");

                                    if (StopnjaStavbe.length == 0) {
                                        continue Timerji;
                                    }
                                }
                                else {
                                    var StopnjaStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.childNodes[1].innerHTML.split(" ");
                                    StopnjaStavbe = StopnjaStavbe[StopnjaStavbe.length - 1].split(")").join("").split("</span>").join("");
                                    if (StopnjaStavbe * 1 + "" == "NaN" || StopnjaStavbe + "" == "") {
                                        continue Timerji;
                                    }
                                }


                                if (TravianServer == 4.2) {
                                    try {
                                        SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].removeChild(SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].getElementsByTagName("span")[0]);
                                    }
                                    catch (err) {
                                    }
                                    var ImeStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].innerHTML.split(" <span")[0];

                                    while (ImeStavbe.charCodeAt(0) == 32 || ImeStavbe.charCodeAt(0) == 10 || ImeStavbe.charCodeAt(0) == 9) {
                                        ImeStavbe = ImeStavbe.substring(1);
                                    }
                                    while (ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 32 || ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 10 || ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 9) {
                                        ImeStavbe = ImeStavbe.substring(0, ImeStavbe.length - 2);
                                    }
                                }
                                else {
                                    var ImeStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.childNodes[1].innerHTML.split(" (")[0].split(" <span")[0];
                                }
                                var Pirmerjalnik = "(" + unsafeWindow.IMENAPOLJ + ")";

                                var test = ImeStavbe.toLowerCase().match(Pirmerjalnik.toLowerCase());

                                if (test != null) {
                                    var TipStavbe = 1;
                                }
                                else {
                                    var TipStavbe = 5;
                                }




                                var casKoncanja = SpanTimer.snapshotItem(TaTimer).innerHTML;
                                var UraKoncanja = casKoncanja.split(":")[0];
                                var MinutaKoncanja = casKoncanja.split(":")[1];
                                var SekundaKoncanja = casKoncanja.split(":")[2];
                                var CasKoncanja = UraKoncanja * 3600 + MinutaKoncanja * 60 + SekundaKoncanja * 1;
                            }
                            catch (err) {
                                var TipStavbe = 0;
                            }
                            if (TipStavbe == 0) {
                            }
                            else if (TipStavbe <= 4 && CasKoncanja > CasKoncanja1[0]) {
                                CasKoncanja1[0] = CasKoncanja;
                                Stavba1 = [TipStavbe, StopnjaStavbe];
                            }
                            else if (TipStavbe > 4 && CasKoncanja > CasKoncanja1[1]) {
                                CasKoncanja1[1] = CasKoncanja;
                                Stavba2 = [TipStavbe, StopnjaStavbe];
                            }

                        }

                        var DatumKoncanja1 = new Date();
                        DatumKoncanja1.setSeconds(DatumKoncanja1.getSeconds() + CasKoncanja1[0]);
                        var DatumKoncanja2 = new Date();
                        DatumKoncanja2.setSeconds(DatumKoncanja2.getSeconds() + CasKoncanja1[1]);

                    }
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).BuildingTime = DatumKoncanja2.getTime();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).FieldTime = DatumKoncanja1.getTime();
                    var sttt = 0;
                    while (unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).POLJA[19] && sttt < 30) {
                        unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).POLJA.splice(19, 1);
                    }


                    var CasZdaj = new Date();
                    var divZPolji = doc.getElementById("village_map");

                    var SlikePolj = divZPolji.getElementsByTagName("img");
                    var Polja = [[0, 0, 0]];
                    var PoljaZaShranjevanje = CasZdaj.getDay() + ":" + CasZdaj.getMonth() + ":" + CasZdaj.getFullYear() + ":" + CasZdaj.getHours() + ":" + CasZdaj.getMinutes() + ":" + CasZdaj.getSeconds();
                    var area = doc.getElementsByTagName("area");
                    for (var i = 0; i < SlikePolj.length - 2; i++) {
                        var TipSlike = SlikePolj[i].getAttribute("class");
                        //
                        var TipSlike2 = SlikePolj[i].getAttribute("alt");
                        //

                        var doddd = 0;
                        if (TravianServer == 3) {
                            doddd = 2;
                        }
                        try {//building d1 g23
                            TipSlike = TipSlike.split("building").join("");
                            var mesto1999 = TipSlike.lastIndexOf('g');
                            if (mesto1999 == -1) {
                                ImePolja = 0;
                            }
                            else {
                                mesto1999 += 1;
                                var ImePolja = TipSlike.substring(mesto1999);
                                ImePolja = ImePolja.match(/[\d\.]+/g)[0] * 1;
                                if (isNaN(ImePolja - 0)) {
                                    ImePolja = 0;
                                }
                            }
                        }
                        catch (Error) {
                            var ImePolja = 0;
                        }

                        var IdPolja = i + 19;
                        if (IdPolja > 40) {
                            break;
                        }
                        try {
                            var StopnjaPolja = TipSlike2.match(/[\d\.]+/g)[0] * 1;
                        }
                        catch (Error) {
                            var StopnjaPolja = 0;
                        }
                        if (StopnjaPolja + "" == "undefined" || StopnjaPolja == undefined || StopnjaPolja + "" == "NaN" || StopnjaPolja == NaN) {
                            StopnjaPolja = 0;
                        }
                        Polja[IdPolja] = [IdPolja, ImePolja, StopnjaPolja];
                        //Polja.push([IdPolja, ImePolja, StopnjaPolja]);
                        //
                        var underconstruction = false;
                        try {
                            var diviStopenj = doc.getElementById("levels").childNodes
                            for (var qqq = 0; qqq < diviStopenj.length; qqq++) {
                                if (diviStopenj[qqq].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == IdPolja * 1 && diviStopenj[qqq].getAttribute("class").indexOf("underConstruction") > -1) {
                                    underconstruction = true;
                                    var polje2 = {
                                        id: IdPolja * 1,
                                        name: ImePolja * 1,
                                        level: StopnjaPolja * 1,
                                        underconstruction: underconstruction
                                    }

                                }
                            }
                        }
                        catch (err) {

                        }
                        try {

                            var IdPolja = area[i + doddd].getAttribute("href").split("id=")[1].match(/[\d\.]+/g)[0];

                        }
                        catch (err) {
                            continue;
                        }
                        var polje = {
                            id: IdPolja * 1,
                            name: ImePolja * 1,
                            level: StopnjaPolja * 1,
                            underconstruction: underconstruction
                        }

                        unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).POLJA[IdPolja] = cloneInto(polje, unsafeWindow);
                    }

                    for (var i = 1; i <= 40; i++) {

                        if (!unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).POLJA[i]) {
                            var polje2 = {
                                id: i,
                                name: 0,
                                level: 0,
                                underconstruction: false
                            }
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).POLJA[i] = cloneInto(polje2, unsafeWindow);
                        }
                    }

                    /*
                    this.INTERVALGRADNJA = 60;
                    this.INTERVALTRZNICA = 30;
                    this.INTERVALURJENJE = 60;
                    this.INTERVALFESTIVAL = 180;
                    this.INTERVALARMOR = 60;
                    this.CASANALIZEGRADNJA1 = 0;
                    this.CASANALIZEGRADNJA2 = 0;
                    this.CASANALIZETRZNICA = 0;
                    this.CASANALIZEURJENJE = 0;
                    this.CASANALIZEFESTIVAL = 0;
                    this.CASANALIZEARMOR = 0;
    
                    */

                    var naselje = unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow));
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALGRADNJA), Math.round(66000 * naselje.INTERVALGRADNJA));
                    naselje.CASANALIZEGRADNJA2 = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALURJENJE), Math.round(66000 * naselje.INTERVALURJENJE));
                    naselje.CASANALIZEURJENJE = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALFESTIVAL), Math.round(66000 * naselje.INTERVALFESTIVAL));
                    naselje.CASANALIZEFESTIVAL = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALARMOR), Math.round(66000 * naselje.INTERVALARMOR));
                    naselje.CASANALIZEARMOR = novCas;

                    unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                    analiziranje.izvedinaloge();
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });

        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));

    }


    this.dorf1 = function (village) {
        switch (TravianServer) {
            case 3:
                this.dorf1T3(village);
                break;
            case 4:

                this.dorf1T4(village);
                break;
            case 4.2:
                this.dorf1T42(village);
                break;
        }

    }

    this.dorf1T3 = function (village)//***************************************************
    {
        var newdid = "?newdid=" + village;
        if (unsafeWindow.PLAYER.villages.length <= 1) {
            newdid = "";
        }
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {
            return;
        }

        setTimeout(function () {
            GM.xmlHttpRequest({
                method: "GET",
                url: link + "/dorf1.php" + newdid,
                headers: {
                    //"Content-Type" : "application/x-www-form-urlencoded" 
                    Referer: link + "/dorf1.php"
                },
                //data: "is_correct="+pravilno+"&password="+password+"&username="+username+"&ticket="+id,
                onload: function (response1) {

                    var analizadiv = document.createElement("div");
                    analizadiv.innerHTML = response1.responseText;

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response1.responseText;

                    if (!analiziranje.preverilogin(doc)) {
                        setTimeout(function () {
                            analiziranje.izvedinaloge();
                        }, 60000);
                        return;
                    }

                    CasZdaj = new Date();
                    var Surovine = "";
                    var lesvvasi = doc.getElementById("l4").innerHTML;
                    var glinavvasi = doc.getElementById("l3").innerHTML;
                    var zelezovvasi = doc.getElementById("l2").innerHTML;
                    var zitovvasi = doc.getElementById("l1").innerHTML;

                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).wood = lesvvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clay = glinavvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).iron = zelezovvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grain = zitovvasi.split("/")[0] * 1;

                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = lesvvasi.split("/")[1] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = zitovvasi.split("/")[1] * 1;

                    var CasZdaj = new Date();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).time = CasZdaj.getTime();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = doc.getElementById("l1").getAttribute("title") * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = doc.getElementById("l2").getAttribute("title") * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = doc.getElementById("l3").getAttribute("title") * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = doc.getElementById("l4").getAttribute("title") * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainTotal = 100;


                    var divPolja = doc.evaluate(".//map[@id='rx']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (divPolja.snapshotLength) {
                        divPolja = divPolja.snapshotItem(0);

                        /*
                        1: 3-3-3-9
                        2: 3-4-5-6
                        3: 4-4-4-6
                        4: 4-5-3-6
                        5: 5-3-4-6
                        6: 1-1-1-15
                        7: 4-4-3-7
                        8: 3-4-4-7
                        9: 4-3-4-7
                        10: 3-5-4-6
                        11: 4-3-5-6
                        12: 5-4-3-6
        
                        TipiPokarajin
                        */
                        var vsebina = doc.getElementById("village_map");
                        var TipPokrajine = vsebina.getAttribute("class");
                        var StevilkaPokrajine = TipPokrajine.match(/[\d\.]+/g)[0] * 1;

                        var SlikePolj = divPolja.getElementsByTagName("area");
                        var Polja = [[0, 0, 0]];
                        var ShranjujemPolja = "";
                        var PoljaZaShranjevanje = CasZdaj.getDate() + ":" + CasZdaj.getMonth() + ":" + CasZdaj.getFullYear() + ":" + CasZdaj.getHours() + ":" + CasZdaj.getMinutes() + ":" + CasZdaj.getSeconds();

                        for (var i = 0; i < SlikePolj.length - 1; i++) {
                            var IdPolja = i + 1; //TipSlike.substring(zacetek,konec)*1;
                            var TipPolja = SlikePolj[i].getAttribute("alt");
                            if (!TipPolja) {
                                TipPolja = SlikePolj[i].getAttribute("title");
                            }
                            var ImePolja = TipiPokarajin[StevilkaPokrajine][IdPolja];
                            var StopnjaPolja = TipPolja.match(/[\d\.]+/g)[0] * 1;
                            TipPolja = TipPolja.split(StopnjaPolja).join("");
                            TipPolja = TipPolja.split(" ");
                            TipPolja.splice(TipPolja.length - 2, 2);
                            TipPolja = TipPolja.join(" ");
                            Polja.push([IdPolja, ImePolja, StopnjaPolja]); //                        <area href="build.php?id=1" coords="101,33,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=2" coords="165,32,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=3" coords="224,46,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=4" coords="46,63,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=5" coords="138,74,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=6" coords="203,94,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=7" coords="262,86,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=8" coords="31,117,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=9" coords="83,110,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=10" coords="214,142,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=11" coords="269,146,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=12" coords="42,171,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=13" coords="93,164,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=14" coords="160,184,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=15" coords="239,199,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=16" coords="87,217,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=17" coords="140,231,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=18" coords="190,232,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="dorf2.php" coords="144,131,36" shape="circle" title="Center naselja" alt="" />


                            if (ShranjujemPolja == "") {
                                ShranjujemPolja = TipPolja;
                            }
                            else {
                                ShranjujemPolja += "|" + TipPolja;
                            }
                            var underconstruction = false;
                            try {
                            }
                            catch (err) {
                                if (vsebina.childNodes[i * 2 + 1].getAttribute("class").indexOf("underConstruction") > -1) {
                                    underconstruction = true;
                                    ({ id: IdPolja * 1, name: ImePolja * 1, level: StopnjaPolja * 1, underconstruction: underconstruction })
                                }
                            }
                            var polje = {
                                id: IdPolja * 1,
                                name: ImePolja * 1,
                                level: StopnjaPolja * 1,
                                underconstruction: underconstruction
                            }
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).POLJA[cloneInto(IdPolja, unsafeWindow)] = cloneInto(polje, unsafeWindow);

                        }

                        unsafeWindow.IMENAPOLJ = ShranjujemPolja;



                        divPolja = null;
                        Polja = null;
                        TipPokrajine = null;
                    }
                    else {
                        alert("Error analysing fields. Please contact administrator with this error on forum");
                    }


                    var CasKoncanja1 = [0, 0];

                    var SpanTimer = doc.evaluate(".//span[contains(@id, 'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                    var StavbeKiSeGradijo = [];
                    var Stavba1 = [0, 0];
                    var Stavba2 = [0, 0];
                    if (SpanTimer.snapshotLength == 0) {
                        var DatumKoncanja1 = new Date();
                        var DatumKoncanja2 = new Date();
                        var Koncan1 = "0,0" + ":" + DatumKoncanja1.getDate() + ":" + DatumKoncanja1.getMonth() + ":" + DatumKoncanja1.getFullYear() + ":" + DatumKoncanja1.getHours() + ":" + DatumKoncanja1.getMinutes() + ":" + DatumKoncanja1.getSeconds();
                        var Koncan2 = "0,0" + ":" + DatumKoncanja2.getDate() + ":" + DatumKoncanja2.getMonth() + ":" + DatumKoncanja2.getFullYear() + ":" + DatumKoncanja2.getHours() + ":" + DatumKoncanja2.getMinutes() + ":" + DatumKoncanja2.getSeconds();
                        var DatumKoncanjaGradnje = Koncan1 + "/" + Koncan2;
                    }
                    else {


                        Timerji: for (var TaTimer = 0; TaTimer < SpanTimer.snapshotLength; TaTimer++) {
                            try {
                                var ImeStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.childNodes[1].innerHTML.split(" (")[0].split(" <span")[0];
                                var Pirmerjalnik = "(" + unsafeWindow.IMENAPOLJ + ")";


                                var test = ImeStavbe.toLowerCase().match(Pirmerjalnik.toLowerCase());

                                if (test != null) {
                                    var TipStavbe = 1;
                                }
                                else {
                                    var TipStavbe = 5;
                                }


                                var StopnjaStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.childNodes[1].innerHTML.split(" ");
                                StopnjaStavbe = StopnjaStavbe[StopnjaStavbe.length - 1].split(")").join("").split("</span>").join("");
                                if (StopnjaStavbe * 1 + "" == "NaN" || StopnjaStavbe + "" == "") {
                                    continue Timerji;
                                }
                                var casKoncanja = SpanTimer.snapshotItem(TaTimer).innerHTML;
                                var UraKoncanja = casKoncanja.split(":")[0];
                                var MinutaKoncanja = casKoncanja.split(":")[1];
                                var SekundaKoncanja = casKoncanja.split(":")[2];
                                var CasKoncanja = UraKoncanja * 3600 + MinutaKoncanja * 60 + SekundaKoncanja * 1;
                            }
                            catch (err) {
                                var TipStavbe = 0;
                            }
                            if (TipStavbe == 0) {
                            }
                            else if (TipStavbe <= 4 && CasKoncanja > CasKoncanja1[0]) {
                                CasKoncanja1[0] = CasKoncanja;
                                Stavba1 = [TipStavbe, StopnjaStavbe];
                            }
                            else if (TipStavbe > 4 && CasKoncanja > CasKoncanja1[1]) {
                                CasKoncanja1[1] = CasKoncanja;
                                Stavba2 = [TipStavbe, StopnjaStavbe];
                            }

                        }

                        var DatumKoncanja1 = new Date();
                        DatumKoncanja1.setSeconds(DatumKoncanja1.getSeconds() + CasKoncanja1[0]);
                        var DatumKoncanja2 = new Date();
                        DatumKoncanja2.setSeconds(DatumKoncanja2.getSeconds() + CasKoncanja1[1]);

                    }
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).BuildingTime = DatumKoncanja2.getTime();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).FieldTime = DatumKoncanja1.getTime();


                    /*
                    this.INTERVALGRADNJA = 60;
                    this.INTERVALTRZNICA = 30;
                    this.INTERVALURJENJE = 60;
                    this.INTERVALFESTIVAL = 180;
                    this.INTERVALARMOR = 60;
                    this.CASANALIZEGRADNJA1 = 0;
                    this.CASANALIZEGRADNJA2 = 0;
                    this.CASANALIZETRZNICA = 0;
                    this.CASANALIZEURJENJE = 0;
                    this.CASANALIZEFESTIVAL = 0;
                    this.CASANALIZEARMOR = 0;
    
                    */

                    var naselje = unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow));
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALGRADNJA), Math.round(66000 * naselje.INTERVALGRADNJA));
                    naselje.CASANALIZEGRADNJA1 = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALURJENJE), Math.round(66000 * naselje.INTERVALURJENJE));
                    naselje.CASANALIZEURJENJE = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALFESTIVAL), Math.round(66000 * naselje.INTERVALFESTIVAL));
                    naselje.CASANALIZEFESTIVAL = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALARMOR), Math.round(66000 * naselje.INTERVALARMOR));
                    naselje.CASANALIZEARMOR = novCas;

                    setTimeout(function () {
                        unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                        analiziranje.izvedinaloge();
                    }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });

        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));

    }


    //request(callbackfunction, type, url, data)
    //callbackfunction(responseDetails, responseDetails.json, responseDetails.status, responseDetails.statusText, responseDetails.responseHeaders, doc, url);
    function dorf1T4Afterrequest(responseDetails, json, status, statusText, responseHeaders, doc, url, data)
    {
        var village2 = data.village
        //var village = unsafeWindow.PLAYER.getVillage(cloneInto(village2, unsafeWindow))
        console.log("dorf1T4Afterrequest")
        if (unsafeWindow.Stopped) {
            addLog("Analysing", village2, "Bot was stopped. Analysing not completed.", unsafeWindow.PLAYER, 2);
            return
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        console.log("preverjenLogin: " + preverjenLogin)
        if (!preverjenLogin) {
            return
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village2) {
            var newdid = "?newdid=" + village2;
          
            try {
                var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

            }
            catch (err) {
                return;
            }
            request(dorf1T4Afterrequest, "GET", link + "/dorf1.php" + newdid, "", data)
            return;
        }
        addLog("Analysing", village2, "Analysing dorf1 successful.", unsafeWindow.PLAYER, 1, false);
        unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
        analiziranje.izvedinaloge();
    }

    function dorf2T4Afterrequest(responseDetails, json, status, statusText, responseHeaders, doc, url, data) {
        var village2 = data.village
        //var village = unsafeWindow.PLAYER.getVillage(cloneInto(village2, unsafeWindow))
        console.log("dorf2T4Afterrequest")
        //console.log(village)
        if (unsafeWindow.Stopped) {
            addLog("Analysing", village2, "Bot was stopped. Analysing not completed.", unsafeWindow.PLAYER, 2);
            return
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        if (!preverjenLogin) {
            return
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village2) {
            var newdid = "?newdid=" + village2;
            try {
                var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

            }
            catch (err) {
                return;
            }
            request(dorf2T4Afterrequest, "GET", link + "/dorf2.php" + newdid, "", data)
            return;
        }
        addLog("Analysing", village2, "Analysing dorf2 successful.", unsafeWindow.PLAYER, 1, false);
        unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
        analiziranje.izvedinaloge();
    }

    this.dorf1T4 = function (village) {
        //alert("analysing dorf1 T4")
        var newdid = "?newdid=" + village;
        if (unsafeWindow.PLAYER.villages.length <= 1) {
            newdid = "";
        }
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {
            return;
        }

        setTimeout(function () {
            GM.xmlHttpRequest({
                method: "GET",
                url: link + "/dorf1.php" + newdid,
                headers: {
                    Referer: link + "/dorf1.php"
                },
                onload: function (response1) {
                    var analizadiv = document.createElement("div");
                    analizadiv.innerHTML = response1.responseText;

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response1.responseText;

                    if (!analiziranje.preverilogin(doc)) {
                        setTimeout(function () {
                            analiziranje.izvedinaloge();
                        }, 60000);
                        return;
                    }


                    var Zdaj = new Date();

                    var ServerCas = serverCas(doc);
                    var ServerCas1 = new Date();
                    ServerCas1.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    var ServerCas2 = new Date();
                    ServerCas2.setDate(ServerCas2.getDate() + 1);
                    ServerCas2.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    var ServerCas3 = new Date();
                    ServerCas3.setDate(ServerCas3.getDate() - 1);
                    ServerCas3.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    var MinRazlika = ServerCas1.getTime() - Zdaj.getTime();

                    if (Math.abs(ServerCas2.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                        MinRazlika = ServerCas2.getTime() - Zdaj.getTime();
                    }
                    if (Math.abs(ServerCas3.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                        MinRazlika = ServerCas3.getTime() - Zdaj.getTime();
                    }

                    unsafeWindow.PLAYER.timedif = MinRazlika;


                    CasZdaj = new Date();
                    var Surovine = "";
                    var lesvvasi = doc.getElementById("res").getElementsByTagName("span")[0].innerHTML;
                    var glinavvasi = doc.getElementById("res").getElementsByTagName("span")[1].innerHTML;
                    var zelezovvasi = doc.getElementById("res").getElementsByTagName("span")[2].innerHTML;
                    var zitovvasi = doc.getElementById("res").getElementsByTagName("span")[3].innerHTML;

                    var totalcrop = 100;
                    try { totalcrop = doc.getElementById("l5").innerHTML * 1; }
                    catch (err) { }

                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainTotal = totalcrop;

                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).wood = lesvvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clay = glinavvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).iron = zelezovvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grain = zitovvasi.split("/")[0] * 1;

                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = lesvvasi.split("/")[1] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = zitovvasi.split("/")[1] * 1;

                    var Produkcija = [0, 0, 0, 0];

                    var TabelaProdukcija = doc.getElementById("production"); //TabelaProdukcija.snapshotItem(0);
                    var ElementiTabele = doc.evaluate(".//td[@class='num']", TabelaProdukcija, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (ElementiTabele.snapshotLength) {
                        for (var elementTabele = 0; elementTabele < ElementiTabele.snapshotLength; elementTabele++) {
                            Produkcija[elementTabele] = ElementiTabele.snapshotItem(elementTabele).innerHTML * 1;

                        }
                    }


                    TabelaProdukcija = null;
                    ElementiTabele = null;

                    var proizvodnjales = Produkcija[0] * 1;
                    var proizvodnjaglina = Produkcija[1] * 1;
                    var proizvodnjazelezo = Produkcija[2] * 1;
                    var proizvodnjazito = Produkcija[3] * 1;

                    var CasZdaj = new Date();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).time = CasZdaj.getTime();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = proizvodnjales;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = proizvodnjaglina;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = proizvodnjazelezo;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = proizvodnjazito;


                    var divPolja = doc.evaluate(".//map[@id='rx']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (divPolja.snapshotLength) {
                        divPolja = divPolja.snapshotItem(0);

                        /*
                        1: 3-3-3-9
                        2: 3-4-5-6
                        3: 4-4-4-6
                        4: 4-5-3-6
                        5: 5-3-4-6
                        6: 1-1-1-15
                        7: 4-4-3-7
                        8: 3-4-4-7
                        9: 4-3-4-7
                        10: 3-5-4-6
                        11: 4-3-5-6
                        12: 5-4-3-6
        
                        TipiPokarajin
                        */
                        var vsebina = doc.getElementById("village_map");
                        var TipPokrajine = vsebina.getAttribute("class");
                        var StevilkaPokrajine = TipPokrajine.match(/[\d\.]+/g)[0] * 1;

                        var SlikePolj = divPolja.getElementsByTagName("area");
                        var Polja = [[0, 0, 0]];
                        var ShranjujemPolja = "";
                        var PoljaZaShranjevanje = CasZdaj.getDate() + ":" + CasZdaj.getMonth() + ":" + CasZdaj.getFullYear() + ":" + CasZdaj.getHours() + ":" + CasZdaj.getMinutes() + ":" + CasZdaj.getSeconds();
                        for (var i = 0; i < SlikePolj.length - 1; i++) {
                            var IdPolja = i + 1; //TipSlike.substring(zacetek,konec)*1;
                            var TipPolja = SlikePolj[i].getAttribute("alt");
                            var ImePolja = TipiPokarajin[StevilkaPokrajine][IdPolja];
                            var StopnjaPolja = TipPolja.match(/[\d\.]+/g)[0] * 1;
                            Polja.push([IdPolja, ImePolja, StopnjaPolja]); //                        <area href="build.php?id=1" coords="101,33,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=2" coords="165,32,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=3" coords="224,46,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=4" coords="46,63,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=5" coords="138,74,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=6" coords="203,94,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=7" coords="262,86,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=8" coords="31,117,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=9" coords="83,110,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=10" coords="214,142,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=11" coords="269,146,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=12" coords="42,171,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=13" coords="93,164,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=14" coords="160,184,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=15" coords="239,199,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=16" coords="87,217,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=17" coords="140,231,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=18" coords="190,232,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="dorf2.php" coords="144,131,36" shape="circle" title="Center naselja" alt="" />
                            try {
                                TipPolja = SlikePolj[i].getAttribute("title").split("<b>")[1].split("</b>")[0];
                            }
                            catch (err) {
                                TipPolja = SlikePolj[i].getAttribute("title").split(" <span")[0];
                            }
                            if (ShranjujemPolja == "") {
                                ShranjujemPolja = TipPolja;
                            }
                            else {
                                ShranjujemPolja += "|" + TipPolja;
                            }
                            var underconstruction = false;
                            try {
                                if (vsebina.childNodes[i * 2 + 1].getAttribute("class").indexOf("underConstruction") > -1) {
                                    underconstruction = true;
                                }
                            }
                            catch (err) {
                            }
                            var polje = {
                                id: IdPolja * 1,
                                name: ImePolja * 1,
                                level: StopnjaPolja * 1,
                                underconstruction: underconstruction
                            }

                            //PoljaZaShranjevanje+="|"+IdPolja+","+ImePolja+","+StopnjaPolja;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).POLJA[IdPolja] = cloneInto(polje, unsafeWindow);

                        }

                        unsafeWindow.IMENAPOLJ = ShranjujemPolja;



                        divPolja = null;
                        Polja = null;
                        TipPokrajine = null;
                    }
                    else {
                        alert("Error analysing fields. Please contact administrator with this error on forum");
                    }


                    var CasKoncanja1 = [0, 0];

                    var SpanTimer = doc.evaluate(".//span[contains(@id, 'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                    var StavbeKiSeGradijo = [];
                    var Stavba1 = [0, 0];
                    var Stavba2 = [0, 0];
                    if (SpanTimer.snapshotLength == 0) {
                        var DatumKoncanja1 = new Date();
                        var DatumKoncanja2 = new Date();
                        var Koncan1 = "0,0" + ":" + DatumKoncanja1.getDate() + ":" + DatumKoncanja1.getMonth() + ":" + DatumKoncanja1.getFullYear() + ":" + DatumKoncanja1.getHours() + ":" + DatumKoncanja1.getMinutes() + ":" + DatumKoncanja1.getSeconds();
                        var Koncan2 = "0,0" + ":" + DatumKoncanja2.getDate() + ":" + DatumKoncanja2.getMonth() + ":" + DatumKoncanja2.getFullYear() + ":" + DatumKoncanja2.getHours() + ":" + DatumKoncanja2.getMinutes() + ":" + DatumKoncanja2.getSeconds();
                        var DatumKoncanjaGradnje = Koncan1 + "/" + Koncan2;
                    }
                    else {


                        Timerji: for (var TaTimer = 0; TaTimer < SpanTimer.snapshotLength; TaTimer++) {
                            try {
                                var ImeStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.childNodes[1].innerHTML.split(" (")[0].split(" <span")[0];
                                var Pirmerjalnik = "(" + unsafeWindow.IMENAPOLJ + ")";


                                var test = ImeStavbe.toLowerCase().match(Pirmerjalnik.toLowerCase());

                                if (test != null) {
                                    var TipStavbe = 1;
                                }
                                else {
                                    var TipStavbe = 5;
                                }


                                var StopnjaStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.childNodes[1].innerHTML.split(" ");
                                StopnjaStavbe = StopnjaStavbe[StopnjaStavbe.length - 1].split(")").join("").split("</span>").join("");
                                if (StopnjaStavbe * 1 + "" == "NaN" || StopnjaStavbe + "" == "") {
                                    continue Timerji;
                                }
                                var casKoncanja = SpanTimer.snapshotItem(TaTimer).innerHTML;
                                var UraKoncanja = casKoncanja.split(":")[0];
                                var MinutaKoncanja = casKoncanja.split(":")[1];
                                var SekundaKoncanja = casKoncanja.split(":")[2];
                                var CasKoncanja = UraKoncanja * 3600 + MinutaKoncanja * 60 + SekundaKoncanja * 1;
                            }
                            catch (err) {
                                var TipStavbe = 0;
                            }
                            if (TipStavbe == 0) {
                            }
                            else if (TipStavbe <= 4 && CasKoncanja > CasKoncanja1[0]) {
                                CasKoncanja1[0] = CasKoncanja;
                                Stavba1 = [TipStavbe, StopnjaStavbe];
                            }
                            else if (TipStavbe > 4 && CasKoncanja > CasKoncanja1[1]) {
                                CasKoncanja1[1] = CasKoncanja;
                                Stavba2 = [TipStavbe, StopnjaStavbe];
                            }

                        }

                        var DatumKoncanja1 = new Date();
                        DatumKoncanja1.setSeconds(DatumKoncanja1.getSeconds() + CasKoncanja1[0]);
                        var DatumKoncanja2 = new Date();
                        DatumKoncanja2.setSeconds(DatumKoncanja2.getSeconds() + CasKoncanja1[1]);

                    }
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).BuildingTime = DatumKoncanja2.getTime();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).FieldTime = DatumKoncanja1.getTime();

                    /*
                    this.INTERVALGRADNJA = 60;
                    this.INTERVALTRZNICA = 30;
                    this.INTERVALURJENJE = 60;
                    this.INTERVALFESTIVAL = 180;
                    this.INTERVALARMOR = 60;
                    this.CASANALIZEGRADNJA1 = 0;
                    this.CASANALIZEGRADNJA2 = 0;
                    this.CASANALIZETRZNICA = 0;
                    this.CASANALIZEURJENJE = 0;
                    this.CASANALIZEFESTIVAL = 0;
                    this.CASANALIZEARMOR = 0;
    
                    */

                    var naselje = unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow));
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALGRADNJA), Math.round(66000 * naselje.INTERVALGRADNJA));
                    naselje.CASANALIZEGRADNJA1 = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALURJENJE), Math.round(66000 * naselje.INTERVALURJENJE));
                    naselje.CASANALIZEURJENJE = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALFESTIVAL), Math.round(66000 * naselje.INTERVALFESTIVAL));
                    naselje.CASANALIZEFESTIVAL = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALARMOR), Math.round(66000 * naselje.INTERVALARMOR));
                    naselje.CASANALIZEARMOR = novCas;


                    unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                    analiziranje.izvedinaloge();

                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });

        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));

    }


    this.dorf1T42 = function (village) {

        var newdid = "?newdid=" + village;
        if (unsafeWindow.PLAYER.villages.length <= 1) {
            newdid = "";
        }
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {
            
            return;
        }
        request(dorf1T4Afterrequest, "GET", link + "/dorf1.php", "", { "village": village })
        return
        console.log(link + "/dorf1.php" + newdid)
        setTimeout(function () {
            GM.xmlHttpRequest({
                method: "GET",
                url: link + "/dorf1.php" + newdid,
                headers: {
                    Referer: link + "/dorf1.php"
                },
                onload: function (response1) {
                    console.log("not")
                    var analizadiv = document.createElement("div");
                    analizadiv.innerHTML = response1.responseText;

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response1.responseText;

                    if (!analiziranje.preverilogin(doc)) {
                        setTimeout(function () {
                            analiziranje.izvedinaloge();
                        }, 60000);
                        return;
                    }
                    console.log("dalje")

                    var Zdaj = new Date();
                    console.log("dalje -2")
                    var ServerCas = serverCas(doc);
                    console.log(ServerCas)
                    
                    var ServerCas1 = new Date();
                    ServerCas1.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    var ServerCas2 = new Date();
                    ServerCas2.setDate(ServerCas2.getDate() + 1);
                    ServerCas2.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    var ServerCas3 = new Date();
                    ServerCas3.setDate(ServerCas3.getDate() - 1);
                    ServerCas3.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    var MinRazlika = ServerCas1.getTime() - Zdaj.getTime();
                    console.log("dalje -1")
                    if (Math.abs(ServerCas2.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                        MinRazlika = ServerCas2.getTime() - Zdaj.getTime();
                    }
                    if (Math.abs(ServerCas3.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                        MinRazlika = ServerCas3.getTime() - Zdaj.getTime();
                    }
                    unsafeWindow.PLAYER.timedif = MinRazlika;
                    console.log("dalje 0")

                    CasZdaj = new Date();
                    var Surovine = "";
                    var lesvvasi = doc.getElementById("l1").innerHTML;
                    var glinavvasi = doc.getElementById("l2").innerHTML;
                    var zelezovvasi = doc.getElementById("l3").innerHTML;
                    var zitovvasi = doc.getElementById("l4").innerHTML;

                    var totalcrop = 100;
                    try { totalcrop = doc.getElementById("stockBarFreeCrop").innerHTML * 1; }
                    catch (err) { }
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainTotal = totalcrop;

                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).wood = lesvvasi * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clay = glinavvasi * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).iron = zelezovvasi * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grain = zitovvasi * 1;

                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = doc.getElementById("stockBarWarehouse").innerHTML * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = doc.getElementById("stockBarGranary").innerHTML * 1;
                    console.log("dalje 1")
                    try {
                        var zacetek = doc.body.innerHTML.indexOf("resources.production = {");
                        zacetek = doc.body.innerHTML.indexOf("{", zacetek);
                        var konec = doc.body.innerHTML.indexOf("}", zacetek);
                        var proizvodnja = eval("(" + doc.body.innerHTML.substring(zacetek, konec) + "})");
                        unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = proizvodnja.l1;
                        unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = proizvodnja.l2;
                        unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = proizvodnja.l3;
                        unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = proizvodnja.l4;
                    }
                    catch (err) { }
                    console.log("dalje 2")
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).time = CasZdaj.getTime();
                    /*
                    var Produkcija = [0, 0, 0, 0];
    
                    var TabelaProdukcija = doc.getElementById("production"); //TabelaProdukcija.snapshotItem(0);
                    var ElementiTabele = doc.evaluate(".//td[@class='num']", TabelaProdukcija, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    
                    if (ElementiTabele.snapshotLength) {
                    for (var elementTabele = 0; elementTabele < ElementiTabele.snapshotLength; elementTabele++) {
                    Produkcija[elementTabele] = ElementiTabele.snapshotItem(elementTabele).innerHTML * 1;
    
                    }
                    }
    
    
                    TabelaProdukcija = null;
                    ElementiTabele = null;
    
                    
    
    
    
    
    
                    var proizvodnjales = Produkcija[0] * 1;
                    var proizvodnjaglina = Produkcija[1] * 1;
                    var proizvodnjazelezo = Produkcija[2] * 1;
                    var proizvodnjazito = Produkcija[3] * 1;
                    var CasZdaj = new Date();
                    unsafeWindow.PLAYER.getVillage(village).time = CasZdaj.getTime();
                    unsafeWindow.PLAYER.getVillage(village).woodP = proizvodnjales;
                    unsafeWindow.PLAYER.getVillage(village).clayP = proizvodnjaglina;
                    unsafeWindow.PLAYER.getVillage(village).ironP = proizvodnjazelezo;
                    unsafeWindow.PLAYER.getVillage(village).grainP = proizvodnjazito;
                    */

                    var divPolja = doc.evaluate(".//map[@id='rx']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (divPolja.snapshotLength) {
                        divPolja = divPolja.snapshotItem(0);

                        /*
                        1: 3-3-3-9
                        2: 3-4-5-6
                        3: 4-4-4-6
                        4: 4-5-3-6
                        5: 5-3-4-6
                        6: 1-1-1-15
                        7: 4-4-3-7
                        8: 3-4-4-7
                        9: 4-3-4-7
                        10: 3-5-4-6
                        11: 4-3-5-6
                        12: 5-4-3-6
        
                        TipiPokarajin
                        */
                        var vsebina = doc.getElementById("village_map");
                        var TipPokrajine = vsebina.getAttribute("class");
                        var StevilkaPokrajine = TipPokrajine.match(/[\d\.]+/g)[0] * 1;

                        var SlikePolj = divPolja.getElementsByTagName("area");
                        var Polja = [[0, 0, 0]];
                        var ShranjujemPolja = "";
                        var PoljaZaShranjevanje = CasZdaj.getDate() + ":" + CasZdaj.getMonth() + ":" + CasZdaj.getFullYear() + ":" + CasZdaj.getHours() + ":" + CasZdaj.getMinutes() + ":" + CasZdaj.getSeconds();

                        for (var i = 0; i < SlikePolj.length - 1; i++) {
                            var IdPolja = i + 1; //TipSlike.substring(zacetek,konec)*1;
                            var TipPolja = SlikePolj[i].getAttribute("alt");
                            var ImePolja = TipiPokarajin[StevilkaPokrajine][IdPolja];
                            var StopnjaPolja = TipPolja.match(/[\d\.]+/g)[0] * 1;
                            Polja.push([IdPolja, ImePolja, StopnjaPolja]); //                        <area href="build.php?id=1" coords="101,33,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=2" coords="165,32,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=3" coords="224,46,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=4" coords="46,63,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=5" coords="138,74,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=6" coords="203,94,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=7" coords="262,86,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=8" coords="31,117,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=9" coords="83,110,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=10" coords="214,142,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=11" coords="269,146,28" shape="circle" title="Rudnik ÄąÄľeleza Stopnja 10" alt="Rudnik ÄąÄľeleza Stopnja 10"/><area href="build.php?id=12" coords="42,171,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=13" coords="93,164,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=14" coords="160,184,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=15" coords="239,199,28" shape="circle" title="ÄąËťitno polje Stopnja 10" alt="ÄąËťitno polje Stopnja 10"/><area href="build.php?id=16" coords="87,217,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="build.php?id=17" coords="140,231,28" shape="circle" title="Gozdar Stopnja 10" alt="Gozdar Stopnja 10"/><area href="build.php?id=18" coords="190,232,28" shape="circle" title="Glinokop Stopnja 10" alt="Glinokop Stopnja 10"/><area href="dorf2.php" coords="144,131,36" shape="circle" title="Center naselja" alt="" />
                            try {
                                TipPolja = SlikePolj[i].getAttribute("title").split("<b>")[1].split("</b>")[0];
                            }
                            catch (err) {
                                TipPolja = SlikePolj[i].getAttribute("title").split(" <span")[0];
                            }
                            if (ShranjujemPolja == "") {
                                ShranjujemPolja = TipPolja;
                            }
                            else {
                                ShranjujemPolja += "|" + TipPolja;
                            }
                            var underconstruction = false;
                            try {
                                if (vsebina.childNodes[i * 2 + 1].getAttribute("class").indexOf("underConstruction") > -1) {
                                    underconstruction = true;
                                }
                            }
                            catch (err) {
                            }
                            var polje = {
                                id: IdPolja * 1,
                                name: ImePolja * 1,
                                level: StopnjaPolja * 1,
                                underconstruction: underconstruction
                            }


                            //PoljaZaShranjevanje+="|"+IdPolja+","+ImePolja+","+StopnjaPolja;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).POLJA[cloneInto(IdPolja, unsafeWindow)] = cloneInto(polje, unsafeWindow);

                        }

                        unsafeWindow.IMENAPOLJ = ShranjujemPolja;


                        divPolja = null;
                        Polja = null;
                        TipPokrajine = null;
                    }
                    else {
                        alert("Error analysing fields. Please contact administrator with this error on forum");
                    }

                    var CasKoncanja1 = [0, 0];

                    var SpanTimer = doc.evaluate(".//span[contains(@id, 'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (SpanTimer.snapshotLength == 0) 
                    {
                        SpanTimer = doc.evaluate(".//span[contains(@class, 'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    }

                    var StavbeKiSeGradijo = [];
                    var Stavba1 = [0, 0];
                    var Stavba2 = [0, 0];
                    console.log("SpanTimer.snapshotLength" + SpanTimer.snapshotLength)
                    if (SpanTimer.snapshotLength == 0) {
                        var DatumKoncanja1 = new Date();
                        var DatumKoncanja2 = new Date();
                        var Koncan1 = "0,0" + ":" + DatumKoncanja1.getDate() + ":" + DatumKoncanja1.getMonth() + ":" + DatumKoncanja1.getFullYear() + ":" + DatumKoncanja1.getHours() + ":" + DatumKoncanja1.getMinutes() + ":" + DatumKoncanja1.getSeconds();
                        var Koncan2 = "0,0" + ":" + DatumKoncanja2.getDate() + ":" + DatumKoncanja2.getMonth() + ":" + DatumKoncanja2.getFullYear() + ":" + DatumKoncanja2.getHours() + ":" + DatumKoncanja2.getMinutes() + ":" + DatumKoncanja2.getSeconds();
                        var DatumKoncanjaGradnje = Koncan1 + "/" + Koncan2;
                    }
                    else {


                        Timerji: for (var TaTimer = 0; TaTimer < SpanTimer.snapshotLength; TaTimer++) {
                            try {

                                var StopnjaStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("lvl")//.innerHTML.match(/[\d\.]+/g);
                                if (StopnjaStavbe.length == 0) {
                                    continue Timerji;
                                }

                                try {
                                    SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].removeChild(SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].getElementsByTagName("span")[0]);
                                }
                                catch (err) {
                                }
                                var ImeStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].innerHTML.split(" <span")[0];

                                while (ImeStavbe.charCodeAt(0) == 32 || ImeStavbe.charCodeAt(0) == 10 || ImeStavbe.charCodeAt(0) == 9) {
                                    ImeStavbe = ImeStavbe.substring(1);
                                }
                                while (ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 32 || ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 10 || ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 9) {
                                    ImeStavbe = ImeStavbe.substring(0, ImeStavbe.length - 2);
                                }
                                var Pirmerjalnik = "(" + unsafeWindow.IMENAPOLJ + ")";

                                var test = ImeStavbe.toLowerCase().match(Pirmerjalnik.toLowerCase());
                                if (test != null) {
                                    var TipStavbe = 1;
                                }
                                else {
                                    var TipStavbe = 5;
                                }


                                StopnjaStavbe = 0;
                                var casKoncanja = SpanTimer.snapshotItem(TaTimer).innerHTML;
                                var UraKoncanja = casKoncanja.split(":")[0];
                                var MinutaKoncanja = casKoncanja.split(":")[1];
                                var SekundaKoncanja = casKoncanja.split(":")[2];
                                var CasKoncanja = UraKoncanja * 3600 + MinutaKoncanja * 60 + SekundaKoncanja * 1;
                            }
                            catch (err) {
                                var TipStavbe = 0;
                            }
                            if (TipStavbe == 0) {
                            }
                            else if (TipStavbe <= 4 && CasKoncanja > CasKoncanja1[0]) {
                                CasKoncanja1[0] = CasKoncanja;
                                Stavba1 = [TipStavbe, StopnjaStavbe];
                            }
                            else if (TipStavbe > 4 && CasKoncanja > CasKoncanja1[1]) {
                                CasKoncanja1[1] = CasKoncanja;
                                Stavba2 = [TipStavbe, StopnjaStavbe];
                            }

                        }
                        var DatumKoncanja1 = new Date();
                        DatumKoncanja1.setSeconds(DatumKoncanja1.getSeconds() + CasKoncanja1[0]);
                        var DatumKoncanja2 = new Date();
                        DatumKoncanja2.setSeconds(DatumKoncanja2.getSeconds() + CasKoncanja1[1]);
                    }
                    console.log("pred posodobitvijo")
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).BuildingTime = DatumKoncanja2.getTime();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).FieldTime = DatumKoncanja1.getTime();

                    var naselje = unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow));
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALGRADNJA), Math.round(66000 * naselje.INTERVALGRADNJA));
                    naselje.CASANALIZEGRADNJA1 = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALURJENJE), Math.round(66000 * naselje.INTERVALURJENJE));
                    naselje.CASANALIZEURJENJE = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALFESTIVAL), Math.round(66000 * naselje.INTERVALFESTIVAL));
                    naselje.CASANALIZEFESTIVAL = novCas;
                    var novCas = new Date();
                    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALARMOR), Math.round(66000 * naselje.INTERVALARMOR));
                    naselje.CASANALIZEARMOR = novCas;

                    unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                    analiziranje.izvedinaloge();
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });

        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));

    }


    this.trznica1 = function (village)//*******************************************************
    {
        //testlog("test1");
        var newdid = "&newdid=" + village;
        if (unsafeWindow.PLAYER.villages.length <= 1) {
            newdid = "";
        }
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK; //document.location.href.split("link=")[1].split("/dorf1.php")[0];  
        }
        catch (err) {
            return;
        }
        //testlog(link + "/build.php?&gid=17&t=2" + newdid);
        setTimeout(function () {
            GM.xmlHttpRequest({
                method: "GET",
                url: link + "/build.php?&gid=17&t=2" + newdid,
                headers: {
                },
                //data: "is_correct="+pravilno+"&password="+password+"&username="+username+"&ticket="+id,
                onload: function (response1) {
                    //testlog("test2");
                    var analizadiv = document.createElement("div");
                    analizadiv.innerHTML = response1.responseText;

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response1.responseText;

                    if (!analiziranje.preverilogin(doc)) {
                        setTimeout(function () {
                            analiziranje.izvedinaloge();
                        }, 60000);
                        return;
                    }

                    try {

                        doc.getElementById("build").getAttribute("class").match(/[\d\.]+/g)[0];


                    }
                    catch (Error) {
                        unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).PONUDBETRGOVCI = 0;
                        setTimeout(function () {
                            unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                            analiziranje.izvedinaloge();
                        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));

                        return;
                    }
                    var SteviloTrgovcev = 0;
                    var SteviloPonudb = doc.evaluate(".//td[@class='tra']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (SteviloPonudb.snapshotLength) {
                        for (var hgdsf = 0; hgdsf < SteviloPonudb.snapshotLength; hgdsf++) {

                            if (SteviloPonudb.snapshotItem(hgdsf).innerHTML.length > 2) {
                                continue;
                            }
                            SteviloTrgovcev = SteviloTrgovcev + SteviloPonudb.snapshotItem(hgdsf).innerHTML * 1
                        }
                        //    StTrgovci=[tdtrgovci.snapshotItem(0).innerHTML.match(/[\d\.]+/g)[0]*1,tdtrgovci.snapshotItem(0).innerHTML.match(/[\d\.]+/g)[1]*1];
                    }
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).PONUDBETRGOVCI = SteviloTrgovcev;

                    unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                    analiziranje.izvedinaloge();
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });

        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));

    }


    function afterloadTrznica21(responseDetails, json, status, statusText, responseHeaders, doc, url, data) {
        console.log("afterloadTrznica21")
        var village2 = data["village"]
        var naselje = unsafeWindow.PLAYER.getVillage(village2)
        if (unsafeWindow.Stopped) {
            addLog("Analysing", village2, "Bot was stopped. Analysing not completed.", unsafeWindow.PLAYER, 2);
            return
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        console.log("preverjenLogin: " + preverjenLogin)
        if (!preverjenLogin) {
            return
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village2) {
            var newdid = "?newdid=" + village2;

            try {
                var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

            }
            catch (err) {
                return;
            }
            request(afterloadTrznica21, "GET", link + "/dorf2.php" + newdid, "", data)
            return;
        }

        var polozajtrznice=0
        if (true) {

            var CasZdaj = new Date();
            var divZPolji = doc.getElementById("village_map");

            var SlikePolj = divZPolji.getElementsByTagName("img");
            var Polja = [[0, 0, 0]];
            var PoljaZaShranjevanje = CasZdaj.getDay() + ":" + CasZdaj.getMonth() + ":" + CasZdaj.getFullYear() + ":" + CasZdaj.getHours() + ":" + CasZdaj.getMinutes() + ":" + CasZdaj.getSeconds();
            var area = doc.getElementsByTagName("area");
            for (var i = 0; i < SlikePolj.length - 2; i++) {
                var TipSlike = SlikePolj[i].getAttribute("class");
                var TipSlike2 = SlikePolj[i].getAttribute("alt");
                var doddd = 0;
                try {//building d1 g23
                    TipSlike = TipSlike.split("building").join("");
                    var mesto1999 = TipSlike.lastIndexOf('g');
                    if (mesto1999 == -1) {
                        ImePolja = 0;
                    }
                    else {
                        mesto1999 += 1;
                        var ImePolja = TipSlike.substring(mesto1999);
                        ImePolja = ImePolja.match(/[\d\.]+/g)[0] * 1;
                        if (isNaN(ImePolja - 0)) {
                            ImePolja = 0;
                        }
                    }
                }
                catch (Error) {
                    var ImePolja = 0;
                }

                var IdPolja = i + 19;
                if (IdPolja > 40) {
                    break;
                }
                try {
                    var StopnjaPolja = TipSlike2.match(/[\d\.]+/g)[0] * 1;
                }
                catch (Error) {
                    var StopnjaPolja = 0;
                }
                if (StopnjaPolja + "" == "undefined" || StopnjaPolja == undefined || StopnjaPolja + "" == "NaN" || StopnjaPolja == NaN) {
                    StopnjaPolja = 0;
                }
                Polja[IdPolja] = [IdPolja, ImePolja, StopnjaPolja];

                try {

                    var IdPolja = area[i + doddd].getAttribute("href").split("id=")[1].match(/[\d\.]+/g)[0];

                }
                catch (err) {
                    continue;
                }
                var polje = {
                    id: IdPolja * 1,
                    name: ImePolja * 1,
                    level: StopnjaPolja * 1
                }
                if (polje.name == 17)
                {
                    polozajtrznice = polje.id;
                    break;
                }
                
            }
        }
        console.log(polozajtrznice)
        if (polozajtrznice==0)
        {
            var novCas = new Date();
            novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALTRZNICA), Math.round(66000 * naselje.INTERVALTRZNICA));
            naselje.CASANALIZETRZNICA = novCas;
            naselje.TRGOVCI = cloneInto([[0, 1]], unsafeWindow)
            unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
            analiziranje.izvedinaloge();
            return
        }
        data.polozajtrznice = polozajtrznice;

        var areagumb = doc.evaluate(".//area[contains(@href, 'build.php?') and contains(@href, 'id="+polozajtrznice+"')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        console.log(".//area[contains(@href, 'build.php?') and contains(@href, 'id=" + polozajtrznice + "')]")
        if (areagumb.snapshotLength) {
            setTimeout(function () {
                request(afterloadTrznica22, "GET", unsafeWindow.http + "://" + unsafeWindow.PLAYER.server2 + "/" + areagumb.snapshotItem(0).getAttribute("href"), "", data)
            }, randomXToY(500, 1500))
        }
        else {
            log("no result1", 5);
            var novCas = new Date();
            novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALTRZNICA), Math.round(66000 * naselje.INTERVALTRZNICA));
            naselje.CASANALIZETRZNICA = novCas;
            naselje.TRGOVCI = cloneInto([[0, 1]], unsafeWindow)
            addLog("Analysing", village2, "Analysing marketplace unsuccessful. No marketplace. ", unsafeWindow.PLAYER, 1, false);
            unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
            analiziranje.izvedinaloge();
            //console.log(task)
            //console.log(Stavbe[task.building])
            //addLog("Build", village.villageid, "Failed to build " + Stavbe[task.building][0][0] + " to level " + buildinglevel + "; Unable to find building link on " + d12 + " page.", PLAYER, 2);
            //setTimeoutStart(15000, 30000, PLAYER);
        }
        //request(afterloadEnotedoma2, "GET", link + "/dorf2.php", "", { "village": village })
    }

    function afterloadTrznica22(responseDetails, json, status, statusText, responseHeaders, doc, url, data) {
        var village2 = data["village"]
        var naselje = unsafeWindow.PLAYER.getVillage(village2)
        var polozajtrznice = data["polozajtrznice"]
        console.log("polozajtrznice "+polozajtrznice)
        //return
        console.log("data.alreadiyswitchedtab " + data.alreadiyswitchedtab)
        if (unsafeWindow.Stopped) {
            addLog("Analysing", village2, "Bot was stopped. Analysing not completed.", unsafeWindow.PLAYER, 2);
            return
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        console.log("preverjenLogin: " + preverjenLogin)
        if (!preverjenLogin) {
            return
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village2) {
            var newdid = "?newdid=" + village2;

            try {
                var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

            }
            catch (err) {
                return;
            }
            data.alreadiyswitchedtab = false;
            request(afterloadTrznica21, "GET", link + "/dorf2.php" + newdid, "", data)
            return;
        }
        var areagumb = doc.evaluate(".//div[contains(@class, 'container active')]/div[contains(@class, 'favorKey')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        console.log(areagumb.snapshotLength)
        if (areagumb.snapshotLength) {
            var idtaba = areagumb.snapshotItem(0).getAttribute("class").match(/[\d\.]+/g)[0] * 1;
            console.log("tab " + idtaba)
            if (idtaba != 5 && !data.alreadiyswitchedtab) {
                data.alreadiyswitchedtab = true;
                console.log(unsafeWindow.http + "://" + unsafeWindow.PLAYER.server2 + "/build.php?t=5&id=" + polozajtrznice)
                setTimeout(function () {
                    request(afterloadTrznica22, "GET", unsafeWindow.http + "://" + unsafeWindow.PLAYER.server2 + "/build.php?t=5&id=" + polozajtrznice, "", data)
                }, randomXToY(500, 1500))
            }
            else {
                console.log("pravi tab")
                //return
                addLog("Analysing", village2, "Analysing marketplace successful.", unsafeWindow.PLAYER, 1, false);
                unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                analiziranje.izvedinaloge();
            }
        }
        else {
            log("no  tab result1", 5);
            var novCas = new Date();
            novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALTRZNICA), Math.round(66000 * naselje.INTERVALTRZNICA));
            naselje.CASANALIZETRZNICA = novCas;
            naselje.TRGOVCI = cloneInto([[0, 1]], unsafeWindow)
            addLog("Analysing", village2, "Analysing marketplace unsuccessful. Can not find tabs on marketplatece.", unsafeWindow.PLAYER, 1, false);
            unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
            analiziranje.izvedinaloge();
            /*console.log(task)
            console.log(Stavbe[task.building])
            addLog("Build", village.villageid, "Failed to build " + Stavbe[task.building][0][0] + " to level " + buildinglevel + "; Unable to find building link on " + d12 + " page.", PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);*/
        }
        //request(afterloadEnotedoma, "GET", link + "/dorf2.php", "", { "village": village })
    }

    this.trznica2 = function (village)//*******************************************************
    {
        console.log("trznica2")
        var newdid = "&newdid=" + village;
        if (unsafeWindow.PLAYER.villages.length <= 1) {
            newdid = "";
        }
        try {
            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {
            return;
        }
        request(afterloadTrznica21, "GET", link + "/dorf2.php", "", { "village": village })
        return
        setTimeout(function () {
            var link2 = link + "/build.php?gid=17&t=5" + newdid;
            if (unsafeWindow.TravianServer == 3) {
                link2 = link + "/build.php?gid=17" + newdid;
            }

            GM.xmlHttpRequest({
                method: "GET",
                url: link2,
                headers: {
                },
                onload: function (response1) {

                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response1.responseText;

                    if (!analiziranje.preverilogin(doc)) {
                        setTimeout(function () {
                            analiziranje.izvedinaloge();
                        }, 60000);
                        return;
                    }

                    switch (TravianServer) {
                        case 3:
                            var lesvvasi = doc.getElementById("l4").innerHTML;
                            var glinavvasi = doc.getElementById("l3").innerHTML;
                            var zelezovvasi = doc.getElementById("l2").innerHTML;
                            var zitovvasi = doc.getElementById("l1").innerHTML;
                            var CasZdaj = new Date();
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).time = CasZdaj.getTime();
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = doc.getElementById("l1").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = doc.getElementById("l2").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = doc.getElementById("l3").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = doc.getElementById("l4").getAttribute("title") * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = lesvvasi.split("/")[1] * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = zitovvasi.split("/")[1] * 1;
                            break;
                        case 4:
                            var lesvvasi = doc.getElementById("res").getElementsByTagName("span")[0].innerHTML;
                            var glinavvasi = doc.getElementById("res").getElementsByTagName("span")[1].innerHTML;
                            var zelezovvasi = doc.getElementById("res").getElementsByTagName("span")[2].innerHTML;
                            var zitovvasi = doc.getElementById("res").getElementsByTagName("span")[3].innerHTML;
                            try {
                                var zacetek = doc.body.innerHTML.indexOf("resources.production = {");
                                zacetek = doc.body.innerHTML.indexOf("{", zacetek);
                                var konec = doc.body.innerHTML.indexOf("}", zacetek);
                                var proizvodnja = eval("(" + doc.body.innerHTML.substring(zacetek, konec) + "})");
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = proizvodnja.l1;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = proizvodnja.l2;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = proizvodnja.l3;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = proizvodnja.l4;
                            }
                            catch (err) { }
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = lesvvasi.split("/")[1] * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = zitovvasi.split("/")[1] * 1;
                            break;
                        case 4.2:
                            var lesvvasi = doc.getElementById("l1").innerHTML;
                            var glinavvasi = doc.getElementById("l2").innerHTML;
                            var zelezovvasi = doc.getElementById("l3").innerHTML;
                            var zitovvasi = doc.getElementById("l4").innerHTML;
                            var totalcrop = 100;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).warhouse = doc.getElementById("stockBarWarehouse").innerHTML * 1;
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).granary = doc.getElementById("stockBarGranary").innerHTML * 1;
                            try { totalcrop = doc.getElementById("stockBarFreeCrop").innerHTML * 1; }
                            catch (err) { }
                            unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainTotal = totalcrop;
                            try {
                                var zacetek = doc.body.innerHTML.indexOf("resources.production = {");
                                zacetek = doc.body.innerHTML.indexOf("{", zacetek);
                                var konec = doc.body.innerHTML.indexOf("}", zacetek);
                                var proizvodnja = eval("(" + doc.body.innerHTML.substring(zacetek, konec) + "})");
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).woodP = proizvodnja.l1;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clayP = proizvodnja.l2;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ironP = proizvodnja.l3;
                                unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grainP = proizvodnja.l4;
                            }
                            catch (err) { }

                            break;
                    }

                    var CasZdaj = new Date();
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).wood = lesvvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).clay = glinavvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).iron = zelezovvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).grain = zitovvasi.split("/")[0] * 1;
                    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).time = CasZdaj.getTime();

                    var ana = AnalizirajTrznicoXX(doc, village);

                    if (false) {

                        setTimeout(function () {

                            GM.xmlHttpRequest({
                                method: "GET",
                                url: link + "/build.php?t=5&gid=17" + newdid,
                                headers: {
                                },
                                //data: "is_correct="+pravilno+"&password="+password+"&username="+username+"&ticket="+id,
                                onload: function (response1) {

                                    var doc = document.implementation.createHTMLDocument('My title');
                                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                    doc.documentElement.appendChild(body);
                                    doc.body.innerHTML = response1.responseText;

                                    if (!analiziranje.preverilogin(doc)) {
                                        setTimeout(function () {
                                            analiziranje.izvedinaloge();
                                        }, 60000);
                                        return;
                                    }


                                    var ana = AnalizirajTrznicoXX(doc, village);

                                    unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                                    analiziranje.izvedinaloge();
                                },
                                onerror: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                ontimeout: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                onabort: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                }
                            });

                        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));
                    }
                    else {
                        setTimeout(function () {
                            unsafeWindow.draw((1 - analiziranje.naloge.length / analiziranje.stevilonalog) * 100);
                            analiziranje.izvedinaloge();
                        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));
                    }
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });

        }, RandomXtoY(unsafeWindow.AnalizaMin, unsafeWindow.AnalizaMax));
    }


    this.izvedinaloge = function () {
        console.log("izvedi naloge")
        setTimeout(function () {
            console.log(analiziranje.naloge);
            if (analiziranje.naloge.length > 0) {
                var izvajanje = analiziranje.naloge[0];
                //testlog(analiziranje.naloge[0]);
                analiziranje.izvajam = true;
                analiziranje.naloge.splice(0, 1);
                console.log(izvajanje);
                console.log(analiziranje.dorf1)
                eval(izvajanje);
                ZadnjaNaloga = izvajanje;
            }
            else {
                ZadnjaNaloga = "analiziranje.izvedinaloge();";
            }
        }, 0);

    }
}
function AnalizirajTrznicoXX(doc, village)//spada k analiziraj.trznico2***************************************************
{
    var AnalizirajTrgovce = true;
    var string999 = ".//div[contains(@class, 'boxes-contents')]";
    if (TravianServer == 3) {
        string999 = ".//td[@class='mer']";
    }
    var tdtrgovci = doc.evaluate(string999, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    var StTrgovci = [0, 0];

    if (tdtrgovci.snapshotLength) {
        try {
            StTrgovci = [tdtrgovci.snapshotItem(0).innerHTML.match(/[\d\.]+/g)[0] * 1, tdtrgovci.snapshotItem(0).innerHTML.match(/[\d\.]+/g)[1] * 1];
        }
        catch (err) {
        }
    }
    else {
        var naselje = unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow));
        var novCas = new Date();
        novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALTRZNICA), Math.round(66000 * naselje.INTERVALTRZNICA));
        naselje.CASANALIZETRZNICA = novCas;
        var novCas = new Date();
        novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALURJENJE), Math.round(66000 * naselje.INTERVALURJENJE));
        naselje.CASANALIZEURJENJE = novCas;
        var novCas = new Date();
        novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALFESTIVAL), Math.round(66000 * naselje.INTERVALFESTIVAL));
        naselje.CASANALIZEFESTIVAL = novCas;
        var novCas = new Date();
        novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALARMOR), Math.round(66000 * naselje.INTERVALARMOR));
        naselje.CASANALIZEARMOR = novCas;
        return false;
    }
    var tdtrgovcinosijo = doc.evaluate(
            ".//a[@onmouseup='add_res(1);']",
                doc,
                null,
                XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
                null);
    var TrgovciNosijo = 1;
    var SamoPrihajajoci = false;
    if (tdtrgovcinosijo.snapshotLength) {
        try {
            TrgovciNosijo = tdtrgovcinosijo.snapshotItem(0).innerHTML.match(/[\d\.]+/g)[0] * 1;
        }
        catch (err) { }
    }
    else {
        try {
            TrgovciNosijo = doc.getElementById("addRessourcesLink1").innerHTML * 1;
        }
        catch (err) { }
    }
    if (TravianServer == 4.2 || TravianServer == 4) {
        try {
            var zacetek = doc.body.innerHTML.indexOf("window.marketPlace = new Travian.Game.Marketplace(")
            if (zacetek > -1) {
                zacetek = doc.body.innerHTML.indexOf("{", zacetek)
                if (zacetek > -1) {
                    var konec = doc.body.innerHTML.indexOf("}", zacetek)
                    if (konec > -1) {
                        var marketplace = eval("(" + doc.body.innerHTML.substring(zacetek, konec) + "})");
                        TrgovciNosijo = marketplace.capacityPerMerchant
                        StTrgovci[0] = marketplace.merchantsAvailable;
                    }
                }
            }
        }
        catch (err) {
        }
    }

    var PonudbeTrgovci = unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).PONUDBETRGOVCI * 1;
    if (StTrgovci[0] + PonudbeTrgovci >= StTrgovci[1]) {
        SamoPrihajajoci = true;
        AnalizirajTrgovce = false;
    }
    console.log("SamoPrihajajoci" + SamoPrihajajoci)
    console.log("AnalizirajTrgovce" + AnalizirajTrgovce)
    StTrgovci[1] = TrgovciNosijo;

    var Naslovi = doc.getElementsByTagName("h4");
    var PolozajPrihajajocih = 0;
    var PolozajOdhajajocih = 10000000;
    try {
        PolozajPrihajajocih = Naslovi[0].parentNode.innerHTML.indexOf(Naslovi[0].innerHTML);
    }
    catch (Error) {
    }

    try {
        PolozajOdhajajocih = Naslovi[1].parentNode.innerHTML.indexOf(Naslovi[1].innerHTML);
    }
    catch (Error) {
    }
    var StevilkaVasi = unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).ID;
    var KoordinateAktivneVasi = [getXfromCoord(StevilkaVasi), getYfromCoord(StevilkaVasi)];

    var ex11 = ".//tr[@class='res']";
    var Tabele = doc.evaluate(
    ex11,
    doc,
    null,
    XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
    null);
    var VracanjaTrgovcev = [StTrgovci];
    var PrihajajoceSurovine = [];

    if (Tabele.snapshotLength) {
        for (var gfsd = 0; gfsd < Tabele.snapshotLength; gfsd++) {
            try {
                var VracanjeTrgovcev = false;
                var VracanjeTrgovcev2 = false;

                var Tabele1 = Tabele.snapshotItem(gfsd);
                var OfsetTabele = Tabele1.parentNode.parentNode.offsetTop;
                var PodatkiSurovine = Tabele1.childNodes[3]; //.childNodes[0];
                if (!PodatkiSurovine) {
                    PodatkiSurovine = Tabele1.getElementsByTagName("td")[0];
                }
                if (PodatkiSurovine.getElementsByTagName("span").length > 0) {

                    if (PodatkiSurovine.getElementsByTagName("span").length > 0 && TravianServer == 3) {

                        if (PodatkiSurovine.getElementsByTagName("span")[0].getAttribute("class") == null) {

                            VracanjeTrgovcev2 = false;
                            Tabele1 = Tabele1.parentNode;
                        }
                    }
                    else if (TravianServer == 3) {
                        VracanjeTrgovcev2 = false;
                    }

                    if (PodatkiSurovine.getElementsByTagName("span")[0].getAttribute("class") == null) {

                        VracanjeTrgovcev2 = false;
                        Tabele1 = Tabele1.parentNode;
                    }

                    else if (PodatkiSurovine.getElementsByTagName("span")[0].getAttribute("class") == "none") {
                        VracanjeTrgovcev = true;
                    }
                    else {
                        VracanjeTrgovcev2 = true;
                        Tabele1 = Tabele1.parentNode;
                    }


                    for (var qqq = 0; qqq < 4; qqq++) {
                        try {
                            var test0 = PodatkiSurovine.childNodes[qqq];
                            var test1 = test0.innerHTML.indexOf(">") + 1;
                            var test2 = test0.innerHTML.substring(test1).match(/[\d\.]+/g)[0] * 1;
                            PodatkiSurovine = PodatkiSurovine.childNodes[qqq];
                            break;
                        }
                        catch (err) {
                        }
                    }

                }


                if (!VracanjeTrgovcev2) {
                    for (var qwe = 1; qwe < 10; qwe++) {
                        try {
                            var evalstring = "Tabele1"
                            for (var ewq = 0; ewq < qwe; ewq++) {
                                evalstring += ".previousSibling";
                            }

                            var PodatkiIgralca = eval(evalstring + ";");
                            var test1 = PodatkiIgralca.getElementsByTagName("a")[0].getAttribute("href").match(/[\d\.]+/g)[0] * 1;
                            break;
                        }
                        catch (Error) {
                        }
                    }

                    try {
                        var test1 = PodatkiIgralca.getElementsByTagName("a")[0].getAttribute("href").match(/[\d\.]+/g)[0] * 1;
                    }
                    catch (Error) {

                        for (var qwe = 1; qwe < 10; qwe++) {
                            try {
                                var evalstring = "Tabele1.parentNode"
                                for (var ewq = 0; ewq < qwe; ewq++) {
                                    evalstring += ".previousSibling";
                                }

                                var PodatkiIgralca = eval(evalstring + ";");
                                var test1 = PodatkiIgralca.getElementsByTagName("a")[0].getAttribute("href").match(/[\d\.]+/g)[0] * 1;
                                break;
                            }
                            catch (Error) {
                            }
                        }
                    }

                    var linkiPosiljatelj = PodatkiIgralca.getElementsByTagName("a");
                    var Posiljatelj = 0;
                    for (var qwe = 0; qwe < linkiPosiljatelj.length; qwe++) {
                        if (linkiPosiljatelj[qwe].getAttribute("href").indexOf("uid") > -1) {
                            Posiljatelj = linkiPosiljatelj[qwe].getAttribute("href").split("uid=")[1].match(/[\d\.]+/g)[0] * 1;
                        }
                        else if (linkiPosiljatelj[qwe].getAttribute("href").indexOf("d=") > -1) {

                            try {
                                var VasPosiljanja = linkiPosiljatelj[qwe].getAttribute("href").split("d=")[1].match(/[\d\.]+/g)[0] * 1;
                                var XVasPosiljanja = getXfromCoord(VasPosiljanja * 1);
                                var YVasPosiljanja = getYfromCoord(VasPosiljanja * 1);
                            }
                            catch (err) {
                                var VasPosiljanja = 0;
                                var XVasPosiljanja = 0;
                                var YVasPosiljanja = 0;
                            }

                        }
                    }

                }
                var PolozajLes = PodatkiSurovine.innerHTML.indexOf(">") + 1;
                var PosiljanLes = PodatkiSurovine.innerHTML.substring(PolozajLes).match(/[\d\.]+/g)[0] * 1;
                var PolozajGlina = PodatkiSurovine.innerHTML.indexOf(">", PolozajLes) + 1;
                var PosiljanGlina = PodatkiSurovine.innerHTML.substring(PolozajGlina).match(/[\d\.]+/g)[0] * 1;
                var PolozajZelezo = PodatkiSurovine.innerHTML.indexOf(">", PolozajGlina) + 1;
                var PosiljanZelezo = PodatkiSurovine.innerHTML.substring(PolozajZelezo).match(/[\d\.]+/g)[0] * 1;
                var PolozajZito = PodatkiSurovine.innerHTML.indexOf(">", PolozajZelezo) + 1;
                var PosiljanZito = PodatkiSurovine.innerHTML.substring(PolozajZito).match(/[\d\.]+/g)[0] * 1;
                var PosiljaneSurovine = PosiljanLes + PosiljanGlina + PosiljanZelezo + PosiljanZito;
                var SteviloPoslanihTrgovcev = Math.ceil(PosiljaneSurovine / TrgovciNosijo);



                var spanTimer = doc.evaluate(".//span[contains(@id, 'timer')]", Tabele1.parentNode.parentNode, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);



                PodatkiCas = spanTimer.snapshotItem(0).innerHTML.split(":");

                var PrihodCezSekund = PodatkiCas[0] * 3600 + PodatkiCas[1] * 60 + PodatkiCas[2] * 1;

                var tabela = PodatkiSurovine;
                var polozajTabele = 10000000
                for (var www = 0; www < 10; www++) {
                    tabela = tabela.parentNode;
                    if (tabela.nodeName.toLowerCase() == "table") {
                        polozajTabele = tabela.parentNode.innerHTML.indexOf(tabela.innerHTML);
                        break;
                    }
                }
                var NaseSurovine = false;
                if (PolozajOdhajajocih == 10000000) {
                    PolozajOdhajajocih = PolozajPrihajajocih;
                }

                if (polozajTabele > PolozajOdhajajocih) {
                    NaseSurovine = true;
                }

                if (NaseSurovine && AnalizirajTrgovce && !VracanjeTrgovcev) {
                    if (VracanjeTrgovcev) {
                        var SekundePotovanja = 5;
                    }
                    else {
                        Pleme = unsafeWindow.PLAYER.tribe * 1;
                        var HitrostTrgovcev = 1;

                        if (Pleme == 0) {
                            HitrostTrgovcev = 16;
                        }
                        else if (Pleme == 1) {
                            HitrostTrgovcev = 12;
                        }
                        else if (Pleme == 2) {
                            HitrostTrgovcev = 24;
                        }
                        else if (Pleme == 5) {
                            HitrostTrgovcev = 16;
                        }
                        else if (Pleme == 6) {
                            HitrostTrgovcev = 20;
                        }
                        var RazdaljaVmes = PridobiRazdaljo(KoordinateAktivneVasi[0] * 1, KoordinateAktivneVasi[1] * 1, XVasPosiljanja * 1, YVasPosiljanja * 1);
                        var SekundePotovanja = Math.ceil(RazdaljaVmes * 3600 / (unsafeWindow.PLAYER.speed * HitrostTrgovcev)) + 5;

                    }

                    var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;
                    console.log("SekundePotovanja:"+SekundePotovanja)
                    var CasVracanja = new Date();
                    CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);


                    var vracamke =
                    {
                        trgovci: SteviloPoslanihTrgovcev,
                        time: CasVracanja.getTime()
                    }
                    VracanjaTrgovcev.push(vracamke);



                }
                else if (VracanjeTrgovcev) {

                    var SekundePotovanja = 5;
                    var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;

                    var CasVracanja = new Date();
                    CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);

                    var vracamke =
                    {
                        trgovci: SteviloPoslanihTrgovcev,
                        time: CasVracanja.getTime()
                    }
                    VracanjaTrgovcev.push(vracamke);

                }
                else {

                    var SekundePotovanja = 5;
                    var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;

                    var CasVracanja = new Date();
                    CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);


                    var vracamke =
                    {
                        wood: PosiljanLes,
                        clay: PosiljanGlina,
                        iron: PosiljanZelezo,
                        grain: PosiljanZito,
                        time: CasVracanja.getTime()
                    }
                    PrihajajoceSurovine.push(vracamke);
                }
            }
            catch (err) {
            }
        }

    }
    else {
    }
    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).TRGOVCI = cloneInto(VracanjaTrgovcev, unsafeWindow);
    unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow)).SUROVINEPRIHAJAJOCE = cloneInto(PrihajajoceSurovine, unsafeWindow);

    var naselje = unsafeWindow.PLAYER.getVillage(cloneInto(village, unsafeWindow));
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALTRZNICA), Math.round(66000 * naselje.INTERVALTRZNICA));
    naselje.CASANALIZETRZNICA = novCas;
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALURJENJE), Math.round(66000 * naselje.INTERVALURJENJE));
    naselje.CASANALIZEURJENJE = novCas;
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALFESTIVAL), Math.round(66000 * naselje.INTERVALFESTIVAL));
    naselje.CASANALIZEFESTIVAL = novCas;
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(54000 * naselje.INTERVALARMOR), Math.round(66000 * naselje.INTERVALARMOR));
    naselje.CASANALIZEARMOR = novCas;
    return true;
}
var analiziranje = new Analiza();   

function testna2() {
}

function testna() {
    console.log("testna")
    TravianServer = unsafeWindow.TravianServer;
    analiziranje.naloge = [];
    if (document.getElementById("Analiza").getAttribute("tip") == "vse") {
        for (var aa = 0; aa < unsafeWindow.PLAYER.villages.length; aa++) {

            
            analiziranje.naloge.push("analiziranje.dorf1(" + unsafeWindow.PLAYER.villages[aa].villageid + ");");
            analiziranje.naloge.push("analiziranje.enotedoma(" + unsafeWindow.PLAYER.villages[aa].villageid + ");");
            //analiziranje.naloge.push("analiziranje.dorf2(" + unsafeWindow.PLAYER.villages[aa].villageid + ");");
            //analiziranje.naloge.push("analiziranje.trznica1(" + unsafeWindow.PLAYER.villages[aa].villageid + ");");
            analiziranje.naloge.push("analiziranje.trznica2(" + unsafeWindow.PLAYER.villages[aa].villageid + ");");
        }
    }
    else if (document.getElementById("Analiza").getAttribute("tip") == "custom") {
        var naselja = document.getElementById("Analiza").getAttribute("taski").split(",");
        for (var aa = 0; aa < naselja.length; aa++) {
            analiziranje.naloge.push(naselja[aa]);
        }
    }
    else if (document.getElementById("Analiza").getAttribute("villageid") != "" && document.getElementById("Analiza").getAttribute("tip") == "zbiralisce") {
        analiziranje.naloge.push("analiziranje.enotedoma(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
    }
    else if (document.getElementById("Analiza").getAttribute("villageid") != "" && document.getElementById("Analiza").getAttribute("tip") == "dorf1") {
        analiziranje.naloge.push("analiziranje.dorf1(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
    }
    else if (document.getElementById("Analiza").getAttribute("villageid") != "" && document.getElementById("Analiza").getAttribute("tip") == "dorf2") {
        analiziranje.naloge.push("analiziranje.dorf2(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
    }
    else if (document.getElementById("Analiza").getAttribute("villageid") != "" && document.getElementById("Analiza").getAttribute("tip") == "trznica") {
        //analiziranje.naloge.push("analiziranje.trznica1(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
        analiziranje.naloge.push("analiziranje.trznica2(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
    }
    else if (document.getElementById("Analiza").getAttribute("villageid") != "") {
        
        analiziranje.naloge.push("analiziranje.dorf1(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
        analiziranje.naloge.push("analiziranje.enotedoma(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
        //analiziranje.naloge.push("analiziranje.dorf2(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
        //analiziranje.naloge.push("analiziranje.trznica1(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
        analiziranje.naloge.push("analiziranje.trznica2(" + document.getElementById("Analiza").getAttribute("villageid") + ");");
    }
    analiziranje.naloge.push(document.getElementById("Analiza").getAttribute("nadaljuj") + "\nanaliziranje.izvajam=false;\n unsafeWindow.draw(100); \n setTimeout(function(){document.getElementById('ProgressBarDiv').style.display='none'},2000);");
    analiziranje.stevilonalog = analiziranje.naloge.length;
    document.getElementById("ProgressBarDiv").style.display = "";
    unsafeWindow.draw(0);
    console.log(analiziranje.naloge)

    setTimeout(function () {
        analiziranje.izvedinaloge();
    }, 0);
}


///////////////
//// eventi ///
///////////////




function preveridesniklik() {
    var divpodatki = document.evaluate("//div[@class='text elementText']", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    var podatki = divpodatki.snapshotItem(0).innerHTML.split("<br>");
    NovaFarmaIme = divpodatki.snapshotItem(0).parentNode.childNodes[0].innerHTML;
    NovaFarmaX = podatki[0].split("|")[0].match(/[\d\.]+/g)[0] * 1;
    if (podatki[0].split("|")[0].indexOf("-") != -1) { NovaFarmaX = NovaFarmaX * (-1); }
    NovaFarmaY = podatki[0].split("|")[1].match(/[\d\.]+/g)[0] * 1;
    if (podatki[0].split("|")[1].indexOf("-") != -1) { NovaFarmaY = NovaFarmaY * (-1); }
}

window.addEventListener("beforeunload", ShraniZadnjoStran, true);


async function Start() {
    console.log("start "+window.location.href)
    var fireAndSand = document.getElementById("logo")
    if (fireAndSand) {
        if (fireAndSand.getAttribute("class") == "fireAndSand") {
            newtravianversion = true;
        }
    }
    if (window.location.hash.substr(1) == "activation") {
        return;
    }
    if (window.location.hash.substr(1) == "DeleteCookies") {
        eraseCookie("sess_id");
        eraseCookie("T3E");
        eraseCookie("lowRes");
        return;
    }
    var TravianTacticsStran = 0;
    try {
        test(unsafeWindow.top.location.href)
        if (window.location.href == unsafeWindow.top.location.href) {
            TravianTacticsStran = 3;
        }
        else {
            TravianTacticsStran = 1;
        }
    }
    catch (err) {
        TravianTacticsStran = 1;
    }

    console.log(TravianTacticsStran)
    if (TravianTacticsStran == 1|| (window.location.hostname != TTserver&&TravianTacticsStran==3) ) {
        console.log("TravianTacticsStran")
        var ex = ".//p[@class='silver']";
        TestServera = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        if (TestServera.snapshotLength > 0) {
            TravianServer = 4;
        }
        else if (document.getElementsByClassName("ajaxReplaceableGoldAmount").length > 0) {
            TravianServer = 4.2;
        }
        else {
            TravianServer = 3;
        }
        console.log("TravianServer"+TravianServer)
        SprotnoUpdatanje = "DA";
        var PreverjenLogin = true;
        DodajStyle();
        //console.log("PreverjenLogin" + PreverjenLogin)
        switch (TravianServer) {
            case 3:
                var PreverjenaErrorStran = ErrorStran();
                if (PreverjenaErrorStran && PreverjenLogin) {
                    getSingleVillageNum();
                    PridobiPleme();
                    VrniVillageId();
                }

                Zazeni();
                if (PreverjenaErrorStran && PreverjenLogin) {
                    AnalizirajDorf1();
                    //AnalizirajZbiralisce();
                    AnalizirajTrznico();
                    DodajGumbDodajFarmo();
                    DodajLinkDodajNaCakalnoVrsto();
                    VrniShranjenePodatke();
                }
                break;
            case 4:
            case 4.2:
                var PreverjenaErrorStran = ErrorStran();
                console.log("PreverjenaErrorStran" + PreverjenaErrorStran)
                if (PreverjenaErrorStran && PreverjenLogin) {
                    PridobiPleme();
                    await VrniVillageId();
                }

                Zazeni();
                if (PreverjenaErrorStran && PreverjenLogin) {
				
                    AnalizirajDorf1T4();
                    AnalizirajZbiralisceT4();
                    AnalizirajTrznicoT4();
                    DodajGumbDodajFarmoT4();
                    DodajGumbDodajFarlistT4();
                    DodajLinkDodajNaCakalnoVrstoT4();
                    console.log("pred VrniShranjenePodatke")
                    VrniShranjenePodatke();
                }
                break;

        }
        BeriHash();
        TravianStran();
        //unsafeWindow.top.location.hash="index.php";
    }

    else if (window.location.hostname == TTserver || window.location.hostname == "www." + TTserver && document.location.href.indexOf("86.58.69.167:8080/travianx/") == -1) {
        document.getElementById("CropFinderStart").addEventListener('click', CropFinderEventStart, true);
        document.getElementById("CropFinderStop").addEventListener('click', CropFinderEventStop, true);

        document.getElementById("PosljiSMS").addEventListener('click', UstvariSMSOkno, true);

        document.getElementById("Analiza").addEventListener('click', testna, true);
        document.getElementById("PostRequest").addEventListener('click', PosljiNovServer, true);

        document.getElementById("PridobiGoldLink").addEventListener('click', PridobiGoldLink, true);
        document.getElementById("PridobiServere").addEventListener('click', PridobiServere, true);
        document.getElementById("RegistrirajAcc").addEventListener('click', RegistrirajAcc, true);
        document.getElementById("analizirajReporteEvent").addEventListener('click', function () {
            //alert("aa");
            analiziranje.pridobilinkereportov(document.getElementById("SteviloReportov").value, 1);
        }, true);
        document.getElementById("farmajFarmlist").addEventListener('click', farmajFarmlist, true);

        document.getElementById("ustvariFarmlist").addEventListener('click', ustvariFarmlist, true);

        document.getElementById("izvediTask").addEventListener('click', izvediTask, true);

        document.getElementById("setLang").addEventListener('click', setLang, true);

        document.getElementById("getdata").addEventListener('click', GetDataValues, true);

        document.getElementById("logout").addEventListener('click', LogOut, true);

        document.getElementById("pocistiintervale").addEventListener('click', pocistiintervale, true);

        document.getElementById("odpripopup").addEventListener('click', odpripopup, true);

        document.getElementById("ScriptVersion").value = ScriptVersion;

        document.getElementById("CropFinderHelp").style.display = "none";
        document.getElementById("TravianCropFinder").style.display = "";
        TravianTacticsStran1();
    }
    else {
        TravianStran();
    }
}
function odpripopup() {
    return
    setTimeout(function () {
        GM_openInTab("http://traviantactics.com/data_base/advertisement.php");
    }, 0);
}

function TravianTacticsStran1() {
    if (unsafeWindow.scriptsloaded) {
        //setTimeout(PridobiPodatkeRegistracija,0);// RandomXtoY(300000,1000000));//
        
        setInterval(dodajSporocila, 500);
    }
    else {
        setTimeout(TravianTacticsStran1, 500);
    }
}

function pocistiintervale() {
    try {
        clearTimeout(AttBuilderTimeout);
        clearTimeout(AttBuilderCheckTimeout);
    }
    catch (err) { }
    try {
        clearTimeout(povecajCasinterval);
    }
    catch (err) { }
    try {
        clearTimeout(AnalysingReportTimeout);
    }
    catch (err) { }
    
}

async function dodajSporocila() {

    var hashVal = await GM.getValue(unsafeWindow.SERVERLINK + "_SPREJEM", "");
    
    if (hashVal == "") {
        return;
    }
    await GM.setValue(unsafeWindow.SERVERLINK + "_SPREJEM", "");
    var objekt = eval("(" + hashVal + ")");
    if (unsafeWindow.test221(cloneInto(objekt.type, unsafeWindow))) {
        unsafeWindow.IzvediHashObjekt(cloneInto(objekt, unsafeWindow));
        return;
    }
}

/////////////////////
//// zadnja stran ///
/////////////////////

function ShraniZadnjoStran() {

}

function ShraniZadnjoStran2() {

}

/////////////////////
//// pojavno okno ///
/////////////////////

function PojavnoOkno(zindex) {
    if (!zindex) zindex = document.getElementById("UstvariPojavnoOkno").value;
    this.odprto = false;
    this.zindex = zindex;
    this.id = document.getElementById("PojavnoOknoPodatki").value * 1 + 1;
    var prekritje = document.createElement("div");

    var zindex = this.zindex * 1 - 1;
    prekritje.id = "Prekritje" + this.id;
    prekritje.setAttribute("style", "opacity: 0.7; height: 100%; width: 100%; position: fixed; left: 0px; top: 0px; z-index: " + zindex + "; background-color:#000; cursor:wait;");
    prekritje.addEventListener('click', ZapriPojavnoOknoObjekt2, true);
    this.prekritje = prekritje;

    var pojavnookno = document.createElement("div");
    pojavnookno.id = "PojavnoOkno" + this.id;
    pojavnookno.setAttribute("style", "position: fixed; z-index: " + this.zindex + "; left: 15%; overflow:auto; top: 15%; background: #9CCCF0; width:" + unsafeWindow.SirinaPojavnegaOkna + "px; height:" + unsafeWindow.VisinaPojavnegaOkna + "px;");
    this.okno = pojavnookno;

    this.ustvarix();
    var sirina = unsafeWindow.SirinaPojavnegaOkna - 40;
    var naslov = document.createElement("h1");
    naslov.innerHTML = "";
    naslov.setAttribute("style", "text-align: center; color: red; width: " + sirina + "px;");
    //naslov.style.display="none";
    this.naslov = naslov;
    this.okno.appendChild(this.naslov);

    var vsebina = document.createElement("div");
    vsebina.innerHTML = "";
    vsebina.setAttribute("style", "margin: 20px; color: red; width: " + sirina + "px;");
    //vsebina.style.display="none";
    this.vsebina = vsebina;
    this.okno.appendChild(this.vsebina);

    document.getElementById("PojavnoOknoPodatki").value = this.id;
    this.okno.parent = this;
    this.prekritje.parent = this;

}

PojavnoOkno.prototype.odpri = function () {
    this.odprto = true;
    if (this.naslov.innerHTM != "") this.naslov.style.display = "";
    if (this.vsebina.innerHTM != "") this.vsebina.style.display = "";
    document.body.appendChild(this.okno);
    document.body.appendChild(this.prekritje);
    $(this.okno).corner();

    return true;
}

PojavnoOkno.prototype.ustvarix = function () {
    var koordinataX = unsafeWindow.innerWidth * 0.15 + unsafeWindow.SirinaPojavnegaOkna - 30;
    var koordinataY = unsafeWindow.innerHeight * 0.15 + 10;
    var gumbx = document.createElement("span");
    gumbx.setAttribute("style", "cursor: pointer;color: red; position: fixed; left: " + koordinataX + "px; top: " + koordinataY + "px; z-index: " + this.zindex + ";");
    gumbx.innerHTML = "X";
    gumbx.addEventListener('click', ZapriPojavnoOknoObjekt, true);
    this.okno.appendChild(gumbx);
    return true;

}

PojavnoOkno.prototype.zapri = function () {
    this.odprto = false;
    document.getElementById("PojavnoOkno" + this.id).parentNode.removeChild(document.getElementById("PojavnoOkno" + this.id));
    document.getElementById("Prekritje" + this.id).parentNode.removeChild(document.getElementById("Prekritje" + this.id));
    return true;
}

PojavnoOkno.prototype.nastaviNaslov = function (naslov) {
    this.naslov.innerHTML = naslov;
    if (this.odprto) this.naslov.style.display = "";
    return true;
}

PojavnoOkno.prototype.nastaviVsebino = function (vsebina) {
    this.vsebina.innerHTML = vsebina;
    if (this.odprto) this.naslov.style.display = "";
    return true;
}

PojavnoOkno.prototype.dodajVsebino = function (vsebina) {
    this.vsebina.innerHTML += vsebina;
    if (this.odprto) this.naslov.style.display = "";
    return true;
}

PojavnoOkno.prototype.dodajElement = function (element) {
    this.vsebina.appendChild(element);
    if (this.odprto) this.naslov.style.display = "";
    return true;
}

function ZapriPojavnoOknoObjekt() {
    this.parentNode.parent.zapri();

}

function ZapriPojavnoOknoObjekt2() {
    this.parent.zapri();
}


///////////////
//// style ////
///////////////

function addGlobalStyle(css) {
    GM_addStyle(css);
}


function DodajStyle() {

    var tekstt = '#accessbar-div-0 {';
    tekstt += '  position: fixed;';
    tekstt += '  z-index: 50;';
    tekstt += '  left: 0em;';
    tekstt += '  right: 0;';
    tekstt += '  bottom: 0;';
    tekstt += '  top: auto;';
    tekstt += '  border-top: 1px solid silver;';
    tekstt += '  background: black;';
    tekstt += '  color: white;';
    tekstt += '  margin: 1em 0 0 0;';
    tekstt += '  padding: 0 0 0.4em 0;';
    tekstt += '  width: 0;';
    tekstt += '  height: 0;';
    tekstt += '  font-family: Verdana, sans-serif;';
    tekstt += '  font-size: small;';
    tekstt += '  line-height: 160%;';
    tekstt += '}';
    tekstt += '#accessbar-div-1 {';
    tekstt += '  z-index: 5000;';
    tekstt += '  position: fixed;';
    tekstt += '  right: 28.65em;';
    tekstt += '  bottom: 0;';
    tekstt += '  top: auto;';
    tekstt += '  border-top: 1px solid silver;';
    tekstt += '  background: black;';
    tekstt += '  color: white;';
    tekstt += '  width: 30em;';
    tekstt += '  height: auto;';
    tekstt += '  font-size: small;';
    tekstt += '  line-height: 160%;';
    tekstt += '}';
    tekstt += '#accessbar-div-1 li,';
    tekstt += '#accessbar-div-1 span,';
    tekstt += '#accessbar-div-1 strong {';
    tekstt += '}';
    tekstt += '#accessbar-div-1 div {';
    tekstt += '  margin: 0 1em 0 1em;';
    tekstt += '}';
    tekstt += '#accessbar-div-1 div ul {';
    tekstt += '  margin-left: 0;';
    tekstt += '  padding-left: 0;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-1 div ul li {';
    tekstt += '  margin-left: 0;';
    tekstt += '  border-left: 1px solid silver;';
    tekstt += '}';
    tekstt += '#accessbar-div-1 div ul li.first {';
    tekstt += '  border-left: none;';
    tekstt += '  padding-left: 0;';
    tekstt += '}';
    tekstt += '#accessbar-div-2 {';
    tekstt += '  z-index: 5000;';
    tekstt += '  position: fixed;';
    tekstt += '  left: 20.3em;';
    tekstt += '  right: 0;';
    tekstt += '  bottom: 0;';
    tekstt += '  top: auto;';
    tekstt += '  border-top: 1px solid silver;';
    tekstt += '  background: black;';
    tekstt += '  color: white;';
    tekstt += '  margin: 1em 0 0 0;';
    tekstt += '  padding: 0 0 0.4em 0;';
    tekstt += '  width: 30em;';
    tekstt += '  min-height: 11em;';
    tekstt += '  height: auto;';
    tekstt += '  font-size: small;';
    tekstt += '  line-height: 160%;';
    tekstt += '}';
    tekstt += '#accessbar-div-2 li,';
    tekstt += '#accessbar-div-2 span,';
    tekstt += '#accessbar-div-2 strong {';
    tekstt += '  color: white;';
    tekstt += '}';
    tekstt += '#accessbar-div-2 div {';
    tekstt += '  margin: 0 1em 0 1em;';
    tekstt += '}';
    tekstt += '#accessbar-div-2 div ul {';
    tekstt += '  margin-left: 0;';
    tekstt += '  margin-bottom: 5px;';
    tekstt += '  padding-left: 0;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-2 div ul li {';
    tekstt += '  margin-left: 0;';
    tekstt += '  padding: 3px 15px;';
    tekstt += '  border-left: 1px solid silver;';
    tekstt += '  list-style: none;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-2 div ul li.first {';
    tekstt += '  border-left: none;';
    tekstt += '  padding-left: 0;';
    tekstt += '}';
    tekstt += '#accessbar-div-3 {';
    tekstt += '  z-index: 5000;';
    tekstt += '  position: fixed;';
    tekstt += '  right: 0em;';
    tekstt += '  bottom: 0;';
    tekstt += '  top: auto;';
    tekstt += '  border-top: 1px solid silver;';
    tekstt += '  background: black;';
    tekstt += '  color: white;';
    tekstt += '  margin: 1em 0 0 0;';
    tekstt += '  padding: 0 0 0.4em 0;';
    tekstt += '  width: 28.4em;';
    tekstt += '  height: 30em;';
    tekstt += '  font-family: Verdana, sans-serif;';
    tekstt += '  font-size: small;';
    tekstt += '  line-height: 160%;';
    tekstt += '}';
    tekstt += '#accessbar-div-3 li,';
    tekstt += '#accessbar-div-3 span,';
    tekstt += '#accessbar-div-3 strong {';
    tekstt += '  background-color: transparent;';
    tekstt += '  color: white;';
    tekstt += '}';
    tekstt += '#accessbar-div-3 div {';
    tekstt += '  margin: 0 1em 0 1em;';
    tekstt += '}';
    tekstt += '#accessbar-div-3 div ul {';
    tekstt += '  margin-left: 0;';
    tekstt += '  margin-bottom: 5px;';
    tekstt += '  padding-left: 0;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-3 div ul li {';
    tekstt += '  margin-left: 0;';
    tekstt += '  padding: 3px 15px;';
    tekstt += '  border-left: 1px solid silver;';
    tekstt += '  list-style: none;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-3 div ul li.first {';
    tekstt += '  border-left: none;';
    tekstt += '  padding-left: 0;';
    tekstt += '}';
    tekstt += '#accessbar-div-4 {';
    tekstt += '  position: fixed;';
    tekstt += '  left: 50.5em;';
    tekstt += '  right: 0;';
    tekstt += '  bottom: 13.7em;';
    tekstt += '  top: auto;';
    tekstt += '  border-top: 1px solid silver;';
    tekstt += '  background: black;';
    tekstt += '  color: white;';
    tekstt += '  margin: 1em 0 0 0;';
    tekstt += '  padding: 0 0 0.4em 0;';
    tekstt += '  width: 30em;';
    tekstt += '  height: 13em;';
    tekstt += '  font-family: Verdana, sans-serif;';
    tekstt += '  font-size: small;';
    tekstt += '  line-height: 160%;';
    tekstt += 'text-align: center';
    tekstt += '}';
    tekstt += '#accessbar-div-4 li,';
    tekstt += '#accessbar-div-4 span,';
    tekstt += '#accessbar-div-4 strong {';
    tekstt += '  background-color: transparent;';
    tekstt += '  color: white;';
    tekstt += '}';
    tekstt += '#accessbar-div-4 div {';
    tekstt += '  margin: 0 1em 0 1em;';
    tekstt += '}';
    tekstt += '#accessbar-div-4 div ul {';
    tekstt += '  margin-left: 0;';
    tekstt += '  margin-bottom: 5px;';
    tekstt += '  padding-left: 0;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-4 div ul li {';
    tekstt += '  margin-left: 0;';
    tekstt += '  padding: 3px 15px;';
    tekstt += '  border-left: 1px solid silver;';
    tekstt += '  list-style: none;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-4 div ul li.first {';
    tekstt += '  border-left: none;';
    tekstt += '  padding-left: 0;';
    tekstt += '}';
    tekstt += '#accessbar-div-5 {';
    tekstt += '  position: fixed;';
    tekstt += '  left: 80.8em;';
    tekstt += '  right: 0;';
    tekstt += '  bottom: 0;';
    tekstt += '  top: auto;';
    tekstt += '  border-top: 1px solid silver;';
    tekstt += '  background: black;';
    tekstt += '  color: white;';
    tekstt += '  margin: 1em 0 0 0;';
    tekstt += '  padding: 0 0 0.4em 0;';
    tekstt += '  width: 28.4em;';
    tekstt += '  height: 30em;';
    tekstt += '  font-family: Verdana, sans-serif;';
    tekstt += '  font-size: small;';
    tekstt += '  line-height: 160%;';
    tekstt += '}';
    tekstt += '#accessbar-div-5 li,';
    tekstt += '#accessbar-div-5 span,';
    tekstt += '#accessbar-div-5 strong {';
    tekstt += '  background-color: transparent;';
    tekstt += '  color: white;';
    tekstt += '}';
    tekstt += '#accessbar-div-5 div {';
    tekstt += '  margin: 0 1em 0 1em;';
    tekstt += '}';
    tekstt += '#accessbar-div-5 div ul {';
    tekstt += '  margin-left: 0;';
    tekstt += '  margin-bottom: 5px;';
    tekstt += '  padding-left: 0;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-5 div ul li {';
    tekstt += '  margin-left: 0;';
    tekstt += '  padding: 3px 15px;';
    tekstt += '  border-left: 1px solid silver;';
    tekstt += '  list-style: none;';
    tekstt += '  display: inline;';
    tekstt += '}';
    tekstt += '#accessbar-div-5 div ul li.first {';
    tekstt += '  border-left: none;';
    tekstt += '  padding-left: 0;';
    tekstt += '}';
    tekstt += '#DivBack {';
    tekstt += '  z-index: 5000;';
    tekstt += '  position: fixed;';
    tekstt += '  left: 0em;';
    tekstt += '  top: 20px;';
    tekstt += '}';
    tekstt += '.divScrollAuto {';
    tekstt += '   height:340px;';
    tekstt += '  width:350px;';
    tekstt += ' overflow:auto;';
    tekstt += 'white-space:nowrap;';
    tekstt += '}';
    tekstt += '.divScrollAuto2 {';
    tekstt += '   height:320px;';
    tekstt += '  width:350px;';
    tekstt += ' overflow:auto;';
    tekstt += 'white-space:nowrap;';
    tekstt += '}';
    tekstt += '.divPrazen {';
    tekstt += '  width:350px;';
    tekstt += ' overflow:auto;';
    tekstt += 'white-space:nowrap;';
    tekstt += '}';
    tekstt += '.Red {';
    tekstt += 'background: red;';
    tekstt += '}';
    tekstt += '.StatusTabela {';
    tekstt += 'background: brown;';
    tekstt += '}';
    tekstt += '.Black {';
    tekstt += 'background: black;';
    tekstt += '}';
    tekstt += '.InActive {';
    tekstt += 'background: gray;';
    tekstt += '}';
    tekstt += '.Orange {';
    tekstt += 'background: orange;';
    tekstt += '}';
    tekstt += '.Purple {';
    tekstt += 'background: purple;';
    tekstt += '}';
    tekstt += '.Farme {';
    tekstt += 'border-width: 1px;';
    tekstt += 'border-style: outset;';
    tekstt += 'border-color: white;';
    tekstt += 'text-align: center;';
    tekstt += 'font-size: 12px;';
    tekstt += '}';
    tekstt += '.Mali {';
    tekstt += 'height: 18px;';
    tekstt += 'width: 18px;';
    tekstt += 'font-size:10px;';
    tekstt += '}';
    tekstt += '.PoravnavaDesno {';
    tekstt += 'text-align:right;';
    tekstt += 'width: 100%;';
    tekstt += '}';
    tekstt += '.Sirina100 {';
    tekstt += 'width: 100%;';
    tekstt += 'height: 8px;';
    tekstt += '}';
    tekstt += ' .link1 {background: #FFCC00; text-decoration: none}';
    tekstt += ' .link2 {background: #FFCC00; text-decoration: none}';
    tekstt += ' .link3 {background: #FFCC00; text-decoration: none}';
    tekstt += ' .link4 {font-size:24; font-weight:bold; color: red;}';
    tekstt += '.CrnText {';
    tekstt += '  color: black;';
    tekstt += '}';
    tekstt += '   a.ovalbutton{';
    tekstt += 'background: transparent url("' + LeftGreen + '") no-repeat top left;';
    tekstt += 'display: block;';
    tekstt += 'float: left;';
    tekstt += 'font: normal 13px Tahoma;';
    tekstt += 'line-height: 16px;';
    tekstt += 'height: 24px;';
    tekstt += 'padding-left: 11px;';
    tekstt += 'text-decoration: none;';
    tekstt += '}';
    tekstt += 'a:link.ovalbutton, a:visited.ovalbutton, a:active.ovalbutton{';
    tekstt += 'color: red;';
    tekstt += '}';
    tekstt += 'a.ovalbutton span{';
    tekstt += 'background: transparent url("' + RightGreen + '") no-repeat top right;';
    tekstt += 'display: block;';
    tekstt += 'color: black;';
    tekstt += 'padding: 4px 11px 4px 0;';
    tekstt += '}';
    tekstt += 'a.ovalbutton:hover{';
    tekstt += 'background-position: bottom left;';
    tekstt += '}';
    tekstt += 'a.ovalbutton:hover span{';
    tekstt += 'background-position: bottom right;';
    tekstt += 'color: black;';
    tekstt += '}';
    tekstt += '.buttonwrapper{';
    tekstt += 'width: 100%;';
    tekstt += '}';
    GM_addStyle(tekstt);
}


///////////////
//// ostalo ///
///////////////
NadgradnjaTimeout = 300;
FarmanjeTimeout = 1000;
AnalizaVsehNaselijTimeout = 300;
var NekiElement;

var filterlocila = "+,.-<>¨'!$%&/()=?*@§[]|{}ˇ^˘`˛~°˙´:;_-×÷" + "'" + "\\";
function filtriraj(text) {
    for (var ijhg = 0; ijhg < filterlocila.length; ijhg++) {
        text = text.split(filterlocila.substring(ijhg, ijhg + 1)).join("");
    }
    text = text.split("\n").join("");
    return text;
}

function isNumber(n) {
    if (n == "") return false;

    return !isNaN(parseFloat(n)) && isFinite(n);
}

function pridobiIDjeNaselij() {
    if (document.getElementById("vlist")) {

        var exX = ".//div[@class='cox']";
        var Xkoordinata = document.evaluate(exX, document.getElementById("vlist"), null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

        var exY = ".//div[@class='coy']";
        var Ykoordinata = document.evaluate(exY, document.getElementById("vlist"), null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        var VsiIdji = new Array();

        if (Xkoordinata.snapshotLength && Ykoordinata.snapshotLength)//2 ali vec naselij
        {

            for (var qq = 0; qq < Ykoordinata.snapshotLength; qq++) {
                var Xkoordinata2 = Xkoordinata.snapshotItem(qq).innerHTML.split("(").join("");
                var Ykoordinata2 = Ykoordinata.snapshotItem(qq).innerHTML.split(")").join("");
                var IdNaselja = getCoordfromXY(Xkoordinata2, Ykoordinata2);
                VsiIdji.push(IdNaselja);
            }

        }
        else {
            VsiIdji = ["undefined"];
        }
    }
    else {
        VsiIdji = [ "undefined"];
    }
    return VsiIdji;

}



function IdTrenutneStrani() {
    var stran = document.body.innerHTML; //shrani poizvedbo v stran
    switch (TravianServer) {
        case 3:
            var konec = "0";
            var zacetek = "0";
            if (stran.indexOf('class="dot hl"') != -1)//v textu poisce aktivno vas. Ce jo najde, vrne mesto kjer je, ce ne, pa -1.
            {
                var zacetek3453 = stran.indexOf('class="dot hl"');
                var zacetek634745 = stran.indexOf('?newdid=', zacetek3453);
                var zacetek634746 = stran.indexOf('=', zacetek634745) + 1;
                var konec4235 = zacetek634746 + 1;

                if ((stran.substring(konec4235, konec4235 + 1) != '"') && (stran.substring(konec4235, konec4235 + 1) != '&')) { konec4235++ }
                if ((stran.substring(konec4235, konec4235 + 1) != '"') && (stran.substring(konec4235, konec4235 + 1) != '&')) { konec4235++ }
                if ((stran.substring(konec4235, konec4235 + 1) != '"') && (stran.substring(konec4235, konec4235 + 1) != '&')) { konec4235++ }
                if ((stran.substring(konec4235, konec4235 + 1) != '"') && (stran.substring(konec4235, konec4235 + 1) != '&')) { konec4235++ }
                if ((stran.substring(konec4235, konec4235 + 1) != '"') && (stran.substring(konec4235, konec4235 + 1) != '&')) { konec4235++ }
                if ((stran.substring(konec4235, konec4235 + 1) != '"') && (stran.substring(konec4235, konec4235 + 1) != '&')) { konec4235++ }
                if ((stran.substring(konec4235, konec4235 + 1) != '"') && (stran.substring(konec4235, konec4235 + 1) != '&')) { konec4235++ }
                if ((stran.substring(konec4235, konec4235 + 1) != '"') && (stran.substring(konec4235, konec4235 + 1) != '&')) { konec4235++ }

                var VilligeId = stran.substring(zacetek634746, konec4235);
                var zacetek634747 = stran.indexOf('>', konec4235) + 1;
                var konec1653467 = stran.indexOf('<', zacetek634747);
                var VilligeName = stran.substring(zacetek634747, konec1653467);
                ActiveVilligeId = [VilligeId, VilligeName];
                return ActiveVilligeId[0];
            }
            else {
                var ImeNaselja = "singlevillage";
                ActiveVilligeId = ["9999999999", ImeNaselja];
                return ActiveVilligeId[0];
            }
            break;

        case 4.2:
            var naseljjj = document.getElementById("sidebarBoxVillagelist");
            var allvillages = document.evaluate("//a[contains(@href, 'newdid=')]", naseljjj, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            for (var i = 0; i < allvillages.snapshotLength; i++) {
                if (allvillages.snapshotItem(i).getAttribute("class") == "active") {
                    return allvillages.snapshotItem(i).getAttribute("href").match(/[\d\.]+/g)[0] * 1;
                }
            }
            break;
        case 4:
            var VilligeId = 0;
            var zacetek3453 = stran.indexOf('class="entry active"');
            if (zacetek3453 == -1) { zacetek3453 = stran.indexOf('class="entry attack active"'); }
            if (zacetek3453 != -1) {
                zacetek3453 = stran.indexOf('newdid=', zacetek3453);
                zacetek3453 += 7;
                var zacetek634745 = stran.indexOf('"', zacetek3453);
                var VilligeId = stran.substring(zacetek3453, zacetek634745);
                var zacetek634746 = VilligeId.indexOf('&');
                if (zacetek634746 >= 0) {
                    VilligeId = VilligeId.substring(0, zacetek634746);
                }
            }
            else {
                var exA = ".//a[contains(@href, 'newdid=')]";
                var vsilinki = document.evaluate(exA, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (vsilinki.snapshotLength) {
                    for (var j = 0; j < vsilinki.snapshotLength; j++) {
                        var link = vsilinki.snapshotItem(j).getAttribute("href");
                        if (vsilinki.snapshotItem(j).parentNode.getAttribute("class").indexOf("active") > -1) {
                            VilligeId = link.split("newdid=")[1].split("&")[0] * 1;
                            break;
                        }

                    }
                }
            }


            try {
                zacetek3453 = stran.indexOf('>', zacetek3453);
                zacetek3453 += 1;
                zacetek634745 = stran.indexOf('<', zacetek3453);

                var VilligeName = stran.substring(zacetek3453, zacetek634745);
                zacetek634745 = VilligeName.indexOf(';');
            } catch (err) {
                VilligeName = "Unknown";
            }
            ActiveVilligeId = [VilligeId, VilligeName];
            return ActiveVilligeId[0];
            break;
    }
}

function getSingleVillageNum() {
    var exA = ".//a[contains(@href, 'uid=')]";
    var TestMojProfil = document.evaluate(exA, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    if (TestMojProfil.snapshotLength) {
        var uid = TestMojProfil.snapshotItem(0).getAttribute("href").split("uid=")[1];
    }
    else {
        return;
    }

    if ("undefined" != "undefined") {
        return;
    }

    GM.xmlHttpRequest({
        method: "GET",
        url: window.location.href.split("/")[0]+"//" + document.domain + "/spieler.php",
        headers: {
            //"Content-Type" : "application/x-www-form-urlencoded" 

        },
        //data: "is_correct="+pravilno+"&password="+password+"&username="+username+"&ticket="+id,
        onload: function (response1) {

            var analizadiv = document.createElement("div");
            analizadiv.innerHTML = response1.responseText;

            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = response1.responseText;

            if (!analiziranje.preverilogin(doc)) {
                setTimeout(function () {

                }, 60000);
                return;
            }

            var exA = ".//a[contains(@href, 'karte.php?d=')]";
            var TestMojProfil = doc.evaluate(exA, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (TestMojProfil.snapshotLength) {
                var link = TestMojProfil.snapshotItem(0).getAttribute("href");
                var id = link.split("d=")[1].split("&")[0];
                var name = TestMojProfil.snapshotItem(0).innerHTML;
            
            }
        },
        onerror: function errorhand() {

        }
    });
}

function ArrayToString(array) {
    var string = "";
    if (array instanceof Array) {
        string += "[";
        for (var i = 0; i < array.length; i++) {
            if (i != 0) { string += ","; }
            if (array[i] instanceof Array) {
                string += ArrayToString(array[i])
            }
            else if (typeof (array[i]) == "string") {
                string += '"' + array[i] + '"';
            }
            else {
                string += array[i];
            }

        }
        string += "]";
    }
    return string;
}

function PreveriPolje(polje, element) {
    //try{
    for (var iii = 0; iii < polje.length; iii++) {
        if (polje[iii] == element) {
            return true;
        }
    }
    //    }
    //catch(err){return false}
    return false;
}

function myacc() {
    return server2 + "_" + getuid();
}

function getCoordfromXY(x, y) {
    if (!isNumber(x)) {
        var xstr = x + "";
        var xstr2 = "";
        for (var i = 0; i <= xstr.length; i++) {
            if (isNumber(xstr.substring(i, i + 1)) || xstr.substring(i, i + 1) == "-") {
                xstr2 += xstr.substring(i, i + 1);
            }
        }
        x = xstr2 * 1;
    }

    if (!isNumber(y)) {
        var ystr = y + "";
        var ystr2 = "";
        for (var i = 0; i <= ystr.length; i++) {
            if (isNumber(ystr.substring(i, i + 1)) || ystr.substring(i, i + 1) == "-") {
                ystr2 += ystr.substring(i, i + 1);
            }
        }
        y = ystr2 * 1;
    }

    var coordZ = (x * 1 + 401) + ((400 - y * 1) * 801);
    if (newtravianversion) {
        //console.log("new vers")
        //console.log(x)
        //console.log(y)
        
        coordZ = (x + 201) + ((200 - y) * 401);
    }
    return coordZ;
}

function getXfromCoord(z) {
    z = parseInt(z);
    var x = ((z - 1) % 801) - 400;
    if (newtravianversion) {
        x = ((z - 1) % 401) - 200;
    }
    return x;
}

function getYfromCoord(z) {
    z = parseInt(z);
    var y = 400 - (parseInt(((z - 1) / 801)));
    if (newtravianversion) {
        y = 200 - (parseInt(((z - 1) / 401)));
    }
    return y;
}

function getuid() {
    switch (TravianServer) {
        case 3:
            if (document.getElementsByName('login').length) {
                return 1234567890;
            }
            var privatee = document.evaluate("\x69\x64\x28\x22\x73\x69\x64\x65\x5F\x6E\x61\x76\x69\x22\x29\x2F\x64\x65\x73\x63\x65\x6E\x64\x61\x6E\x74\x3A\x3A\x61\x5B\x63\x6F\x6E\x74\x61\x69\x6E\x73\x28\x40\x68\x72\x65\x66\x2C\x22\x73\x70\x69\x65\x6C\x65\x72\x22\x29\x5D", document, null, 9, null);
            var privatea = document.evaluate("\x69\x64\x28\x22\x73\x6C\x65\x66\x74\x22\x29\x2F\x64\x65\x73\x63\x65\x6E\x64\x61\x6E\x74\x3A\x3A\x61\x5B\x63\x6F\x6E\x74\x61\x69\x6E\x73\x28\x40\x68\x72\x65\x66\x2C\x22\x73\x70\x69\x65\x6C\x65\x72\x22\x29\x5D", document, null, 9, null);

            if (privatee.singleNodeValue != null) {
                privateea = (privatee.singleNodeValue) ? privatee : privatea;
                return privateea.singleNodeValue.getAttribute("href").split("uid=")[1];
            }
            else {
                return 1234567890;
            }
            break;
        case 4:
            var ex = ".//a[@class='signLink' and contains(@href, 'spieler.php')]";
            var UserID = document.evaluate(
            ex,
            document,
            null,
            XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
            null);
            if (UserID.snapshotLength) {
                return UserID.snapshotItem(0).getAttribute("href").split("uid=")[1].match(/[\d\.]+/g)[0] * 1; ;
            }
            else {
                return 1234567890;
            }
            break;
        case 4.2:
            var nek = document.getElementsByClassName("heroImage")[0].getAttribute("src").split("uid=")[1].split("&")[0];
            return nek;
            break;
    }
}

function getname() {
    switch (TravianServer) {
        case 3:
            if (document.getElementsByName('login').length) {
                return 1234567890;
            }
            var privatee = document.evaluate("\x69\x64\x28\x22\x73\x69\x64\x65\x5F\x6E\x61\x76\x69\x22\x29\x2F\x64\x65\x73\x63\x65\x6E\x64\x61\x6E\x74\x3A\x3A\x61\x5B\x63\x6F\x6E\x74\x61\x69\x6E\x73\x28\x40\x68\x72\x65\x66\x2C\x22\x73\x70\x69\x65\x6C\x65\x72\x22\x29\x5D", document, null, 9, null);
            var privatea = document.evaluate("\x69\x64\x28\x22\x73\x6C\x65\x66\x74\x22\x29\x2F\x64\x65\x73\x63\x65\x6E\x64\x61\x6E\x74\x3A\x3A\x61\x5B\x63\x6F\x6E\x74\x61\x69\x6E\x73\x28\x40\x68\x72\x65\x66\x2C\x22\x73\x70\x69\x65\x6C\x65\x72\x22\x29\x5D", document, null, 9, null);

            if (privatee.singleNodeValue != null) {
                privateea = (privatee.singleNodeValue) ? privatee : privatea;
                return privateea.singleNodeValue.getAttribute("href").split("uid=")[1];
            }
            else {
                return 1234567890;
            }
            break;
        case 4:
            var ex = ".//a[@class='signLink' and contains(@href, 'spieler.php')]";
            var UserID = document.evaluate(
            ex,
            document,
            null,
            XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
            null);
            if (UserID.snapshotLength) {
                try {
                    var name = UserID.snapshotItem(0).getElementsByTagName("span")[0].innerHTML;
                    return name;
                }
                catch (err) {
                    return "Unknown";
                }
            }
            else {
                return "Unknown";
            }
            break;
    }
}

function currentServer() {
    var serverr = window.location.hostname.replace(/\.travian\./, "");
    return serverr;
}

function dodatek(id_vasi) {
    if (!id_vasi) { var id_vasi = ActiveVilligeId[0] }
    return currentServer() + "_" + getuid() + "_" + id_vasi + "_";
}

function getAllVillageNewdids() {
    var Dodaj = "DA";

    var allNewdids = new Array();
    var ImenaVasi = new Array();
    switch (TravianServer) {
        case 3:
            var allvillages = document.evaluate('id("vlist")/descendant::a[@href]', document, null, 6, null);
            if (allvillages.snapshotLength > 0) {//multi-villages
                for (var i = 0; i < allvillages.snapshotLength; i++) {
                    if (allvillages.snapshotItem(i).getAttribute("href").indexOf("newdid") != -1) {
                        newdiddd = allvillages.snapshotItem(i).getAttribute("href").split("newdid=")[1].match(/[\d\.]+/g)[0] * 1; //.match(/\d{3,}(?!\.)/);
                        if (allNewdids[allNewdids.length - 1] * 1 == newdiddd * 1) {
                        }
                        else {
                            thenewlength = allNewdids.push(newdiddd);
                            novoime = allvillages.snapshotItem(i).innerHTML;
                            ImenaVasi.push(novoime);
                        }
                    }
                }
            }
            else {//single village
                return [[ '9999999999'], ["singlevillage"]];
            }
            if (allNewdids.length == 1) { return [['9999999999'], ["singlevillage"]]; }
            else { return [allNewdids, ImenaVasi]; }
            break;
        case 4:

            var allvillages = document.evaluate("//div[@id='villageList']", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            var allvillages1 = allvillages.snapshotItem(0);
            allvillages = document.evaluate("//div[contains(@class, 'list')]", allvillages1, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            allvillages1 = allvillages.snapshotItem(0);
            allvillages = document.evaluate('.//a', allvillages1, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (allvillages.snapshotLength > 0) {
                for (var i = 0; i < allvillages.snapshotLength; i++) {
                    if (allvillages.snapshotItem(i).getAttribute("href").indexOf("newdid") != -1) {
                        newdiddd = allvillages.snapshotItem(i).getAttribute("href").split("newdid=")[1].match(/[\d\.]+/g)[0] * 1; //.match(/\d{3,}(?!\.)/);
                        if (allNewdids[allNewdids.length - 1] * 1 == newdiddd * 1) {
                        }
                        else {
                            thenewlength = allNewdids.push(newdiddd);
                            novoime = allvillages.snapshotItem(i).innerHTML;
                            ImenaVasi.push(novoime);
                        }
                    }
                }
            }

            return [allNewdids, ImenaVasi];
            break;
    }
}

function test(test) {
    return true;
}

function PravilnoNaselje(doc, z) {
    var lastrep = 1;
    var troopsInOase = true;
    if (unsafeWindow.PLAYER.CheckLastReport) {
        try {
            var link22 = doc.evaluate(".//table[contains(@id, 'troop_info')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (link22.snapshotItem(0).getElementsByTagName("td")[0].getElementsByTagName("img")[0].getAttribute("class").indexOf("Report") > -1)
            {
                lastrep = link22.snapshotItem(0).getElementsByTagName("td")[0].getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
            }

        }
        catch (err) {
            //no last report
        }

    }

    if (unsafeWindow.PLAYER.CheckTroopsInOases) {
        var link33 = doc.evaluate(".//img[contains(@class, 'unit u')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        if (link33.snapshotLength) {
            troopsInOase = false;
        }
    }
		
    var link2 = doc.evaluate(".//a[contains(@href, 'z=" + z + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    console.log("PravilnoNaselje")
    if (TravianServer == 3) {
        var link2 = doc.evaluate(".//a[contains(@href, 'z=" + z.split("&")[0] + "')][contains(@href, 'a2b.php')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    }
    console.log(link2.snapshotLength)
    console.log(lastrep)
    console.log(troopsInOase)
    if (link2.snapshotLength && lastrep == 1 && troopsInOase) {
        if (link2.snapshotItem(0).getAttribute("href").indexOf("gid=17") > -1) {
            console.log("false1")
            return false;
        }
        else {
            return link2.snapshotItem(0).getAttribute("href");
        }
    }
    else {
        console.log("false2")
        return false;
    }

}



function Element(Element, TagName, AttributeName, AttributeValue, number) {

    NekElement = document.evaluate(".//" + TagName + "[@" + AttributeName + "='" + AttributeValue + "']", Element, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    if (NekElement.snapshotLength) {
        return NekElement.snapshotItem(number);
    }
    else {
        return "Error";
    }
}

async function DodajPodatkeZaVracanje(text) {
    console.log("pred gm set")
    Podatki = await GM.getValue(server2 + "_PODATKI_VRACANJE", "");
    console.log(Podatki)
    if (Podatki == "") {
        var Podatki2 = {
            type: "MULTIDATA",
            dataNumber: 1,
            D0: text
        }

    }
    else {
        var Podatki2 = eval("(" + Podatki + ")");
        Podatki2["D" + Podatki2.dataNumber] = text;
        Podatki2.dataNumber = Podatki2.dataNumber * 1 + 1;
    }
    console.log("pred gm set")
    await GM.setValue(server2 + "_PODATKI_VRACANJE", JSON.stringify(Podatki2));
}

async function VrniShranjenePodatke() {
    vrnjeno = true;

    var podatkizavracanje = await GM.getValue(server2 + "_PODATKI_VRACANJE", "")
    console.log("podatkizavracanje");
    console.log(podatkizavracanje);
    if (podatkizavracanje != "") {
        await GM.setValue(document.domain + "_SPREJEM", podatkizavracanje);
        //
        //unsafeWindow.top.location.hash = podatkizavracanje;
    }
    await GM.setValue(server2 + "_PODATKI_VRACANJE", "")

}

async function VrniVillageId() {
    IdNaselja = IdTrenutneStrani();
    var Tvers =
    {
        type: "TravianVersion",
        version: TravianServer
    }
    //DodajPodatkeZaVracanje(JSON.stringify(Tvers));

    var CurrVill =
    {
        type: "CurretVillage",
        villageid: IdNaselja,
        uid: getuid()
    }
    await DodajPodatkeZaVracanje(JSON.stringify(CurrVill));
}

function HitrostEnot(enote, pleme) {
    var dodatnahitrost = 1;

    if (speed == 3 || speed == 5) {
        dodatnahitrost = 2;
    }

    if (pleme == 0) {
        //rimljani
        var dodatek24 = 0;
    }
    else if (pleme == 1) {
        //tevtoni
        var dodatek24 = 10;
    }
    else if (pleme == 2) {
        //galci
        var dodatek24 = 20;
    }
    else {
    }
    var MinHitrost = 100;
    for (var k = 1; k < enote.length; k++) {
        var HitrostTeEnote = uc[k + dodatek24][9];
        var StEnot = enote[k];
        if (HitrostTeEnote < MinHitrost && StEnot > 0) {
            MinHitrost = HitrostTeEnote;
        }

    }



    return MinHitrost * dodatnahitrost;
}


function HitrostEnot2(enote, pleme) {
    var dodatnahitrost = 1;

    if (unsafeWindow.speed == 3 || unsafeWindow.speed == 5) {
        dodatnahitrost = 2;
    }

    if (pleme == 0) {
        //rimljani
        var dodatek24 = 0;
    }
    else if (pleme == 1) {
        //tevtoni
        var dodatek24 = 10;
    }
    else if (pleme == 2) {
        //galci
        var dodatek24 = 20;
    }
    else {
    }
    var MinHitrost = 100;
    for (var k = 1; k < enote.length; k++) {
        var HitrostTeEnote = uc[k + dodatek24][9];
        var StEnot = enote[k];
        if (HitrostTeEnote < MinHitrost && StEnot > 0) {
            MinHitrost = HitrostTeEnote;
        }

    }



    return MinHitrost * dodatnahitrost;
}


function PridobiRazdaljo(x1, y1, x2, y2) {
    var razdalja1 = Math.sqrt((x1 - x2 + 801) * (x1 - x2 + 801) + (y1 - y2) * (y1 - y2));
    var razdalja2 = Math.sqrt((x1 - x2 - 801) * (x1 - x2 - 801) + (y1 - y2) * (y1 - y2));
    var razdalja3 = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2 + 801) * (y1 - y2 + 801));
    var razdalja4 = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2 - 801) * (y1 - y2 - 801));
    var razdalja5 = Math.sqrt((x1 - x2 + 801) * (x1 - x2 + 801) + (y1 - y2 + 801) * (y1 - y2 + 801));
    var razdalja6 = Math.sqrt((x1 - x2 - 801) * (x1 - x2 - 801) + (y1 - y2 + 801) * (y1 - y2 + 801));
    var razdalja7 = Math.sqrt((x1 - x2 + 801) * (x1 - x2 + 801) + (y1 - y2 - 801) * (y1 - y2 - 801));
    var razdalja8 = Math.sqrt((x1 - x2 - 801) * (x1 - x2 - 801) + (y1 - y2 - 801) * (y1 - y2 - 801));
    var razdalja9 = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
    var razdalja = Math.min(razdalja1, razdalja2);
    razdalja = Math.min(razdalja, razdalja3);
    razdalja = Math.min(razdalja, razdalja4);
    razdalja = Math.min(razdalja, razdalja5);
    razdalja = Math.min(razdalja, razdalja6);
    razdalja = Math.min(razdalja, razdalja7);
    razdalja = Math.min(razdalja, razdalja8);
    razdalja = Math.min(razdalja, razdalja9);
    return razdalja
}

function pridobiRazlikoVCasih() {
    var ServerCas = serverCas(doc);
    var ServerCas2 = new Date();
    ServerCas2.setHours(ServerCas[0], ServerCas[1], ServerCas[2], 0);

    var ClientCas2 = new Date();
    ClientCas2.setMilliseconds(0);
    var RazlikaVCasih = ClientCas2.getTime() - ServerCas2.getTime();
    return RazlikaVCasih / 1000;
}

function KoordinateAktivneVasi2() {
    if (TravianServer * 1 == 4) {
        var idtrenutne = StevilkaTrenutneVasi();
        return [getXfromCoord(idtrenutne) * 1, getYfromCoord(idtrenutne) * 1];
    }


    var ex = ".//td[@class='dot hl']";
    var VrsticaNaselja = document.evaluate(
  	ex,
	document,
	null,
	XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
	null);

    if (VrsticaNaselja.snapshotLength == 0) {
        var IdTrenutnegaNaselja = 12345678 * 1;
        var KoordinataX = getXfromCoord(IdTrenutnegaNaselja) * 1;
        var KoordinataY = getYfromCoord(IdTrenutnegaNaselja) * 1;
        return [KoordinataX, KoordinataY];
    }
    else {
        var PravaVrstica = VrsticaNaselja.snapshotItem(0).parentNode;
        var ex = ".//div[@class='cox']";
        var KoordinataX = document.evaluate(ex, PravaVrstica, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

        var ex = ".//div[@class='coy']";
        var KoordinataY = document.evaluate(ex, PravaVrstica, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

        if (KoordinataX.snapshotLength && KoordinataY.snapshotLength) {
            KoordinataX = KoordinataX.snapshotItem(0).innerHTML.split("(").join("") * 1;
            KoordinataY = KoordinataY.snapshotItem(0).innerHTML.split(")").join("") * 1;
            return [KoordinataX, KoordinataY];
        }
        else {
            var IdTrenutnegaNaselja = 12345678 * 1;
            var KoordinataX = getXfromCoord(IdTrenutnegaNaselja) * 1;
            var KoordinataY = getYfromCoord(IdTrenutnegaNaselja) * 1;
            return [KoordinataX, KoordinataY];
        }

    }

}

function pridobiVseIdje() {
    switch (TravianServer*1) {
        case 3:
            var ex = ".//div[@class='cox']";
            var KoordinataX = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

            var ex = ".//div[@class='coy']";
            var KoordinataY = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            var IdjiNaselij = new Array();
            if (KoordinataX.snapshotLength && KoordinataY.snapshotLength) {
                for (var ighjg = 0; ighjg < KoordinataY.snapshotLength; ighjg++) {
                    var TaKoordinataX = KoordinataX.snapshotItem(ighjg).innerHTML.split("(").join("") * 1;
                    var TaKoordinataY = KoordinataY.snapshotItem(ighjg).innerHTML.split(")").join("") * 1;
                    var IdTegaNaselja = getCoordfromXY(TaKoordinataX, TaKoordinataY);
                    IdjiNaselij.push(IdTegaNaselja);
                }
                return IdjiNaselij;
            }
            else {
                var exA = ".//a[contains(@href, 'uid=')]";
                var TestMojProfil = document.evaluate(exA, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (TestMojProfil.snapshotLength) {
                    var uid = TestMojProfil.snapshotItem(0).getAttribute("href").split("uid=")[1];
                }

                var IdTrenutnegaNaselja =  "9999999999";


                return [IdTrenutnegaNaselja];
            }
            break;
        case 4:
            var iiiiiiii = IdjiNaselijT4;
            iiiiiiii.imena = ImenaNaselijT4;
            return iiiiiiii;
            break;
        case 4.2:
            var idjiii = new Array();
            var imena = new Array();
            var naseljjj = document.getElementById("sidebarBoxVillagelist");
            var allvillages = document.evaluate("//a[contains(@href, 'newdid=')]", naseljjj, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            for (var i = 0; i < allvillages.snapshotLength; i++) {
                try {
                    var villid = allvillages.snapshotItem(i).getAttribute("href").match(/[\d\.]+/g)[0] * 1;
                    var coorx = allvillages.snapshotItem(i).getElementsByClassName("coordinateX")[0].innerHTML.split("(").join("");
                    var coory = allvillages.snapshotItem(i).getElementsByClassName("coordinateY")[0].innerHTML.split(")").join("");
                    var villagename = allvillages.snapshotItem(i).getElementsByClassName("name")[0].innerHTML;
                    var IdTegaNaselja = getCoordfromXY(coorx, coory);
                    villagename = filtriraj(villagename);
                    imena.push(villagename);
                    idjiii.push(IdTegaNaselja);
                }
                catch (err) {
                }
                //                allNewdids.push(villid);
            }
            idjiii.imena = imena;
            return idjiii;
            break;
    }
}

function preveriString(string1, string2) {
    for (var i = 0; i < string1.length; i++) {
        if (string1.substring(i, i + 1) != string2.substring(i, i + 1)) {
            return false;
        }
    }
    return true;
}

function RandomXtoY(x, y) {
    return Math.round(Math.random() * (y - x)) + x;
}

function randomXToY(x, y) {
    return Math.round(Math.random() * (y - x)) + x;
}


function PosljiServer(naselje, podatki, tip) {
    var RequestPoslji = false;
    var parameters = "";
    switch (tip) {
        case "Gradnja":
            parameters = "myidvillage=" + naselje + "&mytext=" + podatki + "&type=" + tip;
            RequestPoslji = true;
            break;
        default:
            RequestPoslji = false;
    }
    if (RequestPoslji) {

        var PostRequest = null;
        PostRequest = new XMLHttpRequest;
        PostRequest.onreadystatechange = function () {
            if (xmlhttp27452.readyState == 4) {
                if (xmlhttp27452.status == 200) {
                    var D = xmlhttp27452.responseText;
                }
            }

        };
        PostRequest.open('POST', "addtobuilder.php", true);
        PostRequest.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
        PostRequest.setRequestHeader("Content-length", parameters.length);
        PostRequest.setRequestHeader("Connection", "close");
        PostRequest.send(parameters);

    }

}

function ErrorStran() {
    return true
}

function Preverilogin()//login okno
{

    return true;

}

function PreveriLogin(doc, func) {
    if (doc.getElementsByName('login').length != 0 || (doc.getElementsByName('user').length != 0 && unsafeWindow.SERVERLINK.indexOf("86.58.69.167:8080/travian") > -1)) {
        frames[0].location.href = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/login.php";
        unsafeWindow.SpremeniStatus("Waiting for login");
        eval(func);
        return false;
    }
    return true;

}

function PreveriLoginTask(doc, url) {
    console.log("check login")
    if (doc.getElementsByName('login').length != 0 || (doc.getElementsByName('user').length != 0 && unsafeWindow.SERVERLINK.indexOf("86.58.69.167:8080/travian") > -1)) {
        /*frames[0].location.href = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/login.php";
        unsafeWindow.SpremeniStatus("Waiting for login");
        setTimeout(function () {
            if (unsafeWindow.Stopped == false) {
                setTimeout(unsafeWindow.Start, 100);
            }
        }, 60000);*/
        console.log("check login1")
        if (unsafeWindow.PLAYER.autologinon)
        {
            console.log("check login2")
            unsafeWindow.SpremeniStatus("Logged out. Trying to relogin.");
            var s1 = doc.getElementsByName("s1")
            if (s1.length>0)
            {
                s1=s1[0].value
            }
            else {
                unsafeWindow.StopEvent();
                unsafeWindow.SpremeniStatus("Logged out. Something went wrong trying to relogin. Bot stopped");
                return false
            }
            console.log("check login3")
            var login = doc.getElementsByName("login")
            if (login.length>0)
            {
                login=login[0].value
            }
            else
            {
                unsafeWindow.StopEvent();
                unsafeWindow.SpremeniStatus("Logged out. Something went wrong trying to relogin. Bot stopped");
                return false
            }
            console.log("check login4")
            console.log(data)
            var data = "name=" + unsafeWindow.PLAYER.username + "&password=" + unsafeWindow.PLAYER.password + "&s1=" + s1 + "&w=" + screen.width + "%3A" + screen.height + "&login=" + login
            console.log(data)
            console.log("check login5")
            setTimeout(function () {
                var serverlink = unsafeWindow.SERVERLINK;
                var headers = {
                    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                    "Content-Type": "application/x-www-form-urlencoded",
                }
                if (url)
                {
                    headers["Referer"]=url
                }
                console.log("sending post")
                GM.xmlHttpRequest(
                {
                    method: "POST",
                    url: unsafeWindow.http + "://" + serverlink + "/dorf1.php",
                    data: data,
                    headers: headers,
                    onload: function (responseDetails) {
                        
                        var parser = new DOMParser();
                        var doc1 = parser.parseFromString(responseDetails.responseText, "text/html");
                        //log(responseDetails)
                        analizirajNaselje(doc1, unsafeWindow.http + "://" + serverlink + "/dorf1.php", responseDetails.responseText)
                        //return
                        //callbackfunction(responseDetails, responseDetails.json, responseDetails.status, responseDetails.statusText, responseDetails.responseHeaders, doc, url);

                        if (doc1.getElementsByName('login').length != 0 || (doc1.getElementsByName('user').length != 0 && unsafeWindow.SERVERLINK.indexOf("86.58.69.167:8080/travian") > -1)) {
                            unsafeWindow.StopEvent();
                            unsafeWindow.SpremeniStatus("Logged out. relogin failed. Bot stopped.");
                            return false
                        }
                        setTimeout(function () {
                            if (unsafeWindow.Stopped == false) {
                                unsafeWindow.StartEvent();
                            }
                        }, 1000);
                    },
                    onerror: function errorhand() { }
                });
            }, 1000);
        }
        else
        {
            unsafeWindow.StopEvent();
            unsafeWindow.SpremeniStatus("Logged out. Autologin disabled, bot stopped. To enable autologin, go to Options->Autologin");
        }
        return false;
    }
    var ex = ".//a[@href='logout.php?e=0']";
    var trenutnastran = doc.evaluate(
    ex,
    doc,
    null,
    XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
    null);

    if (trenutnastran.snapshotLength) {
        relogin()
        return false;
    }

    return true;

}

function relogin() {
    LogOut();
    unsafeWindow.SpremeniStatus("Logout");
    setTimeout(function () {
        frames[0].location.href = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/login.php";
        unsafeWindow.SpremeniStatus("Waiting for login");
        setTimeout(function () {
            if (unsafeWindow.Stopped == false) {
                setTimeout(unsafeWindow.Start, 100);
            }
        }, 60000);

    }, 10000);
}


function LogOut() {
    setTimeout(function () {
        var serverlink = unsafeWindow.SERVERLINK;
        GM.xmlHttpRequest(
        {
            method: "GET",
            url: unsafeWindow.http+"://" + serverlink + "/logout.php",
            headers:
        {
            "Content-Type": "application/x-www-form-urlencoded"
        },
            onload: function (responseDetails) {
            },
            onerror: function errorhand() { }
        });
    }, 0);

}

function StevilkaTrenutneVasi() {

    var trenutna = IdTrenutneStrani();

    var vse = getAllVillageNewdids()[0];
    for (i = 0; i < vse.length; i++) {
        if (vse[i] * 1 == trenutna * 1) {
            return IdjiNaselijT4[i];
        }
    }


}


function PridobiPleme2(response) {

    var doc = document.implementation.createHTMLDocument('My title');
    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
    doc.documentElement.appendChild(body);
    doc.body.innerHTML = response.responseText;

    var ex1 = ".//img[@class='unit u1']";
    var ex2 = ".//img[@class='unit u11']";
    var ex3 = ".//img[@class='unit u21']";
    var Rimljani = doc.evaluate(
			ex1,
			doc,
			null,
			XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
			null);
    var Tevtoni = doc.evaluate(
			ex2,
			doc,
			null,
			XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
			null);
    var Galci = doc.evaluate(
			ex3,
			doc,
			null,
			XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
			null);

    if (Rimljani.snapshotLength) {
        var Tribe = "0"; //rimljani
    }
    else if (Tevtoni.snapshotLength) {
        var Tribe = "1"; //tevtoni
    }
    else if (Galci.snapshotLength) {
        var Tribe = "2"; //galci
    }
    else {
        var Tribe = "4";
    }


}

function PridobiPleme() {
    return;
   
}


function jfg645fg()//PridobiIgralca
{

    var stran6347 = document.body.innerHTML;
    var Zacetek523476 = stran6347.indexOf("?chatname");
    if (Zacetek523476 == -1) {
        return [server2, getname()];
    }
    else {
        var Zacetek523477 = stran6347.indexOf("=", Zacetek523476) + 1;
        var Konec523477 = stran6347.indexOf("%7C", Zacetek523477);
        var Sfgega = stran6347.substring(Zacetek523477, Konec523477);
        Zacetek523477 = Konec523477 + 3;
        Konec523477 = stran6347.indexOf("\"", Zacetek523477);
        var Ihfgovagh = stran6347.substring(Zacetek523477, Konec523477);
        return [Sfgega, Ihfgovagh]
    }
}


async function VrniServeru(text) {
    await GM.setValue(document.domain + "_SPREJEM", text);
    //unsafeWindow.top.location.hash = text;
}


async function BeriHashHandler() {
    var hashVal = await GM.getValue(document.domain + "_SPREJEM", "");
    if (hashVal == "") {
        return;
    }
    try {
        var objekt = eval("(" + hashVal + ")");
        if (test221(objekt.type)) {


            IzvediHashObjekt(objekt);

            return;
        }

        
    }
    catch (err) {
    }
    //var hashVal = window.location.hash.substr(1);
    //    var Vrednost = hashVal.split("|"); //imeKomande|izvajanje1|izvajanje2...

    //    if (Vrednost.length > 1) {
    //        if (Vrednost[0] == "GetData") {
    //            GetData();
    //        }
    //        if (Vrednost[0] == "GetDataLocal") {
    //            GetDataLocal();
    //        }
    //        if (Vrednost[0] == "GetDeleteData") {
    //            GetDeleteData();
    //        }
    //        window.location.hash = "";
    //    }

}

function BeriHash() {

    setInterval(BeriHashHandler, 1000);

}

function Zazeni() {


}


//////////////////////////////
//// funkcije za piskotke ///
/////////////////////////////

function createCookie(name, value, days) {
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        var expires = "; expires=" + date.toGMTString();
    }
    else var expires = "";
    document.cookie = name + "=" + value + expires + "; path=/";
}

function readCookie(name) {
    var nameEQ = name + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

function eraseCookie(cookie_name) {
    var cookie_date = new Date();  // current date & time
    cookie_date.setTime(cookie_date.getTime() - 1);
    document.cookie = cookie_name += "=; expires=" + cookie_date.toGMTString();
}

function deleteAllCookies() {
    var cookies = document.cookie.split(";");

    for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        var eqPos = cookie.indexOf("=");
        var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
        document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
    }
}

//////////////////////////////////////////
//// funkcije za pridobivanje podatkov ///
//////////////////////////////////////////


function AnalizirajPleme() {
    var serverlink = unsafeWindow.SERVERLINK;
    unsafeWindow.dont_confirm_leave = 0;

    setTimeout(function () {
        GM.xmlHttpRequest(
        {
            method: "GET",
            url: unsafeWindow.http + "://" + serverlink + "/build.php?id=40",
            headers: {},
            onload: function (responseDetails) {

                var parser = new DOMParser();
                var doc = parser.parseFromString(responseDetails.responseText, "text/html");

                //var doc = document.implementation.createHTMLDocument('My title');
                //var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                //doc.documentElement.appendChild(body);
                //doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc, unsafeWindow.http + "://" + serverlink + "/build.php?id=40");
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }

                var tribe = 4;

                var ex = ".//img[contains(@class, 'g3')]";
                var tribeev = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (tribeev.snapshotLength) {
                    try {

                        var tribenumber = tribeev.snapshotItem(0).getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                        switch (tribenumber) {
                            case 31:
                                tribe = 0;
                                break;
                            case 32:
                                tribe = 1;
                                break;
                            case 33:
                                tribe = 2;
                                break;
                        }
                    }
                    catch (err) {
                    }
                }
                
                if (tribe != 4) {
                    unsafeWindow.PLAYER.tribe = tribe;
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Sucessfully analysed tribe.", "Analyse", 0));
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }
                    
                else {
                    unsafeWindow.SpremeniStatus("Unable to detect tribe.")
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Unable to detect tribe.", "Analyse", 0));
                    setTimeout(function () {
                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, RandomXtoY(100000, 200000))
                }
                

            },
            onerror: function errorhand() { }
        });
    }, 0);
}

function GetDataValues() {
    console.log("getdataval")
    var serverlink = unsafeWindow.SERVERLINK;
    unsafeWindow.dont_confirm_leave = 0;

    setTimeout(function () {
        GM.xmlHttpRequest(
        {
            method: "GET",
            url: unsafeWindow.http + "://" + serverlink + "/dorf1.php",
            headers: {},
            onload: function (responseDetails) {
                console.log(responseDetails)
                if(responseDetails.finalUrl)
                {
                    var finalurlhttp = responseDetails.finalUrl.split(":")[0]
                    console.log(finalurlhttp + ";" + unsafeWindow.http)
                    if (finalurlhttp != unsafeWindow.http)
                    {
                        var r = confirm("Your connection is set to use " + unsafeWindow.http + " connection, but server seems to use " + finalurlhttp + ". Do you want to change this setting of bot? (Not changing this setting may cause your bot not to work properly)")
                        if (r == true) {
                            if(finalurlhttp=="https")
                            {
                                unsafeWindow.localStorage.setItem(unsafeWindow.SERVERLINK + "_usehttps1", true);
                                unsafeWindow.http="https"
                            }
                            else if (finalurlhttp == "http")
                            {
                                unsafeWindow.localStorage.setItem(unsafeWindow.SERVERLINK + "_usehttps1", false);
                                unsafeWindow.http = "http"
                            }
                            else {
                                alert("Something unexpected happened, please report it on forum.")
                            }
                        }
                    }
                }

                //var doc = document.implementation.createHTMLDocument('My title');
                //var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                //doc.documentElement.appendChild(body);
                //doc.body.innerHTML = responseDetails.responseText;

                var parser = new DOMParser();
                var doc = parser.parseFromString(responseDetails.responseText, "text/html");

                if (doc.getElementsByName('login').length != 0) {
                    alert("You need to be logged in to be able to get data.");
                    return;
                }

                var TravianServer = 3;
                var ex = ".//p[@class='silver']";
                TestServera = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (TestServera.snapshotLength > 0) {
                    TravianServer = 4;
                }
                else if (doc.getElementsByClassName("ajaxReplaceableGoldAmount").length > 0) {
                    TravianServer = 4.2;
                }
                else {
                    TravianServer = 3;
                }


                var fireAndSand = doc.getElementById("logo")
                if (fireAndSand) {
                    if (fireAndSand.getAttribute("class") == "fireAndSand") {
                        newtravianversion = true;
                        unsafeWindow.newtravianversion = true;
                        unsafeWindow.MapZoom = 2;
                    }
                }
                unsafeWindow.TravianServer = TravianServer;
                var tribe = 4;
                var ex = "//div[contains(@class, 'playerName')]/a/img[contains(@class, 'nation nation')]";
                var tribeev = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                console.log("tribeev.snapshotLength:" + tribeev.snapshotLength)
                console.log(doc.getElementsByClassName("playerName")[0].innerHTML)
                if (tribeev.snapshotLength) {
                    console.log(tribeev.snapshotItem(0).getAttribute("class"))
                    tribe = tribeev.snapshotItem(0).getAttribute("class").match(/[\d\.]+/g)[0] * 1-1;
                    console.log("Tribe:" + tribe)
                }

                var name = "Unknown";
                var uid = 1234567890;
                switch (TravianServer) {
                    case 4.2:
                        var name1 = doc.getElementsByClassName("playerName");
                        var name2 = name1[name1.length - 1];
                        var name1 = name2.getElementsByTagName("a");
                        if (name1.length)
                            name2 = name1[name1.length - 1];

                        if (name2.getElementsByTagName("a").length > 0)
                        {
                            name2 = name2.getElementsByTagName("a")[0];
                        }
                        var slike = name2.getElementsByTagName("img");
                        for (var i = 0; i < slike.length; i++) {
                            slike[i].parentNode.removeChild(slike[i]);
                        }
                        name = name2.innerHTML.split("\n").join("");
                        name = filtriraj(name);
                        var ex = ".//img[contains(@src, 'uid=')]";
                        var UserID = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        if (UserID.snapshotLength) {
                            try {
                                uid = UserID.snapshotItem(0).getAttribute("src").split("uid=")[1].match(/[\d\.]+/g)[0] * 1
                            }
                            catch (err) {
                            }
                        }
                        break;
                    case 4:

                        var ex = ".//a[@class='signLink' and contains(@href, 'spieler.php')]";
                        var UserID = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                        if (UserID.snapshotLength) {
                            try {
                                name = UserID.snapshotItem(0).getElementsByTagName("span")[0].innerHTML;
                                uid = UserID.snapshotItem(0).getAttribute("href").split("uid=")[1].match(/[\d\.]+/g)[0] * 1
                            }
                            catch (err) {
                            }
                        }
                        break;
                    case 3:
                        name = "";
                        var ex = ".//a[contains(@href, 'spieler.php?uid=')]";
                        var UserID = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        if (UserID.snapshotLength) {
                            try {
                                uid = UserID.snapshotItem(0).getAttribute("href").split("uid=")[1].match(/[\d\.]+/g)[0] * 1
                            }
                            catch (err) {
                            }
                        }
                }

                var speed = 1;
                if (serverlink.indexOf("speed") != -1 || serverlink.indexOf("x3.") != -1) {
                    speed = 3;
                }
                if (serverlink.indexOf("x2.") != -1) {
                    speed = 2;
                }
                else if (serverlink.indexOf("x5.") != -1) {
                    speed = 5;
                }
                var server3 = "";
                if (serverlink.indexOf("x3") > -1) {
                    var server3 = serverlink.split(".")[2] + "x3";
                }
                else {
                    try {
                        var server3 = serverlink.split(".")[2] + serverlink.split(".")[0].match(/[\d\.]+/g)[0];
                    }
                    catch (err) {
                    }
                }

                




                var allNewdids = new Array();
                var ImenaVasi = new Array();
                var ImenaNaselijT4 = new Array;
                var IdjiNaselijT4 = new Array;

                switch (TravianServer) {
                    case 3:
                        if (window.chrome != undefined) {
                            //alert("Script does not support chrome + multivillage T3 acc yet. We need acc with at least 2 villages to test it and enable support. Please post this on forum If you can help us.");
                            //allNewdids = ['9999999999'];
                            //ImenaVasi = ["singlevillage"];
                            var allvillages = doc.evaluate('id("vlist")/descendant::a[@href]', doc, null, 6, null);
                            if (allvillages.snapshotLength > 0) {//multi-villages
                                for (var i = 0; i < allvillages.snapshotLength; i++) {
                                    try {
                                        if (allvillages.snapshotItem(i).getAttribute("href").indexOf("newdid") != -1) {
                                            newdiddd = allvillages.snapshotItem(i).getAttribute("href").split("newdid=")[1].match(/[\d\.]+/g)[0] * 1; //.match(/\d{3,}(?!\.)/);
                                            if (allNewdids[allNewdids.length - 1] * 1 == newdiddd * 1) {
                                            }
                                            else {
                                                thenewlength = allNewdids.push(newdiddd);
                                                novoime = allvillages.snapshotItem(i).innerHTML;
                                                ImenaVasi.push(novoime);
                                            }
                                        }
                                    }
                                    catch (err) {
                                        continue;
                                    }
                                }
                            }
                            else {//single village
                                allNewdids = ['9999999999'];
                                ImenaVasi = ["singlevillage"];
                            }
                            //alert(allNewdids.join(","));
                            //alert(ImenaVasi.join(","));
                            //return;
                        }
                        else {
                            var allvillages = doc.evaluate('id("vlist")/descendant::a[@href]', doc, null, 6, null);
                            if (allvillages.snapshotLength > 0) {//multi-villages
                                for (var i = 0; i < allvillages.snapshotLength; i++) {
                                    try {
                                        if (allvillages.snapshotItem(i).getAttribute("href").indexOf("newdid") != -1) {
                                            newdiddd = allvillages.snapshotItem(i).getAttribute("href").split("newdid=")[1].match(/[\d\.]+/g)[0] * 1; //.match(/\d{3,}(?!\.)/);
                                            if (allNewdids[allNewdids.length - 1] * 1 == newdiddd * 1) {
                                            }
                                            else {
                                                thenewlength = allNewdids.push(newdiddd);
                                                novoime = allvillages.snapshotItem(i).innerHTML;
                                                ImenaVasi.push(novoime);
                                            }
                                        }
                                    }
                                    catch (err) {
                                        continue;
                                    }
                                }
                            }
                            else {//single village
                                allNewdids = ['9999999999'];
                                ImenaVasi = ["singlevillage"];
                            }
                        }


                        var ex = ".//div[@class='cox']";
                        var KoordinataX = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                        var ex = ".//div[@class='coy']";
                        var KoordinataY = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        if (KoordinataX.snapshotLength && KoordinataY.snapshotLength) {
                            for (var ighjg = 0; ighjg < KoordinataY.snapshotLength; ighjg++) {
                                var TaKoordinataX = KoordinataX.snapshotItem(ighjg).innerHTML.split("(").join("") * 1;
                                var TaKoordinataY = KoordinataY.snapshotItem(ighjg).innerHTML.split(")").join("") * 1;
                                var IdTegaNaselja = getCoordfromXY(TaKoordinataX, TaKoordinataY);
                                IdjiNaselijT4.push(IdTegaNaselja);
                            }
                        }
                        else {

                            var IdTrenutnegaNaselja = "9999999999";
                            IdjiNaselijT4.push(IdTrenutnegaNaselja);
                        }
                        break;
                    case 4.2:
                        var naseljjj = doc.getElementById("sidebarBoxVillagelist");
                        var allvillages = doc.evaluate("//a[contains(@href, 'newdid=')]", naseljjj, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        for (var i = 0; i < allvillages.snapshotLength; i++) {
                            try {
                                var villid = allvillages.snapshotItem(i).getAttribute("href").match(/[\d\.]+/g)[0] * 1;
                                var coorx = allvillages.snapshotItem(i).getElementsByClassName("coordinateX")[0].innerHTML.split("(").join("");
                                var coory = allvillages.snapshotItem(i).getElementsByClassName("coordinateY")[0].innerHTML.split(")").join("");
                                var villagename = allvillages.snapshotItem(i).getElementsByClassName("name")[0].innerHTML;
                                var IdTegaNaselja = getCoordfromXY(coorx, coory);
                                villagename = filtriraj(villagename);
                                ImenaVasi.push(villagename);
                                IdjiNaselijT4.push(IdTegaNaselja);
                                allNewdids.push(villid);

                            }
                            catch (err) {
                                continue;
                            }
                        }
                        break;
                    case 4:

                        var allvillages = doc.evaluate("//div[@id='villageList']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        var allvillages1 = allvillages.snapshotItem(0);
                        allvillages = doc.evaluate("//div[contains(@class, 'list')]", allvillages1, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        allvillages1 = allvillages.snapshotItem(0);
                        allvillages = doc.evaluate('.//a', allvillages1, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        if (allvillages.snapshotLength > 0) {
                            for (var i = 0; i < allvillages.snapshotLength; i++) {
                                try {
                                    if (allvillages.snapshotItem(i).getAttribute("href").indexOf("newdid") != -1) {
                                        newdiddd = allvillages.snapshotItem(i).getAttribute("href").split("newdid=")[1].match(/[\d\.]+/g)[0] * 1; //.match(/\d{3,}(?!\.)/);
                                        if (allNewdids[allNewdids.length - 1] * 1 == newdiddd * 1) {
                                        }
                                        else {
                                            thenewlength = allNewdids.push(newdiddd);
                                            novoime = allvillages.snapshotItem(i).innerHTML;
                                            ImenaVasi.push(novoime);
                                        }
                                    }
                                }
                                catch (err) {
                                    continue;
                                }
                            }
                        }
                        var divallvillages = doc.getElementById("villageList");
                        var allvillages = doc.evaluate(".//a[contains(@href, 'newdid')]", divallvillages, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        if (allvillages.snapshotLength > 0) {
                            for (var i = 0; i < allvillages.snapshotLength; i++) {
                                try {

                                    if (allvillages.snapshotItem(i).title.indexOf("|") != -1) {
                                        try {
                                            ImenaNaselijT4.push(allvillages.snapshotItem(i).title.split('<span class="coordText">')[1].split("</span>")[0]);
                                            //ImenaNaselijT4.push(allvillages.snapshotItem(i).title.split("(")[1].split(")"));
                                            var koordinate = allvillages.snapshotItem(i).title.split("(")[1].split(")")[0].split("|"); //.match(/\d{3,}(?!\.)/);
                                            mnozenecX = 1;
                                            if (koordinate[0].indexOf("-") != -1) { mnozenecX = -1; }
                                            mnozenecY = 1;
                                            if (koordinate[1].indexOf("-") != -1) { mnozenecY = -1; }

                                            koordinate[0] = koordinate[0].match(/[\d\.]+/g)[0] * mnozenecX;
                                            koordinate[1] = koordinate[1].match(/[\d\.]+/g)[0] * mnozenecY;
                                        }
                                        catch (rtt) {
                                            var negfd = document.createElement("div");
                                            negfd.innerHTML = allvillages.snapshotItem(i).title;
                                            var ex = ".//span[@class='coordinateX']"; koorX = document.evaluate(ex, negfd, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                                            if (koorX.snapshotLength) {
                                                koordinate[0] = koorX.snapshotItem(0).innerHTML.split("(").join("").split(")").join("");
                                            }
                                            var ex = ".//span[@class='coordinateY']";
                                            koorY = document.evaluate(ex, negfd, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                                            if (koorY.snapshotLength) {
                                                koordinate[1] = koorY.snapshotItem(0).innerHTML.split("(").join("").split(")").join("");
                                            }

                                        }
                                        var IdTegaNaselja = getCoordfromXY(koordinate[0], koordinate[1]);

                                        IdjiNaselijT4.push(IdTegaNaselja);
                                    }
                                } catch (err) { continue }
                            }
                        }
                        break;
                }
                var MinRazlika = 0;
                try {
                    var Zdaj = new Date();

                    var ServerCas = serverCas(doc);
                    var ServerCas1 = new Date();
                    ServerCas1.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    var ServerCas2 = new Date();
                    ServerCas2.setDate(ServerCas2.getDate() + 1);
                    ServerCas2.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    var ServerCas3 = new Date();
                    ServerCas3.setDate(ServerCas3.getDate() - 1);
                    ServerCas3.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                    MinRazlika = ServerCas1.getTime() - Zdaj.getTime();
                    if (Math.abs(ServerCas2.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                        MinRazlika = ServerCas2.getTime() - Zdaj.getTime();
                    }
                    if (Math.abs(ServerCas3.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                        MinRazlika = ServerCas3.getTime() - Zdaj.getTime();
                    }
                }
                catch (err) {
                }
                //
                var strrr = unsafeWindow.SERVERLINK.replace(/\.travian\./, "") + "_" + uid + "_0_PLEME";
                var DataObject = {
                    "lang": 3,
                    "uid": uid,
                    "name": name,
                    "speed": speed,
                    "server": server3,
                    "server2": serverlink,
                    "tribe": tribe,
                    "villageIds": IdjiNaselijT4,
                    "villages": allNewdids,
                    "villageNames": ImenaVasi,
                    "task": "local",
                    "type": "PlayerData",
                    "timedif": MinRazlika
                }
                console.log(DataObject)
                testlog();
                unsafeWindow.SetDataFromObject(cloneInto(DataObject, unsafeWindow));

            },
            onerror: function errorhand() { }
        });
    }, 0);
}

function setLang() {
    setTimeout(function () {
        var serverrrrr = document.location.href.substring(document.location.href.indexOf(".travian.") + 9, document.location.href.indexOf("/", document.location.href.indexOf(".travian.") + 9));
        GM.setValue(serverrrrr + "_LANGUAGE", document.getElementById("selectLANGUAGE").value);
    }, 0);
}


function GetData() {
    var PodatkiServer = server2;
    var PodatkiIme = jfg645fg();
    var IdIgralca = getuid();
    var PodatekJezik = Language;
    var PodatekSpeed = speed;
    var Naselja = getAllVillageNewdids();

    var Pleme = 4;
    var VsiIdji = pridobiVseIdje();

    if (IdIgralca != "1234567890" && Naselja[0][0] != "undefined") {


        var PodatkiZaVracanje = "PlayerData|" + PodatkiIme[0] + "|" + PodatkiIme[1] + "|" + IdIgralca + "|" + Naselja[0].join(",") + "|" + Pleme + "|" + PodatekSpeed + "|" + PodatekJezik + "|" + VsiIdji.join(",") + "+TravianVersion|" + TravianServer;
        var PlayerData =
        {
            type: "PlayerData",
            task: "server",
            server: PodatkiIme[0],
            name: PodatkiIme[1],
            uid: IdIgralca,
            villages: Naselja[0],
            villageIds: VsiIdji,
            tribe: Pleme,
            speed: PodatekSpeed,
            lang: PodatekJezik
        }

        var myJSONText = JSON.stringify(PlayerData);

        VrniServeru(myJSONText);

        //VrniServeru(PodatkiZaVracanje);
    }
}

function GetDeleteData() {
    var PodatkiServer = server2;
    var IdIgralca = getuid();
    if (IdIgralca != "1234567890") {
        var DeleteData =
        {
            type: "PlayerData",
            server: PodatkiServer,
            uid: IdIgralca,
            task: "delete"
        }

        var myJSONText = JSON.stringify(DeleteData);

        VrniServeru(myJSONText);
    }
}

function GetDataLocal() {
    var PodatkiServer = server2;
    var PodatkiIme = jfg645fg();
    var IdIgralca = getuid();
    var PodatekJezik = Language;
    var PodatekSpeed = speed;
    var Naselja = getAllVillageNewdids();

    var Pleme = 4;
    var VsiIdji = pridobiVseIdje();
    var PodatkiServer = window.location.hostname;

    var PlayerData =
        {
            type: "PlayerData",
            task: "local",
            server: PodatkiIme[0],
            server2: PodatkiServer,
            name: getname(),
            uid: IdIgralca,
            villages: Naselja[0],
            villageIds: VsiIdji,
            tribe: Pleme,
            speed: PodatekSpeed,
            lang: PodatekJezik
        }
    console.log("PlayerData")
    console.log(PlayerData)
    var myJSONText = JSON.stringify(PlayerData);

    VrniServeru(myJSONText);
}

/////////////////////////////////////
//// funkcije za dodajanje gumbov ///
/////////////////////////////////////

console.log("aaa")
function AnalizirajDorf1T4(iznaloge) {
    console.log("AnalizirajDorf1T4")
    //analizirajNaselje(document,document.location.href)
    if (!iznaloge) { var iznaloge = false }
    if (document.location.href.indexOf("dorf1.php") != -1 && (SprotnoUpdatanje == "DA" || iznaloge)) {
        if (iznaloge == false) {

            var DivGumbDodaj = document.createElement("div");
            DivGumbDodaj.setAttribute("class", "buttonwrapper");
            DivGumbDodaj.setAttribute("style", "margin:10px 0px 0px 0px;");

            TextStopnja = document.createElement("b");
            TextStopnja.innerHTML = prevodi.level + ": ";
            DivGumbDodaj.appendChild(TextStopnja);

            var SeznamOpcij = document.createElement("select");
            SeznamOpcij.setAttribute("class", "dropdown");
            SeznamOpcij.id = "doStopnje";

            for (var StevilkaStopnje = 1; StevilkaStopnje < 21; StevilkaStopnje++) {
                Opcija = document.createElement("option");
                Opcija.value = StevilkaStopnje;
                Opcija.innerHTML = StevilkaStopnje;
                SeznamOpcij.appendChild(Opcija);
            }
            SeznamOpcij.value = 1;

            DivGumbDodaj.appendChild(SeznamOpcij);
            DivGumbDodaj.appendChild(document.createElement("br"));




            var checkboxdiv = document.createElement("div");
            checkboxdiv.innerHTML = "<p style='margin: 10px 0px 0px 0px;'><input type='checkbox' checked='checked' id='upgradeallwood'><span>Wood</span></p>";
            checkboxdiv.innerHTML += "<p style='margin: 0px;'><input type='checkbox' checked='checked' id='upgradeallclay'><span>Clay</span></p>";
            checkboxdiv.innerHTML += "<p style='margin: 0px;'><input type='checkbox' checked='checked' id='upgradealliron'><span>Iron</span></p>";
            checkboxdiv.innerHTML += "<p style='margin: 0px 0px 10px 0px;'><input type='checkbox' checked='checked' id='upgradeallcrop'><span>Crop</span></p>";

            DivGumbDodaj.appendChild(checkboxdiv);

            var Vvrso2 = document.createElement("a");
            Vvrso2.name = "DodajNalogo";
            Vvrso2.innerHTML = '<span>' + prevodi.upgradeallfields + '</span>';
            Vvrso2.style.cursor = 'pointer';
            Vvrso2.setAttribute("class", "ovalbutton");
            Vvrso2.id = "gumb1";
            Vvrso2.addEventListener('click', NadgradiVsaPoljaHandler, true);
            DivGumbDodaj.appendChild(Vvrso2);
            Vvrso2 = null;
            Vrstica = document.createElement("tr");
            Celica = document.createElement("td");
            Celica.setAttribute("colspan", "4");
            Celica.appendChild(DivGumbDodaj);
            DivGumbDodaj = null;
            Vrstica.appendChild(Celica);
            Celica = null;
            TabelaSurovin = document.getElementById("production");
            //alert(TabelaSurovin.childNodes[2].innerHTML);
            TabelaSurovin.childNodes[3].appendChild(Vrstica);
            Vrstica = null;
            TabelaSurovin = null;
            //document.getElementById("build").

        }

    }

}



function AnalizirajDorf1(iznaloge) {
    console.log("dodajgumbdorf1")
    //alert("test")
    if (TravianServer == 4) {
        AnalizirajDorf1T4(iznaloge);
        return;
    }


    if (document.location.href.indexOf("dorf1.php") != -1) {


        var DivGumbDodaj = document.createElement("div");
        DivGumbDodaj.setAttribute("class", "buttonwrapper");


        TextStopnja = document.createElement("b");
        TextStopnja.innerHTML = prevodi.level + ": ";
        DivGumbDodaj.appendChild(TextStopnja);

        var SeznamOpcij = document.createElement("select");
        SeznamOpcij.setAttribute("class", "dropdown");
        SeznamOpcij.id = "doStopnje";

        for (var StevilkaStopnje = 1; StevilkaStopnje < 21; StevilkaStopnje++) {
            Opcija = document.createElement("option");
            Opcija.value = StevilkaStopnje;
            Opcija.innerHTML = StevilkaStopnje;
            SeznamOpcij.appendChild(Opcija);
        }
        SeznamOpcij.value = 1;

        DivGumbDodaj.appendChild(SeznamOpcij);
        DivGumbDodaj.appendChild(document.createElement("br"));


        DivGumbDodaj.appendChild(SeznamOpcij);
        DivGumbDodaj.appendChild(document.createElement("br"));


        var checkboxdiv = document.createElement("div");
        checkboxdiv.innerHTML = "<p style='margin: 10px 0px 0px 0px;'><input type='checkbox' checked='checked' id='upgradeallwood'><span>Wood</span></p>";
        checkboxdiv.innerHTML += "<p style='margin: 0px;'><input type='checkbox' checked='checked' id='upgradeallclay'><span>Clay</span></p>";
        checkboxdiv.innerHTML += "<p style='margin: 0px;'><input type='checkbox' checked='checked' id='upgradealliron'><span>Iron</span></p>";
        checkboxdiv.innerHTML += "<p style='margin: 0px 0px 10px 0px;'><input type='checkbox' checked='checked' id='upgradeallcrop'><span>Crop</span></p>";

        DivGumbDodaj.appendChild(checkboxdiv);


        //DivGumbDodaj.appendChild(document.createElement("br"));

        var Vvrso2 = document.createElement("a");
        Vvrso2.name = "DodajNalogo";
        Vvrso2.innerHTML = '<span>' + prevodi.upgradeallfields + '</span>';
        Vvrso2.style.cursor = 'pointer';
        Vvrso2.setAttribute("class", "ovalbutton");
        Vvrso2.id = "gumb1";
        Vvrso2.addEventListener('click', NadgradiVsaPoljaHandler, true);
        DivGumbDodaj.appendChild(Vvrso2);
        Vvrso2 = null;
        Vrstica = document.createElement("tr");
        Celica = document.createElement("td");
        Celica.setAttribute("colspan", "4");
        Celica.appendChild(DivGumbDodaj);
        DivGumbDodaj = null;
        Vrstica.appendChild(Celica);
        Celica = null,
    	TabelaSurovin = document.getElementById("production");
        //alert(TabelaSurovin.childNodes[2].innerHTML);
        TabelaSurovin.childNodes[2].appendChild(Vrstica);
        Vrstica = null;
        TabelaSurovin = null;
    }
}




function AnalizirajZbiralisce(iznaloge)
{
}

function AnalizirajZbiralisceT4(iznaloge) {
}



function omogociXY() {
    var PoljeX = document.getElementsByName("x")[0];
    var PoljeY = document.getElementsByName("y")[0];
    PoljeX.disabled = false;
    PoljeY.disabled = false;
}

function AnalizirajTrznico(iznaloge) {
    if (TravianServer == 4) {
        return AnalizirajTrznicoT4(iznaloge);
    }

    var villageid = IdTrenutneStrani();

    try {

        if (document.getElementById("build").getAttribute("class").match(/[\d\.]+/g)[0] * 1 != 17) {
            return;
        }
        if (document.getElementById("textmenu").childNodes[1].getAttribute("class").split(" ").join("") != "selected") {

            return;
        }

    }
    catch (Error) {

        return;
    }

    try {
        document.getElementsByName("snd")[0].addEventListener('submit', omogociXY, true);
        
        var DivGumbDodaj = document.createElement("div");
        DivGumbDodaj.setAttribute("class", "buttonwrapper");





        var TextStopnja = document.createElement("b");
        TextStopnja.innerHTML = "Add trade: ";
        DivGumbDodaj.appendChild(TextStopnja);


        var SeznamOpcij = document.createElement("select");
        SeznamOpcij.setAttribute("class", "dropdown");
        SeznamOpcij.id = "OpcijaVasiTrgovanje";
        SeznamOpcij.addEventListener('change', OpcijeVasiHandler, true);
        
        var Opcije = pridobiIDjeNaselij();
        var Opcija = document.createElement("option");
        Opcija.value = 0;
        Opcija.innerHTML = prevodi.custom;
        SeznamOpcij.appendChild(Opcija);

        for (var StevilkaStopnje = 0; StevilkaStopnje < Opcije.length; StevilkaStopnje++) {
            var Opcija = document.createElement("option");
            Opcija.value = Opcije[StevilkaStopnje];
            Opcija.innerHTML = getXfromCoord(Opcije[StevilkaStopnje]) + "|" + getYfromCoord(Opcije[StevilkaStopnje]);
            SeznamOpcij.appendChild(Opcija);
        }
        DivGumbDodaj.appendChild(SeznamOpcij);
        SeznamOpcij = null;


        var SeznamOpcij = document.createElement("select");
        SeznamOpcij.setAttribute("class", "dropdown");
        SeznamOpcij.id = "OpcijaTrgovanje";
        SeznamOpcij.addEventListener('change', OpcijeTrovanjeHandler, true);
        
        var Opcije = [prevodi.onetimesending, prevodi.sendonreturn, prevodi.repetevery + " " + prevodi.minutes + ":", prevodi.bypercent];

        for (var StevilkaStopnje = 0; StevilkaStopnje < Opcije.length; StevilkaStopnje++) {
            var Opcija = document.createElement("option");
            Opcija.value = StevilkaStopnje;
            Opcija.innerHTML = Opcije[StevilkaStopnje];
            SeznamOpcij.appendChild(Opcija);
        }
        DivGumbDodaj.appendChild(SeznamOpcij);
        SeznamOpcij = null;




        var BoxCasTrgovanja = document.createElement("b");
        BoxCasTrgovanja.innerHTML = prevodi.minsres;
        BoxCasTrgovanja.style.display = "none";
        BoxCasTrgovanja.id = "MinResText";
        BoxCasTrgovanja.value = 500;
        DivGumbDodaj.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "VrednostCasaTrgovanja";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.style.display = "none";
        BoxCasTrgovanja.size = 3;
        DivGumbDodaj.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var divProcentiTrgovanje = document.createElement("div");
        divProcentiTrgovanje.id = "divProcentiTrgovanje";
        divProcentiTrgovanje.style.display = "none";
        DivGumbDodaj.appendChild(divProcentiTrgovanje);


        var BoxCasTrgovanja = document.createElement("b");
        BoxCasTrgovanja.innerHTML = prevodi.emptyres;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("img");
        BoxCasTrgovanja.src = "http://images2.wikia.nocookie.net/__cb20090801003544/travian/en/images/3/36/Wood-small.gif";
        BoxCasTrgovanja.setAttribute("style", "width: 18px;")
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "ProcentiPosiljaLes";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.size = 3;
        BoxCasTrgovanja.value = 10;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("img");
        BoxCasTrgovanja.src = "http://images4.wikia.nocookie.net/__cb20090801003721/travian/en/images/6/62/Clay-small.gif";
        BoxCasTrgovanja.setAttribute("style", "width: 18px;")
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "ProcentiPosiljaGlina";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.value = 10;
        BoxCasTrgovanja.size = 3;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("img");
        BoxCasTrgovanja.src = "http://images.wikia.com/travian/en/images/0/06/Iron-small.gif";
        BoxCasTrgovanja.setAttribute("style", "width: 18px;")
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "ProcentiPosiljaZelezo";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.value = 10;
        BoxCasTrgovanja.size = 3;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("img");
        BoxCasTrgovanja.src = "http://images1.wikia.nocookie.net/__cb20090801003834/travian/en/images/5/58/Crop-small.gif";
        BoxCasTrgovanja.setAttribute("style", "width: 18px;")
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "ProcentiPosiljaZito";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.value = 10;
        BoxCasTrgovanja.size = 3;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        divProcentiTrgovanje.appendChild(document.createElement("br"));

        var BoxCasTrgovanja = document.createElement("b");
        BoxCasTrgovanja.innerHTML = prevodi.fillres;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("img");
        BoxCasTrgovanja.src = "http://images2.wikia.nocookie.net/__cb20090801003544/travian/en/images/3/36/Wood-small.gif";
        BoxCasTrgovanja.setAttribute("style", "width: 18px;")
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "ProcentiSprejemaLes";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.value = 90;
        BoxCasTrgovanja.size = 3;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("img");
        BoxCasTrgovanja.src = "http://images4.wikia.nocookie.net/__cb20090801003721/travian/en/images/6/62/Clay-small.gif";
        BoxCasTrgovanja.setAttribute("style", "width: 18px;")
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "ProcentiSprejemaGlina";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.value = 90;
        BoxCasTrgovanja.size = 3;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("img");
        BoxCasTrgovanja.src = "http://images.wikia.com/travian/en/images/0/06/Iron-small.gif";
        BoxCasTrgovanja.setAttribute("style", "width: 18px;")
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "ProcentiSprejemaZelezo";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.value = 90;
        BoxCasTrgovanja.size = 3;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("img");
        BoxCasTrgovanja.src = "http://images1.wikia.nocookie.net/__cb20090801003834/travian/en/images/5/58/Crop-small.gif";
        BoxCasTrgovanja.setAttribute("style", "width: 18px;")
        console.log("set img style")
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;

        var BoxCasTrgovanja = document.createElement("input");
        BoxCasTrgovanja.id = "ProcentiSprejemaZito";
        BoxCasTrgovanja.type = "text";
        BoxCasTrgovanja.value = 90;
        BoxCasTrgovanja.size = 3;
        divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
        BoxCasTrgovanja = null;


        DivGumbDodaj.appendChild(document.createElement("br"));


        var vprasaj = document.createElement("img");
        vprasaj.src = "http://shrani.si/f/Z/Kb/UzpJts0/vprasaj.jpg";
        vprasaj.id = "vprasaj3";
        vprasaj.addEventListener('click', VprasajHandler3, true);
        vprasaj.setAttribute("style", "cursor: pointer");
        DivGumbDodaj.appendChild(vprasaj);

        DivGumbDodaj.appendChild(document.createElement("br"));

        var Vvrso2 = document.createElement("a");
        Vvrso2.name = "DodajNalogoTrgovanje";
        Vvrso2.innerHTML = '<span>' + prevodi.addtask + '</span>';
        Vvrso2.style.cursor = 'pointer';
        Vvrso2.setAttribute("class", "ovalbutton");
        Vvrso2.id = "gumb99";
        Vvrso2.addEventListener('click', DodajTrovanjeHandler, true);
        DivGumbDodaj.appendChild(Vvrso2);
        DivGumbDodaj.appendChild(document.createElement("br"));


        var TabelaSurovin = document.getElementById("btn_ok").parentNode;

        TabelaSurovin.appendChild(DivGumbDodaj);
    }
    catch (err) {

    }

    //VrniShranjenePodatke();
}

function AnalizirajTrznicoT4(iznaloge) {
    var villageid = IdTrenutneStrani();
    if (iznaloge == false || iznaloge == undefined || iznaloge == "undefined") {
        var iznaloge = false;
    }

    try {

        if (document.getElementById("build").getAttribute("class").match(/[\d\.]+/g)[0] * 1 != 17) {
            return;
        }


        var GumbPonudbe = document.evaluate(    ".//div[contains(@class, 'container active')]",        document,        null,        XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,        null);

        if (GumbPonudbe.snapshotLength) {
            GumbPonudbe = GumbPonudbe.snapshotItem(0).getElementsByTagName("a")[0].getAttribute("href");
            if (GumbPonudbe.indexOf("&t=") == -1) {

            }
            else if (GumbPonudbe.indexOf("t=2") == -1) {
            }
            else {
                return;
            }
        }

    }
    catch (Error) {

        return;
    }
   
    
    if (iznaloge == false || iznaloge == undefined || iznaloge == "undefined") {
        try {
            
            document.getElementsByName("snd")[0].addEventListener('submit', omogociXY, true);
            
            var DivGumbDodaj = document.createElement("div");
            DivGumbDodaj.setAttribute("class", "buttonwrapper");





            var TextStopnja = document.createElement("b");
            TextStopnja.innerHTML = "Add trade: ";
            DivGumbDodaj.appendChild(TextStopnja);

            var SeznamOpcij = document.createElement("select");
            SeznamOpcij.setAttribute("class", "dropdown");
            SeznamOpcij.id = "OpcijaVasiTrgovanje";
            SeznamOpcij.addEventListener('change', OpcijeVasiHandler, true);
            var Opcije = pridobiVseIdje();
            var Opcija = document.createElement("option");
            Opcija.value = 0;
            Opcija.innerHTML = "Custom";
            SeznamOpcij.appendChild(Opcija);

            for (var StevilkaStopnje = 0; StevilkaStopnje < Opcije.length; StevilkaStopnje++) {
                var Opcija = document.createElement("option");
                Opcija.value = Opcije[StevilkaStopnje];
                Opcija.innerHTML = Opcije.imena[StevilkaStopnje] + " (" + getXfromCoord(Opcije[StevilkaStopnje]) + "|" + getYfromCoord(Opcije[StevilkaStopnje]) + ")";
                SeznamOpcij.appendChild(Opcija);
            }
            DivGumbDodaj.appendChild(SeznamOpcij);
            SeznamOpcij = null;
            ;

            var SeznamOpcij = document.createElement("select");
            SeznamOpcij.setAttribute("class", "dropdown");
            SeznamOpcij.id = "OpcijaTrgovanje";
            SeznamOpcij.addEventListener('change', OpcijeTrovanjeHandler, true);
            
            var Opcije = ["One time sending", "Send on return", "Send every minutes:", "Send by %"];

            for (var StevilkaStopnje = 0; StevilkaStopnje < Opcije.length; StevilkaStopnje++) {
                var Opcija = document.createElement("option");
                Opcija.value = StevilkaStopnje;
                Opcija.innerHTML = Opcije[StevilkaStopnje];
                SeznamOpcij.appendChild(Opcija);
            }
            DivGumbDodaj.appendChild(SeznamOpcij);
            SeznamOpcij = null;



            var BoxCasTrgovanja = document.createElement("b");
            BoxCasTrgovanja.innerHTML = "Min res:";
            BoxCasTrgovanja.style.display = "none";
            BoxCasTrgovanja.id = "MinResText";
            DivGumbDodaj.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "VrednostCasaTrgovanja";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.style.display = "none";
            BoxCasTrgovanja.size = 3;
            BoxCasTrgovanja.value = 500;
            DivGumbDodaj.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var divProcentiTrgovanje = document.createElement("div");
            divProcentiTrgovanje.id = "divProcentiTrgovanje";
            divProcentiTrgovanje.style.display = "none";
            DivGumbDodaj.appendChild(divProcentiTrgovanje);


            var BoxCasTrgovanja = document.createElement("b");
            BoxCasTrgovanja.innerHTML = "Empty resources to set % :";
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("img");
            BoxCasTrgovanja.src = "http://images2.wikia.nocookie.net/__cb20090801003544/travian/en/images/3/36/Wood-small.gif";
            BoxCasTrgovanja.setAttribute("style", "width: 18px;")
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "ProcentiPosiljaLes";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.size = 3;
            BoxCasTrgovanja.value = 10;
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("img");
            BoxCasTrgovanja.src = "http://images4.wikia.nocookie.net/__cb20090801003721/travian/en/images/6/62/Clay-small.gif";
            BoxCasTrgovanja.setAttribute("style", "width: 18px;")
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "ProcentiPosiljaGlina";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.value = 10;
            BoxCasTrgovanja.size = 3;
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("img");
            BoxCasTrgovanja.src = "http://images.wikia.com/travian/en/images/0/06/Iron-small.gif";
            BoxCasTrgovanja.setAttribute("style", "width: 18px;")
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "ProcentiPosiljaZelezo";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.value = 10;
            BoxCasTrgovanja.size = 3;
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("img");
            BoxCasTrgovanja.src = "http://images1.wikia.nocookie.net/__cb20090801003834/travian/en/images/5/58/Crop-small.gif";
            BoxCasTrgovanja.setAttribute("style", "width: 18px;")
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "ProcentiPosiljaZito";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.value = 10;
            BoxCasTrgovanja.size = 3;
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            divProcentiTrgovanje.appendChild(document.createElement("br"));

            var BoxCasTrgovanja = document.createElement("b");
            BoxCasTrgovanja.innerHTML = "Fill resources to set %:";
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("img");
            BoxCasTrgovanja.src = "http://images2.wikia.nocookie.net/__cb20090801003544/travian/en/images/3/36/Wood-small.gif";
            BoxCasTrgovanja.setAttribute("style", "width: 18px;")
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "ProcentiSprejemaLes";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.value = 90;
            BoxCasTrgovanja.size = 3;
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("img");
            BoxCasTrgovanja.src = "http://images4.wikia.nocookie.net/__cb20090801003721/travian/en/images/6/62/Clay-small.gif";
            BoxCasTrgovanja.setAttribute("style", "width: 18px;")
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "ProcentiSprejemaGlina";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.value = 90;
            BoxCasTrgovanja.size = 3;
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("img");
            BoxCasTrgovanja.src = "http://images.wikia.com/travian/en/images/0/06/Iron-small.gif";
            BoxCasTrgovanja.setAttribute("style", "width: 18px;")
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "ProcentiSprejemaZelezo";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.value = 90;
            BoxCasTrgovanja.size = 3;
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("img");
            BoxCasTrgovanja.src = "http://images1.wikia.nocookie.net/__cb20090801003834/travian/en/images/5/58/Crop-small.gif";
            BoxCasTrgovanja.setAttribute("style", "width: 18px;")
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            var BoxCasTrgovanja = document.createElement("input");
            BoxCasTrgovanja.id = "ProcentiSprejemaZito";
            BoxCasTrgovanja.type = "text";
            BoxCasTrgovanja.value = 90;
            BoxCasTrgovanja.size = 3;
            divProcentiTrgovanje.appendChild(BoxCasTrgovanja);
            BoxCasTrgovanja = null;

            DivGumbDodaj.appendChild(document.createElement("br"));


            var vprasaj = document.createElement("img");
            vprasaj.src = "http://shrani.si/f/Z/Kb/UzpJts0/vprasaj.jpg";
            vprasaj.id = "vprasaj3";
            vprasaj.addEventListener('click', VprasajHandler3, true);
            vprasaj.setAttribute("style", "cursor: pointer");
            DivGumbDodaj.appendChild(vprasaj);

            DivGumbDodaj.appendChild(document.createElement("br"));

            var Vvrso2 = document.createElement("a");
            Vvrso2.name = "DodajNalogoTrgovanje";
            Vvrso2.innerHTML = '<span>Add task</span>';
            Vvrso2.style.cursor = 'pointer';
            Vvrso2.setAttribute("class", "ovalbutton");
            Vvrso2.id = "gumb99";
            Vvrso2.addEventListener('click', DodajTrovanjeHandler, true);
            DivGumbDodaj.appendChild(Vvrso2);
            DivGumbDodaj.appendChild(document.createElement("br"));
            var TabelaSurovin = document.getElementsByName("snd")[0].parentNode;
            //alert(TabelaSurovin.childNodes[2].innerHTML);
            
            TabelaSurovin.insertBefore(DivGumbDodaj, TabelaSurovin.childNodes[10]);
            DivGumbDodaj = null;
            Vvrso2 = null;
            divProcentiTrgovanje = null;



        }
        catch (err) { }




    }

}



function DodajGumbDodajFarlistT4() {
    if ((document.location.href.indexOf("tt=99") != -1 && document.location.href.indexOf("action=showSlot") == -1 )) {
        var ex = ".//div[@class='listTitleText']";
        VseListe = document.evaluate(    ex,    document,    null,    XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,    null);
        if (VseListe.snapshotLength) {
            for (var gsd = 0; gsd < VseListe.snapshotLength; gsd++) {

                var Vvrso2 = document.createElement("a");
                Vvrso2.name = "DodajNalogoFarmlsita";
                Vvrso2.innerHTML = '<span>Add farmlist</span>';
                Vvrso2.style.cursor = 'pointer';
                //Vvrso2.setAttribute("style","color:red;");
                Vvrso2.setAttribute("class", "ovalbutton");
                Vvrso2.id = "gumbaddfarmlist" + gsd;
                Vvrso2.addEventListener('click', dodajFarmlistT4, true);
                VseListe.snapshotItem(gsd).parentNode.parentNode.appendChild(Vvrso2);
                VseListe.snapshotItem(gsd).parentNode.parentNode.appendChild(document.createElement("br"));
            }
        }
        return;

        gdfg = document.createElement("div");
        gdfg.setAttribute("class", "entry");
        gdfg.setAttribute("style", "display: block;");
        /*
        var dodajfarmo=document.createElement("a");
        dodajfarmo.innerHTML="Add to farmlist";
        dodajfarmo.addEventListener('click', dodajFarmoT4, true);
        gdfg.appendChild(dodajfarmo);
        */

        var Vvrso2 = document.createElement("a");
        Vvrso2.name = "DodajNalogoFarmlsita";
        Vvrso2.innerHTML = '<span>' + prevodi.addtofarmlist + '</span>';
        Vvrso2.style.cursor = 'pointer';
        Vvrso2.setAttribute("style", "color:red;");
        //Vvrso2.setAttribute("class","ovalbutton");
        Vvrso2.id = "gumbaddtofarmlist";
        Vvrso2.addEventListener('click', dodajFarmoT4, true);
        gdfg.appendChild(Vvrso2);


        document.getElementById("contextMenuSendTroops").parentNode.appendChild(gdfg);
        var NovaFarmaX;
        var NovaFarmaY;
        var NovaFarmaIme;

        document.body.addEventListener('contextmenu', preveridesniklik, true);
    }
}

function DodajGumbDodajFarmo() {
    if (SprotnoUpdatanje == "DA") {
        var url = document.location.href;
        if (url.indexOf("/karte.php?d=") != -1) {
            IdTrenutneFarme = url.substring(document.location.href.indexOf("d=") + 2, document.location.href.indexOf("&") + 6).split("amp;").join("");
            var ex11 = ".//table[@class='tableNone']";
            var Tabela = document.evaluate(ex11, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

            if (Tabela.snapshotLength) {
                var Tabela1 = Tabela.snapshotItem(0);
                ImeTegaNaselja = Tabela1.childNodes[1].childNodes[0].childNodes[1].childNodes[0].innerHTML;
                if (ImeTegaNaselja + "" == "undefined") {
                    ImeTegaNaselja = Tabela1.parentNode.parentNode.getElementsByTagName("h1")[0].innerHTML;
                }
                Tabela1 = Tabela.snapshotItem(1);
                var ElementVrivanja = Tabela1.childNodes[3]; //.childNodes[0]
                var PredElementVrivanja = Tabela1.childNodes[3].childNodes[0]; //.childNodes[1]
                var NovaVrstica1 = document.createElement("tr");
                var NovaVrstica2 = document.createElement("td");

                var Vvrso2 = document.createElement("a");
                Vvrso2.name = "DodajNalogoFarmlsita";
                Vvrso2.innerHTML = '<span>' + prevodi.addtofarmlist + '</span>';
                Vvrso2.style.cursor = 'pointer';
                Vvrso2.setAttribute("class", "ovalbutton");
                Vvrso2.id = "gumbaddtofarmlist";
                Vvrso2.addEventListener('click', DodajFarmoHandler, true);
                NovaVrstica2.appendChild(Vvrso2);


                Vvrso2 = null;
                NovaVrstica1.appendChild(NovaVrstica2);
                ElementVrivanja.insertBefore(NovaVrstica1, PredElementVrivanja);
            }


        }

    }
}


function DodajGumbDodajFarmoT4() {
    if (document.location.href.indexOf(document.location.hostname + "/karte.php") != -1) {
        gdfg = document.createElement("div");
        gdfg.setAttribute("class", "entry");
        gdfg.setAttribute("style", "display: block;");


        var Vvrso2 = document.createElement("a");
        Vvrso2.name = "DodajNalogoFarmlsita";
        Vvrso2.innerHTML = '<span>' + prevodi.addtofarmlist + '</span>';
        Vvrso2.style.cursor = 'pointer';
        Vvrso2.setAttribute("style", "color:red;");
        //Vvrso2.setAttribute("class","ovalbutton");
        Vvrso2.id = "gumbaddtofarmlist";
        Vvrso2.addEventListener('click', dodajFarmoT4, true);
        gdfg.appendChild(Vvrso2);


        document.getElementById("contextMenuSendTroops").parentNode.appendChild(gdfg);
        var NovaFarmaX;
        var NovaFarmaY;
        var NovaFarmaIme;

        document.body.addEventListener('contextmenu', preveridesniklik, true);
    }
}
function DodajLinkDodajNaCakalnoVrstoT4() {
    DodajLinkDodajNaCakalnoVrsto();
}


function DodajLinkDodajNaCakalnoVrsto() {
    console.log("dodaj link dodaj na ccakalno vrsto")
    console.log(SprotnoUpdatanje)

    if (SprotnoUpdatanje == "DA") {
        var url = document.location.href
        if (url.indexOf("build") > -1) {
            var ex11 = ".//span[@class='level']";
            var StopnjaStavbe = document.evaluate(ex11, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

            if (StopnjaStavbe.snapshotLength)//nadgradnja
            {

                var StopnjaStavbe2 = StopnjaStavbe.snapshotItem(0).innerHTML.match(/[\d\.]+/g)[0] * 1;
                var ImeTeZgradbe = StopnjaStavbe.snapshotItem(0).parentNode.innerHTML.split(" <span")[0];
                var ex22 = ".//a[contains(@href, 'bid=') and not(contains(@href, 'tt=2'))]";
                var Polozaj = document.evaluate(ex22, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                var Polozaj2 = 1000;
                if (Polozaj.snapshotLength) {
                    Polozaj2 = Polozaj.snapshotItem(0).getAttribute("href").split("bid=")[1].split("&")[0];

                }
                else {

                    if (document.location.href.indexOf("id=") == -1) {
                        var Polozaj2 = 100;
                    }
                    else {
                        var Polozaj2 = document.location.href.split("id=")[1];
                        if (Polozaj2.indexOf("&") > -1) {
                            Polozaj2 = Polozaj2.split("&")[0];
                        }
                    }

                }


                var stran = document.body.innerHTML; //shrani poizvedbo v stran

                var stopnja = StopnjaStavbe2 * 1 + 1;

                if (Polozaj2 * 1 == 40) {
                    var tribe = 4;
                    var ex = "//div[contains(@class, 'playerName')]/a/img[contains(@class, 'nation nation')]";
                    var tribeev = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (tribeev.snapshotLength) {
                        tribe = tribeev.snapshotItem(0).getAttribute("class").match(/[\d\.]+/g)[0] * 1 - 1;
                    }

                    var Pleme = tribe;
                    if (Pleme == 0) {
                        //rimljani
                        stavba = 31;
                    }
                    else if (Pleme == 1) {
                        //tevtoni
                        stavba = 32;
                    }
                    else if (Pleme == 2) {
                        //galci
                        stavba = 33;
                    }
                        //else if (Pleme == 3) {
                        //galci
                        //    stavba = 33;
                        //}
                    else {
                        stavba = 0;
                    }
                }
                else {
                    if (document.getElementById("build")) {
                        var rekstbuild = document.getElementById("build").getAttribute("class");
                        if (rekstbuild.indexOf("gid") > -1) {
                            stavba = rekstbuild.split("gid")[1].match(/[\d\.]+/g)[0] * 1;
                        }
                        else {
                            PridobiStavbo();
                        }
                    }
                    else {
                        PridobiStavbo();
                    }
                }

                var tag33 = document.evaluate(".//img[contains(@class, 'unitSection u30Section')]", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                
                if (stavba == 15)//gradbeni ceh
                {

                    var DivGumbDodaj = document.createElement("div");
                    DivGumbDodaj.setAttribute("class", "buttonwrapper");
                    var TextStopnja = document.createElement("b");
                    TextStopnja.innerHTML = "Demolish to level: ";
                    DivGumbDodaj.appendChild(TextStopnja);

                    var dostopnje = document.createElement("input");
                    dostopnje.type = "text";
                    dostopnje.id = "MinLevel";
                    dostopnje.value = 0;
                    dostopnje.size = 1;
                    DivGumbDodaj.appendChild(dostopnje);

                    DivGumbDodaj.appendChild(document.createElement("br"));


                    var Vvrso2 = document.createElement("a");
                    Vvrso2.name = "DodajNalogoUrjenje";
                    Vvrso2.innerHTML = '<span> Demolish later </span>';
                    Vvrso2.style.cursor = 'pointer';
                    Vvrso2.setAttribute("class", "ovalbutton");
                    Vvrso2.id = "gumbDemolishLater";
                    Vvrso2.setAttribute("gid", stavba);
                    Vvrso2.addEventListener('click', DodajDemolishHandler, true);
                    DivGumbDodaj.appendChild(Vvrso2);

                    DivGumbDodaj.appendChild(document.createElement("br"));

                    try {

                        DivGumbDodaj.appendChild(document.createElement("br"));
                        var beseda = "build";
                        switch (TravianServer) {
                            case 3:
                                beseda = "contract";
                                break;
                            case 4:
                                beseda = "build";
                                break;
                        }
                        document.getElementById("build").appendChild(DivGumbDodaj);

                    }
                    catch (Error) { }


                }

                if (stavba == 13)//kovacnica
                {
                    var tag3331 = document.evaluate(".//div[@class='research']", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (tag3331.snapshotLength) {
                        for (var i = 0; i < tag3331.snapshotLength; i++) {
                            var enota = tag3331.snapshotItem(i).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                            var divzadodat = tag3331.snapshotItem(i).getElementsByClassName("contractLink")[0];

                            var DivGumbDodaj = document.createElement("div");
                            DivGumbDodaj.setAttribute("class", "buttonwrapper");
                            var TextStopnja = document.createElement("b");
                            TextStopnja.innerHTML = "Upgrade to level: ";
                            DivGumbDodaj.appendChild(TextStopnja);

                            var SeznamOpcij = document.createElement("select");
                            SeznamOpcij.setAttribute("class", "dropdown");
                            SeznamOpcij.id = "MaxLevel" + enota;

                            for (var StevilkaStopnje = 1; StevilkaStopnje < 21; StevilkaStopnje++) {
                                var Opcija = document.createElement("option");
                                Opcija.value = StevilkaStopnje;
                                Opcija.innerHTML = StevilkaStopnje;
                                SeznamOpcij.appendChild(Opcija);
                            }
                            SeznamOpcij.value = 20;

                            DivGumbDodaj.appendChild(SeznamOpcij);
                            DivGumbDodaj.appendChild(document.createElement("br"));


                            var Vvrso2 = document.createElement("a");
                            Vvrso2.innerHTML = '<span> Upgrade later </span>';
                            Vvrso2.style.cursor = 'pointer';
                            Vvrso2.setAttribute("class", "ovalbutton");
                            Vvrso2.id = "gumbUpgradeLater";
                            Vvrso2.setAttribute("gid", stavba);
                            Vvrso2.setAttribute("unit", enota);
                            Vvrso2.addEventListener('click', DodajArmorUpgradeHandler, true);
                            DivGumbDodaj.appendChild(Vvrso2);

                            DivGumbDodaj.appendChild(document.createElement("br"));
                            divzadodat.appendChild(DivGumbDodaj);
                        }
                    }
                }

                if (stavba == 24)//mestna hisa
                {
                    var tag3331 = document.evaluate(".//div[@class='research']", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                    if (tag3331.snapshotLength==0)
                    {
                        tag3331 = document.evaluate(".//div[@class='tit']", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    }
                    if (tag3331.snapshotLength) {
                        for (var i = 0; i < tag3331.snapshotLength; i++) {
                            var enota = i;
                            var divzadodat = tag3331.snapshotItem(i);

                            switch (TravianServer) {
                                case 4:
                                case 4.2:
                                    var slike = divzadodat.getElementsByClassName("showCosts")[0].getElementsByTagName("img");

                                    var r1 = document.createElement("div");
                                    r1.innerHTML = slike[0].parentNode.innerHTML;
                                    r1.removeChild(r1.getElementsByTagName("img")[0]);
                                    r1 = r1.innerHTML.match(/[\d\.]+/g)[0] * 1;

                                    var r2 = document.createElement("div");
                                    r2.innerHTML = slike[1].parentNode.innerHTML;
                                    r2.removeChild(r2.getElementsByTagName("img")[0]);
                                    r2 = r2.innerHTML.match(/[\d\.]+/g)[0] * 1;

                                    var r3 = document.createElement("div");
                                    r3.innerHTML = slike[2].parentNode.innerHTML;
                                    r3.removeChild(r3.getElementsByTagName("img")[0]);
                                    r3 = r3.innerHTML.match(/[\d\.]+/g)[0] * 1;

                                    var r4 = document.createElement("div");
                                    r4.innerHTML = slike[3].parentNode.innerHTML;
                                    r4.removeChild(r4.getElementsByTagName("img")[0]);
                                    r4 = r4.innerHTML.match(/[\d\.]+/g)[0] * 1

                                    var uura = document.createElement("div");
                                    uura.innerHTML = divzadodat.getElementsByClassName("clocks")[0].innerHTML;
                                    uura.removeChild(uura.getElementsByTagName("img")[0]);
                                    uura = uura.innerHTML.match(/[\d\.]+/g);
                                    uura = Math.ceil(uura[0] * 60 + uura[1] * 1 + uura[2] / 60);
                                    break;
                                case 3:
                                    var slike = divzadodat.parentNode.getElementsByClassName("details")[0];
                                    var res = document.createElement("div");
                                    res.innerHTML = slike.innerHTML;
                                    res.removeChild(res.getElementsByTagName("img")[0]);
                                    res.removeChild(res.getElementsByTagName("img")[0]);
                                    res.removeChild(res.getElementsByTagName("img")[0]);
                                    res.removeChild(res.getElementsByTagName("img")[0]);
                                    res.removeChild(res.getElementsByTagName("img")[0]);
                                    res.innerHTML = res.innerHTML.split('<span class="little_res">').join("").split('</span>').join("").split('&lt;').join("");
                                    res = res.innerHTML.split("|");
                                    r1 = res[0].match(/[\d\.]+/g)[0] * 1;
                                    r2 = res[1].match(/[\d\.]+/g)[0] * 1;
                                    r3 = res[2].match(/[\d\.]+/g)[0] * 1;
                                    r4 = res[3].match(/[\d\.]+/g)[0] * 1;
                                    uura = res[4].match(/[\d\.]+/g);
                                    uura = Math.ceil(uura[0] * 60 + uura[1] * 1 + uura[2] / 60);
                                    break;
                            }
                            var DivGumbDodaj = document.createElement("div");
                            DivGumbDodaj.setAttribute("class", "buttonwrapper");
                            var TextStopnja = document.createElement("b");
                            TextStopnja.innerHTML = "Party later: <br>Repeat every:";
                            DivGumbDodaj.appendChild(TextStopnja);

                            var TextStopnja = document.createElement("input");
                            TextStopnja.type = "text";
                            TextStopnja.value = uura;
                            TextStopnja.id = "RepeatEvery" + enota;
                            TextStopnja.size = 3;
                            DivGumbDodaj.appendChild(TextStopnja);

                            var TextStopnja = document.createElement("b");
                            TextStopnja.innerHTML = "minutes";
                            DivGumbDodaj.appendChild(TextStopnja);

                            DivGumbDodaj.appendChild(document.createElement("br"));


                            var Vvrso2 = document.createElement("a");
                            Vvrso2.innerHTML = '<span> Party later </span>';
                            Vvrso2.style.cursor = 'pointer';
                            Vvrso2.setAttribute("class", "ovalbutton");
                            Vvrso2.id = "gumbUpgradeLater";
                            Vvrso2.setAttribute("gid", stavba);
                            Vvrso2.setAttribute("r1", r1);
                            Vvrso2.setAttribute("r2", r2);
                            Vvrso2.setAttribute("r3", r3);
                            Vvrso2.setAttribute("r4", r4);
                            Vvrso2.setAttribute("festival", enota);
                            Vvrso2.addEventListener('click', DodajPartyHandler, true);
                            DivGumbDodaj.appendChild(Vvrso2);

                            DivGumbDodaj.appendChild(document.createElement("br"));
                            divzadodat.appendChild(DivGumbDodaj);
                        }
                    }
                }

                if (stavba == 19 || stavba == 20 || stavba == 21 || stavba == 25 || stavba == 26 || stavba == 29 || stavba == 30 || tag33.snapshotLength > 0) {
                    var DivGumbDodaj = document.createElement("div");
                    DivGumbDodaj.setAttribute("class", "buttonwrapper");

                    gid = stavba;



                    var TextStopnja = document.createElement("b");
                    TextStopnja.innerHTML =  "Add train: ";
                    DivGumbDodaj.appendChild(TextStopnja);



                    var SeznamOpcij = document.createElement("select");
                    SeznamOpcij.setAttribute("class", "dropdown");
                    SeznamOpcij.id = "OpcijaUrjenje";
                    SeznamOpcij.addEventListener('change', OpcijeUrjenjeHandler, true);

                    var Opcije = [prevodi.trainonce, prevodi.repetevery + " " + prevodi.minutes];

                    for (var StevilkaStopnje = 0; StevilkaStopnje < Opcije.length; StevilkaStopnje++) {
                        var Opcija = document.createElement("option");
                        Opcija.value = StevilkaStopnje;
                        Opcija.innerHTML = Opcije[StevilkaStopnje];
                        SeznamOpcij.appendChild(Opcija);
                    }
                    DivGumbDodaj.appendChild(SeznamOpcij);
                    SeznamOpcij = null;


                    var BoxCasTrgovanja = document.createElement("input");
                    BoxCasTrgovanja.id = "VrednostCasaUrjenje";
                    BoxCasTrgovanja.type = "text";
                    BoxCasTrgovanja.style.display = "none";
                    BoxCasTrgovanja.size = 3;
                    DivGumbDodaj.appendChild(BoxCasTrgovanja);
                    BoxCasTrgovanja = null;
                    DivGumbDodaj.appendChild(document.createElement("br"));


                    var vprasaj = document.createElement("img");
                    vprasaj.src = "http://shrani.si/f/Z/Kb/UzpJts0/vprasaj.jpg";
                    vprasaj.id = "vprasaj2";
                    vprasaj.addEventListener('click', VprasajHandler2, true);
                    vprasaj.setAttribute("style", "cursor: pointer");
                    DivGumbDodaj.appendChild(vprasaj);
                    DivGumbDodaj.appendChild(document.createElement("br"));

                    var Vvrso2 = document.createElement("a");
                    Vvrso2.name = "DodajNalogoUrjenje";
                    Vvrso2.innerHTML = '<span>' + prevodi.trainlater + '</span>';
                    Vvrso2.style.cursor = 'pointer';
                    Vvrso2.setAttribute("class", "ovalbutton");
                    Vvrso2.id = "gumb100";
                    Vvrso2.addEventListener('click', DodajUrjenjeHandler, true);
                    DivGumbDodaj.appendChild(Vvrso2);
                    DivGumbDodaj.appendChild(document.createElement("br"));

                    try {
                        switch (TravianServer) {
                            case 3:
                                try {
                                    document.getElementsByName("snd")[1].appendChild(DivGumbDodaj);
                                }
                                catch (Error) {
                                    document.getElementsByName("snd")[0].appendChild(DivGumbDodaj);
                                }

                                break;
                            case 4:
                            case 4.2:
                                var ex54 = ".//div[@class='buildActionOverview trainUnits']";
                                var elementDodajanja = document.evaluate(ex54, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                                if (elementDodajanja.snapshotLength) {
                                    DivGumbDodaj.appendChild(document.createElement("br"));
                                    elementDodajanja.snapshotItem(0).appendChild(DivGumbDodaj);

                                }

                                //document.getElementById("contract").appendChild(DivGumbDodaj);
                                break;
                        }
                    }
                    catch (Error) { }
                    DivGumbDodaj = null;
                    Vvrso2 = null;


                }




                var DivGumbDodaj = document.createElement("div");
                DivGumbDodaj.setAttribute("class", "buttonwrapper");


                var TextStopnja = document.createElement("b");
                TextStopnja.innerHTML = prevodi.level + ": ";
                DivGumbDodaj.appendChild(TextStopnja);

                var SeznamOpcij = document.createElement("select");
                SeznamOpcij.setAttribute("class", "dropdown");
                SeznamOpcij.id = "doStopnje";
                for (var StevilkaStopnje = 1; StevilkaStopnje < Stavbe[stavba].length; StevilkaStopnje++) {
                    var Opcija = document.createElement("option");
                    Opcija.value = StevilkaStopnje;
                    Opcija.innerHTML = StevilkaStopnje;
                    SeznamOpcij.appendChild(Opcija);
                }
                SeznamOpcij.value = stopnja;

                DivGumbDodaj.appendChild(SeznamOpcij);
                DivGumbDodaj.appendChild(document.createElement("br"));


                console.log("dadaj gumb")
                console.log(TravianServer)
                var Vvrso2 = document.createElement("a");
                Vvrso2.name = "DodajNalogo";
                Vvrso2.innerHTML = '<span>' + prevodi.addtask + '</span>';
                Vvrso2.style.cursor = 'pointer';
                Vvrso2.id = "gumb3";
                Vvrso2.setAttribute("class", "ovalbutton");
                Vvrso2.setAttribute("polozaj", Polozaj2);
                Vvrso2.setAttribute("stavba", stavba);
                Vvrso2.addEventListener('click', DodajGradnjoHandler, true);
                DivGumbDodaj.appendChild(Vvrso2);
                Vvrso2 = null;
                console.log(TravianServer)
                switch (TravianServer) {
                    case 3:
                        document.getElementById("build").appendChild(DivGumbDodaj);
                        break;
                    case 4:
                    case 4.2:
                        try {
                            document.getElementById("contract").appendChild(DivGumbDodaj);
                        }
                        catch (err) {
                        }
                        break;
                }


            }
            else {
                if (document.location.href.indexOf("id=") == -1) {
                    var Polozaj2 = 100;
                }
                else {
                    var Polozaj2 = document.location.href.split("id=")[1];
                    if (Polozaj2.indexOf("&") > -1) {
                        Polozaj2 = Polozaj2.split("&")[0];
                    }
                }

                var stopnja = 1;
                var stavba = 1;
                var Polozaj = Polozaj2;
                switch (TravianServer) {
                    case 3:


                        var ex33 = ".//table[@class='new_building']";
                        var NoveStavbe = document.evaluate(ex33, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                    
                        for (var ElementDodajanja = 0; ElementDodajanja < NoveStavbe.snapshotLength; ElementDodajanja++) {
                            var PredTaElement = NoveStavbe.snapshotItem(ElementDodajanja);
                            if (Polozaj2 * 1 == 40) {
                                var Pleme = 0 * 1;
                                if (Pleme == 0) {
                                    //rimljani
                                    var stavba = 31;
                                }
                                else if (Pleme == 1) {
                                    //tevtoni
                                    var stavba = 32;
                                }
                                else if (Pleme == 2) {
                                    //galci
                                    var stavba = 33;
                                }
                                else {
                                    var stavba = 0;
                                }
                            }
                            else {
                                var ex = ".//a[contains(@onClick, 'gid')]";
                                var tag2 = document.evaluate(ex, PredTaElement, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                                if (tag2.snapshotLength) {

                                    var stavba = tag2.snapshotItem(0).childNodes[1].getAttribute("class").match(/[\d\.]+/g)[0] * 1;

                                }

                                else {
                                    try {
                                        var ex = ".//a[contains(@onclick, 'Popup')]";
                                        var tag2 = document.evaluate(ex, PredTaElement, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                                        var stavba = tag2.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                                    }
                                    catch (err) {
                                        var stavba = 0;
                                    }
                                }

                            }

                            var DivGumbDodaj = document.createElement("div");
                            DivGumbDodaj.setAttribute("class", "buttonwrapper");


                            var TextStopnja = document.createElement("b");
                            TextStopnja.innerHTML = prevodi.level + ": ";
                            DivGumbDodaj.appendChild(TextStopnja);

                            var SeznamOpcij = document.createElement("select");
                            SeznamOpcij.setAttribute("class", "dropdown");
                            SeznamOpcij.id = "doStopnje" + stavba;

                            for (var StevilkaStopnje = 1; StevilkaStopnje < Stavbe[stavba].length; StevilkaStopnje++) {
                                var Opcija = document.createElement("option");
                                Opcija.value = StevilkaStopnje;
                                Opcija.innerHTML = StevilkaStopnje;
                                SeznamOpcij.appendChild(Opcija);
                            }
                            SeznamOpcij.value = stopnja;

                            DivGumbDodaj.appendChild(SeznamOpcij);
                            DivGumbDodaj.appendChild(document.createElement("br"));


                            var Vvrso2 = document.createElement("a");
                            Vvrso2.name = stavba;
                            Vvrso2.innerHTML = '<span>' + prevodi.addtask + '</span>';
                            Vvrso2.style.cursor = 'pointer';
                            Vvrso2.setAttribute("class", "ovalbutton");
                            Vvrso2.setAttribute("polozaj", Polozaj2);
                            Vvrso2.setAttribute("stavba", stavba);
                            Vvrso2.id = "gumb4";
                            Vvrso2.addEventListener('click', DodajGradnjoHandler2, true);
                            DivGumbDodaj.appendChild(Vvrso2);
                            Vvrso2 = null;

                            PredTaElement.parentNode.insertBefore(DivGumbDodaj, PredTaElement)


                        }



                        break;
                    case 4:
                    case 4.2:

                        var ex33 = ".//div[@class='build_desc']";
                        var NoveStavbe = document.evaluate(ex33, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        //console.log("nove stavbe")
                        //console.log(NoveStavbe.snapshotLength)
                        for (var ElementDodajanja = 0; ElementDodajanja < NoveStavbe.snapshotLength; ElementDodajanja++) {
                            try {
                                var PredTaElement = NoveStavbe.snapshotItem(ElementDodajanja);
                                if (Polozaj2 * 1 == 40) {
                                    var tribe = 4;
                                    var ex = "//div[contains(@class, 'playerName')]/a/img[contains(@class, 'nation nation')]";
                                    var tribeev = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                                    if (tribeev.snapshotLength) {
                                        tribe = tribeev.snapshotItem(0).getAttribute("class").match(/[\d\.]+/g)[0] * 1 - 1;
                                    }

                                    var Pleme = tribe;
                                    if (Pleme == 0) {
                                        //rimljani
                                        stavba = 31;
                                    }
                                    else if (Pleme == 1) {
                                        //tevtoni
                                        stavba = 32;
                                    }
                                    else if (Pleme == 2) {
                                        //galci
                                        stavba = 33;
                                    }
                                    else {
                                        stavba = 0;
                                    }
                                }
                                else {
                                    if(PredTaElement.childNodes[1].getAttribute("onclick"))
                                    {
                                        if (PredTaElement.childNodes[1].getAttribute("onclick").indexOf("iPopup") != -1) {
                                            var stavba = PredTaElement.childNodes[1].getAttribute("onclick").split(".").join("").match(/[\d\.]+/g)[0];
                                        }
                                        else {
                                            var stavba = PredTaElement.childNodes[1].getAttribute("onclick").split(".").join("").match(/[\d\.]+/g)[1];
                                        }
                                    }
                                    else
                                    {
                                        var stavba = PredTaElement.childNodes[1].getAttribute("class").split(".").join("").match(/[\d\.]+/g)[0];
                                    }

                                    //console.log("stavba: "+stavba)
                                }
                                var DivGumbDodaj = document.createElement("div");
                                DivGumbDodaj.setAttribute("class", "buttonwrapper");
                                //DivGumbDodaj.setAttribute("style", "position:absolute;left:0px;");
                                //                                var prazen = document.createElement("p");
                                //                                prazen.innerHTML = "&nbsp;";
                                //                                DivGumbDodaj.appendChild(prazen);
                                var TextStopnja = document.createElement("b");
                                TextStopnja.innerHTML = prevodi.level + ": ";
                                DivGumbDodaj.appendChild(TextStopnja);

                                var SeznamOpcij = document.createElement("select");
                                SeznamOpcij.setAttribute("class", "dropdown");
                                SeznamOpcij.id = "doStopnje" + stavba;

                                for (var StevilkaStopnje = 1; StevilkaStopnje < Stavbe[stavba].length; StevilkaStopnje++) {
                                    var Opcija = document.createElement("option");
                                    Opcija.value = StevilkaStopnje;
                                    Opcija.innerHTML = StevilkaStopnje;
                                    SeznamOpcij.appendChild(Opcija);
                                }
                                SeznamOpcij.value = stopnja;

                                DivGumbDodaj.appendChild(SeznamOpcij);
                                DivGumbDodaj.appendChild(document.createElement("br"));

                                var Vvrso2 = document.createElement("a");
                                Vvrso2.name = stavba;
                                Vvrso2.innerHTML = '<span>' + prevodi.addtask + '</span>';
                                Vvrso2.style.cursor = 'pointer';
                                Vvrso2.setAttribute("class", "ovalbutton");
                                Vvrso2.setAttribute("polozaj", Polozaj2);
                                Vvrso2.setAttribute("stavba", stavba);
                                Vvrso2.id = "gumb4";
                                Vvrso2.addEventListener('click', DodajGradnjoHandler2, true);
                                DivGumbDodaj.appendChild(Vvrso2);
                                Vvrso2 = null;
                                PredTaElement = PredTaElement.nextSibling.nextSibling.nextSibling;
                                PredTaElement.parentNode.insertBefore(DivGumbDodaj, PredTaElement)
                                console.log("gumb dodan")

                            }
                            catch (err) {
                                continue;
                            }
                        }
                        break;
                }
            }
        }
    }
}

function PridobiStavbo() {
    var ex = ".//a[contains(@onClick, 'gid')]";
    var tag2 = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    var ex = ".//a[contains(@onclick, 'iPopup')]";
    var tag3 = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    var ex = ".//a[contains(@onClick, 'Popup')][contains(@class, 'build_logo')]";
    var tag4 = document.evaluate(ex, document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    var stavba;
    if (tag2.snapshotLength) {

        stavba = tag2.snapshotItem(0).childNodes[1].getAttribute("class").match(/[\d\.]+/g)[0] * 1;

    }
    else if (tag3.snapshotLength) {

        stavba = tag3.snapshotItem(0).childNodes[1].getAttribute("class").match(/[\d\.]+/g)[0] * 1;

    }
    else if (tag4.snapshotLength) {
        stavba = tag4.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;

    }
    else {
        stavba = 0;
    }
    return stavba;
}

var ImenaPlemen = ["", "Romans", "Teutons", "Gauls", "?", "Natars"];

function DodajVCropTabelo(add, x, y, Xorign, Yorign, vname, oases, population, allay, player, type, AnaliziranServer, link, uid, tribe) {
    var allyid = 0
    if (toType(allay) == "array") {
        allyid = allay[1];
        allay = allay[0];
    }
    var PleyerPop = "?";
    var PlayerVillages = "?";
    var Tribe = "?";
    if (uid) {
        try {
            PleyerPop = unsafeWindow.PLAYERFINDER.players["P" + uid].pop;
            PlayerVillages = unsafeWindow.PLAYERFINDER.players["P" + uid].villages.length;
        }
        catch (err) {
            PleyerPop = "?";
            PlayerVillages = "?";
        }

    }
    if (tribe) {
        Tribe = ImenaPlemen[tribe];
    }
    else {
        tribe = 6;
    }
    //if(TravianServer==4){add="disabled";}
    link = link + "";
    if (allay == "") { allay = "/"; }

    var TabelaCrop = document.getElementById("CropFinderResults");
    var Vrstica = document.createElement("tr");
    Vrstica.setAttribute("name", "VrsticaCropFinder");
    if (type == "farm") {
        Vrstica.setAttribute("style", "background-color:#B2D1FF;");
    }
    else if (type == "oases") {
        Vrstica.setAttribute("style", "background-color:#99EBC2;");
    }
    else if (type == "c9") {
        Vrstica.setAttribute("style", "background-color:#E0CCE0;");
    }
    else if (type == "c15") {
        Vrstica.setAttribute("style", "background-color:#D1D1FF;");
    }
    var Celica1 = document.createElement("td");
    if (add == "disabled") {
        Celica1.innerHTML = '<INPUT TYPE="CHECKBOX" name="farmfindercheckbox" disabled>';
    }
    else {
        Celica1.innerHTML = '<INPUT TYPE="CHECKBOX" name="farmfindercheckbox">';
    }
    Vrstica.appendChild(Celica1);

    var Celica4 = document.createElement("td");
    //Celica4.innerHTML = player;
    Celica4.innerHTML = '<a href="' + unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/spieler.php?uid=" + uid + '"  target="_blank">' + player + '</a>';
    Celica4.setAttribute("class", "imeIgralca");
    //Celica4.setAttribute("style", "cursor:pointer");
    //Celica4.setAttribute("link", unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/spieler.php?uid=" + uid);
    //Celica4.addEventListener('click', unsafeWindow.OpenPage, true);
    Vrstica.appendChild(Celica4);

    var Celica4 = document.createElement("td");
    Celica4.innerHTML = vname;
    Celica4.setAttribute("class", "imeNaselja");
    Vrstica.appendChild(Celica4);

    var link = unsafeWindow.PLAYER.getCoordfromXY(x,y)+""
    var Celica2 = document.createElement("td");
    Celica2.setAttribute("link", link.split("d=").join("").split("z=").join(""));
    //var Link=getCoordfromXY(x,y);
    var dodateklink = "";
    if (link.indexOf("position") == -1) {
        dodateklink = "karte.php?";
    }
    var Link = unsafeWindow.http + "://" + AnaliziranServer + "/position_details.php?x="+x+"&y="+y// + dodateklink + link;
    Celica2.innerHTML = '<a href="' + Link + '" class="koordinate" target="_blank">' + x + '|' + y + '</a>';
    Vrstica.appendChild(Celica2);

    var Celica3 = document.createElement("td");
    var Razdalja = PridobiRazdaljo(x, y, Xorign, Yorign);
    Razdalja = Math.round(Razdalja * 100) / 100;
    Celica3.innerHTML = Razdalja;
    Vrstica.appendChild(Celica3);

    var Celica4 = document.createElement("td");
    Celica4.innerHTML = type;
    Celica4.setAttribute("class", "tipFarme");
    Vrstica.appendChild(Celica4);

    var Celica5 = document.createElement("td");
    Celica5.innerHTML = "?";
    Celica5.setAttribute("x", x);
    Celica5.setAttribute("y", y);
    Celica5.setAttribute("name", "oaza");
    Celica5.setAttribute("class", "oaza");
    Vrstica.appendChild(Celica5);

    var Celica6 = document.createElement("td");
    Celica6.name = "VillagePop";
    Celica6.setAttribute("class", "VillagePop");
    Celica6.innerHTML = population;
    Vrstica.appendChild(Celica6);

    var Celica6 = document.createElement("td");
    Celica6.innerHTML = PleyerPop;
    Celica6.setAttribute("class", "PlayerPop");
    Vrstica.appendChild(Celica6);

    var Celica6 = document.createElement("td");
    Celica6.innerHTML = PlayerVillages;
    Vrstica.appendChild(Celica6);

    var Celica7 = document.createElement("td");
    Celica7.innerHTML = allay;
    Celica7.setAttribute("class", "PlayerAlly");
    Celica7.setAttribute("tip", "ally");
    if (allyid > 0) {
        Celica7.addEventListener('click', unsafeWindow.OpenPage, true);
        Celica7.setAttribute("style", "cursor:pointer; color: red;");
        Celica7.setAttribute("link", unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/allianz.php?aid=" + allyid);  
    }
    Vrstica.appendChild(Celica7);

    var Celica7 = document.createElement("td");
    Celica7.innerHTML = Tribe;
    Celica7.setAttribute("tribe", tribe);
    Celica7.setAttribute("class", "PlayerTribe");
    Vrstica.appendChild(Celica7);

    var Celica7 = document.createElement("td");
    Celica7.innerHTML = "?";
    Celica7.setAttribute("class", "cropreport");
    Celica7.setAttribute("x", x);
    Celica7.setAttribute("y", y);
    Vrstica.appendChild(Celica7);

    var Celica7 = document.createElement("td");
    Celica7.setAttribute("style", "width:30px; background-color:#000099; ");
    var span = document.createElement("div");
    span.addEventListener('click', IzbrisiIzCropTabele, true);
    span.innerHTML = "X";
    span.setAttribute("style", "cursor:pointer; background-color:#B2D1FF; border-radius:7px; width:30px;");
    Celica7.appendChild(span);
    Vrstica.appendChild(Celica7);

    TabelaCrop.childNodes[1].appendChild(Vrstica);

}

function IzbrisiIzCropTabele() {
    this.parentNode.parentNode.parentNode.removeChild(this.parentNode.parentNode);
}

function DodajGumbDodajNaFarmlist() {
    var Prostor = document.getElementById("CropFinderDodajNaFarmlist");
    Prostor.innerHTML = "";
    var VILLAGES = document.getElementById("VILLAGES").value.split("|");
    if (unsafeWindow.PLAYER.villages.length > 0) {
        var SeznamOpcij = document.createElement("select");
        SeznamOpcij.setAttribute("class", "dropdown");
        SeznamOpcij.id = "CropFinderDodajNaFarmlistNaselje";

        for (var StevilkaVasi = 0; StevilkaVasi < unsafeWindow.PLAYER.villages.length; StevilkaVasi++) {
            var Opcija = document.createElement("option");
            Opcija.value = unsafeWindow.PLAYER.villages[StevilkaVasi].villageid;
            var tekstzaprikaz = unsafeWindow.PLAYER.villages[StevilkaVasi].name+" (" + unsafeWindow.PLAYER.villages[StevilkaVasi].x + "|" + unsafeWindow.PLAYER.villages[StevilkaVasi].y + ")";
            Opcija.innerHTML = tekstzaprikaz; //VILLAGES[StevilkaVasi];
            SeznamOpcij.appendChild(Opcija);
        }





        var GumbDodaj = document.createElement("input");
        GumbDodaj.id = "oznacivsefarmfinder";
        GumbDodaj.type = "checkbox";
        GumbDodaj.addEventListener('click', oznacivsefarmfinder, true);

        var textspredaj = document.createElement("b");
        textspredaj.innerHTML = "Check all: ";

        Prostor.appendChild(textspredaj);
        Prostor.appendChild(GumbDodaj);
        Prostor.appendChild(document.createElement("br"));

        var textspredaj = document.createElement("b");
        textspredaj.innerHTML = "Check/uncheck all players with name (ex: Natars), if more then one, seperate by ',' (ex: friend1,friend,friend3): ";
        Prostor.appendChild(textspredaj);

        var GumbDodaj = document.createElement("input");
        GumbDodaj.id = "oznaciNatarjeText";
        GumbDodaj.type = "text";
        Prostor.appendChild(GumbDodaj);

        var GumbDodaj = document.createElement("input");
        GumbDodaj.id = "oznaciNatarjeCheckBox";
        GumbDodaj.type = "checkbox";
        GumbDodaj.addEventListener('click', oznaciNatarje, true);
        Prostor.appendChild(GumbDodaj);
        Prostor.appendChild(document.createElement("br"));

        var textspredaj = document.createElement("b");
        textspredaj.innerHTML = "Check/uncheck all villages with name (ex: WW village), if more then one, seperate by ',' (ex: friend1,friend,friend3): ";
        Prostor.appendChild(textspredaj);

        var GumbDodaj = document.createElement("input");
        GumbDodaj.id = "oznaciNatarje2Text";
        GumbDodaj.type = "text";
        Prostor.appendChild(GumbDodaj);

        var GumbDodaj = document.createElement("input");
        GumbDodaj.id = "oznaciNatarje2CheckBox";
        GumbDodaj.type = "checkbox";
        GumbDodaj.addEventListener('click', oznaciNatarje2, true);
        Prostor.appendChild(GumbDodaj);
        Prostor.appendChild(document.createElement("br"));


        var textspredaj = document.createElement("b");
        textspredaj.innerHTML = "Add coordinates to farm name: <input id='cropfinderkoordinate' type='checkbox'>";
        Prostor.appendChild(textspredaj);
        Prostor.appendChild(document.createElement("br"));

        var textspredaj = document.createElement("b");
        textspredaj.innerHTML = "Add selected farms to farmlist of village: ";
        Prostor.appendChild(textspredaj);
        Prostor.appendChild(SeznamOpcij);
        Prostor.appendChild(document.createElement("br"));

        var textspredaj = document.createElement("b");
        textspredaj.innerHTML = "Units: <input type='text' value='0' id='cropfinderunit1' size='1'><input type='text' value='0' id='cropfinderunit2' size='1'><input type='text' value='0' id='cropfinderunit3' size='1'><input type='text' value='0' id='cropfinderunit4' size='1'><input type='text' value='0' id='cropfinderunit5' size='1'><input type='text' value='0' id='cropfinderunit6' size='1'><input type='text' value='0' id='cropfinderunit7' size='1'><input type='text' value='0' id='cropfinderunit8' size='1'><input type='text' value='0' id='cropfinderunit9' size='1'><input type='text' value='0' id='cropfinderunit10' size='1'><input type='text' value='0' id='cropfinderunit11' size='1'>";
        Prostor.appendChild(textspredaj);
        Prostor.appendChild(document.createElement("br"));

        var textspredaj = document.createElement("b");
        textspredaj.innerHTML = "Active: <input id='cropfinderactive' type='checkbox'>";
        Prostor.appendChild(textspredaj);
        Prostor.appendChild(document.createElement("br"));

        var textspredaj = document.createElement("b");
        textspredaj.innerHTML = "Type: <select id='cropfindertype'><option value='2'>Reinforcement</option><option value='3'>Attack</option><option value='4'>Raid</option></select>";
        Prostor.appendChild(textspredaj);
        Prostor.appendChild(document.createElement("br"));

        var GumbDodaj = document.createElement("button");
        GumbDodaj.id = "CropFinderDodajNaFarmlistDodaj";
        GumbDodaj.setAttribute("class", "rounded");
        GumbDodaj.id = "gumb5";
        GumbDodaj.addEventListener('click', CropFinderDodajNaFarmlistHandler, true);
        var VsebinaGumba = document.createElement("span");
        VsebinaGumba.innerHTML = "Add to farmlist";
        GumbDodaj.appendChild(VsebinaGumba);
        Prostor.appendChild(GumbDodaj);
        GumbDodaj = null;

        document.getElementById("cropfindertype").value = 4;



    }
}

var Stevilo = 0;
function UstvariBackGumb() {
    if (SprotnoUpdatanje == "DA") {
        var DivBack = document.createElement("div");
        DivBack.id = "DivBack";
        document.body.appendChild(DivBack);


        var GumbBack = document.createElement("input");
        GumbBack.type = "button";
        GumbBack.value = "BACK";
        //GumbBack.onClick=GumbBackHandler;
        GumbBack.addEventListener('click', GumbBackHandler, true);
        GumbBack.id = "gumb7";
        DivBack.appendChild(GumbBack);
        GumbBack = null;

        var GumbBack = document.createElement("input");
        GumbBack.type = "button";
        GumbBack.value = "FORWARD";
        GumbBack.addEventListener('click', GumbNaprejHandler, true);
        GumbBack.id = "gumb8";
        DivBack.appendChild(GumbBack);
        GumbBack = null;

    }
}


function TravianStran() {
    addGlobalStyle('#GoToWebPage {' +
'  z-index: 500;' +
'  position: fixed;' +
'  right: 0em;' +
'  bottom: 0;' +
'background: transparent' + 
'  width: 250px;' +
'  height: 100px;' +
'}');

    var GoToWebPage = document.createElement('div');
    GoToWebPage.id = 'GoToWebPage';


    var divx = document.createElement("div");
    divx.setAttribute("style", "text-align: right; background: transparent; z-index: 5001; position: fixed; right: 10px; bottom: 5px; width: 35px; height: 20px; cursor: pointer;");
    divx.innerHTM = "&nbsp; gdf gdf";

    divx.id = "gumb5";
    divx.addEventListener('click', TravianGumvXHandler, true);
    GoToWebPage.appendChild(divx);


    var kink = window.location.hostname;
    if (kink.indexOf("86.58.69.167:8080") > -1) {
        kink = "www.86.58.69.167:8080/travianx";
    }
    var GumbGoToWebPage = document.createElement("a");
    var httpp=document.location.href.split("://")[0]
    GumbGoToWebPage.href = "http://" + TTserver + "/traviantacticsonline.php?link="+httpp+"://" + kink + "/dorf1.php";
    GumbGoToWebPage.innerHTML = "<img src='http://shrani.si/f/1m/rd/3yZ6GcRu/tti2.png' height='100' width='250'>";
    GumbGoToWebPage.target = "_blank";
    GumbGoToWebPage.setAttribute("style", "font-size:30px; font-weight:bold; color: red; text-align: center; background: transparent;");


    GoToWebPage.appendChild(GumbGoToWebPage);

    document.body.appendChild(GoToWebPage);
}


/////////////////////////////////////
//// funkcije za dodajanje taskov ///
/////////////////////////////////////

function VprasajHandler2() {
    alert(prevodi.helptrain)
}


function VprasajHandler3() {
    alert(prevodi.helpsendres);
}

function DodajFarmoHandler() {
    DodajNaFarmlist(ImeTegaNaselja, IdTrenutneFarme);
}

function TravianGumvXHandler() {
    document.body.removeChild(document.getElementById("GoToWebPage"));
}

function farmajFarmlist() {
    var stevilkafarme = this.value * 1;
    var repeat = this.getAttribute("repeat");
    FarmajGoldClub(stevilkafarme,repeat);
}

function ustvariFarmlist() {
    UstvariFarmlist(this.getAttribute("name"), this.getAttribute("villageid"));
}

function dodajFarmoT4() {
    //    alert([NovaFarmaX, NovaFarmaY,NovaFarmaIme].join("\n"))
    console.log(NovaFarmaX)
    console.log(NovaFarmaY)
    console.log(getCoordfromXY(NovaFarmaX, NovaFarmaY))

    if (NovaFarmaIme == "") {
        NovaFarmaIme = "unknown";
    }
    if (server == "com.eg" || document.domain == "sy.travian.com" || server == "com.sa" || server == "eg" || server == "ae" || server == "ir" || server == "co.il")//right to left
    {
        DodajNaFarmlist(NovaFarmaIme, getCoordfromXY(NovaFarmaY, NovaFarmaX));
    }
    else {
        DodajNaFarmlist(NovaFarmaIme, getCoordfromXY(NovaFarmaX, NovaFarmaY));
    }
}

function VprasajHandler1() {
    alert(prevodi.helpupgradeallfields);
}


function CropFinderDodajNaFarmlistHandler() {
    //cropfindertype
    //cropfinderunit1
    var VseVrstice = document.getElementsByName("VrsticaCropFinder");
    for (var ss = 0; ss < VseVrstice.length; ss++) {
        if (VseVrstice[ss].childNodes[0].childNodes[0].checked == true) {
            PodatkiZaDodat = document.getElementById("AddToFarmlistInput").value.split(",");
            var ime_farme = filtriraj(VseVrstice[ss].childNodes[2].innerHTML);
            var koordinate = VseVrstice[ss].childNodes[3].childNodes[0].innerHTML;
            if (document.getElementById("cropfinderkoordinate").checked == true || document.getElementById("cropfinderkoordinate").checked == "checked") {
                ime_farme += " (" + koordinate + ")";
            }
            var link_farme = VseVrstice[ss].childNodes[3].getAttribute("link");
            var enote = [document.getElementById("cropfinderunit1").value, document.getElementById("cropfinderunit2").value, document.getElementById("cropfinderunit3").value, document.getElementById("cropfinderunit4").value, document.getElementById("cropfinderunit5").value, document.getElementById("cropfinderunit6").value, document.getElementById("cropfinderunit7").value, document.getElementById("cropfinderunit8").value, document.getElementById("cropfinderunit9").value, document.getElementById("cropfinderunit10").value, document.getElementById("cropfinderunit11").value];
            var tip_napada = document.getElementById("cropfindertype").value;
            var aktivna = document.getElementById("cropfinderactive").checked;
            var villageid = document.getElementById("CropFinderDodajNaFarmlistNaselje").value;
            unsafeWindow.PLAYER.TASKNUMBER++;
            var tasknumber = unsafeWindow.PLAYER.TASKNUMBER;
            var Farm = {
                type: "farm",
                name: ime_farme,
                link: link_farme,
                troops: enote,
                att: tip_napada,
                work: aktivna,
                villageid: villageid,
                tasknumber: tasknumber
            }
            unsafeWindow.PLAYER.getVillage(cloneInto(villageid, unsafeWindow)).FARME.push(cloneInto(Farm, unsafeWindow));
            unsafeWindow.PLAYER.getVillage(cloneInto(villageid, unsafeWindow)).DodajFarmo(cloneInto(Farm, unsafeWindow));

        }
    }
}

function GumbBackHandler() {
}

function GumbNaprejHandler() {
}

function DodajTrovanjeHandler() {
    var uspesno = true;
    var villageid = IdTrenutneStrani();
    document.getElementsByName("x")[0].setAttribute("style", "background-color: #FF6347");
    var koordinataX = document.getElementsByName("x")[0].value;
    var koordinataY = document.getElementsByName("y")[0].value;
    var VrednostOpcije = document.getElementById("OpcijaTrgovanje").value;
    var PrikazBoxa = document.getElementById("VrednostCasaTrgovanja").value;

    if (isNumber(koordinataX) || (koordinataX == 0 && koordinataX != "")) {
        document.getElementsByName("x")[0].setAttribute("style", "background-color: #32CD32");
    }
    else {
        document.getElementsByName("x")[0].setAttribute("style", "background-color: #FF6347");
        uspesno = false;
    }


    if (isNumber(PrikazBoxa) && (VrednostOpcije == 2 || VrednostOpcije == 3)) {
        document.getElementById("VrednostCasaTrgovanja").setAttribute("style", "background-color: #32CD32");
    }
    else if (VrednostOpcije == 2 || VrednostOpcije == 3) {
        document.getElementById("VrednostCasaTrgovanja").setAttribute("style", "background-color: #FF6347");
        uspesno = false;
    }


    if (isNumber(koordinataY) || (koordinataY == 0 && koordinataY != "")) {
        document.getElementsByName("y")[0].setAttribute("style", "background-color: #32CD32");
    }
    else {
        document.getElementsByName("y")[0].setAttribute("style", "background-color: #FF6347");
        uspesno = false;
    }

    if (VrednostOpcije == 3) {
        var LesZaDodat = document.getElementById("ProcentiPosiljaLes").value;
        var GlinaZaDodat = document.getElementById("ProcentiPosiljaGlina").value;
        var ZelezoZaDodat = document.getElementById("ProcentiPosiljaZelezo").value;
        var ZitoZaDodat = document.getElementById("ProcentiPosiljaZito").value;
        var LesZaSprejet = document.getElementById("ProcentiSprejemaLes").value;
        var GlinaZaSprejet = document.getElementById("ProcentiSprejemaGlina").value;
        var ZelezoZaSprejet = document.getElementById("ProcentiSprejemaZelezo").value;
        var ZitoZaSprejet = document.getElementById("ProcentiSprejemaZito").value;

        if (isNumber(LesZaDodat) && isNumber(GlinaZaDodat) && isNumber(ZelezoZaDodat) && isNumber(ZitoZaDodat) && isNumber(LesZaSprejet) && isNumber(GlinaZaSprejet) && isNumber(ZelezoZaSprejet) && isNumber(ZitoZaSprejet)) {
            document.getElementById("ProcentiPosiljaLes").setAttribute("style", "background-color: #32CD32");
            document.getElementById("ProcentiPosiljaGlina").setAttribute("style", "background-color: #32CD32");
            document.getElementById("ProcentiPosiljaZelezo").setAttribute("style", "background-color: #32CD32");
            document.getElementById("ProcentiPosiljaZito").setAttribute("style", "background-color: #32CD32");
            document.getElementById("ProcentiSprejemaLes").setAttribute("style", "background-color: #32CD32");
            document.getElementById("ProcentiSprejemaGlina").setAttribute("style", "background-color: #32CD32");
            document.getElementById("ProcentiSprejemaZelezo").setAttribute("style", "background-color: #32CD32");
            document.getElementById("ProcentiSprejemaZito").setAttribute("style", "background-color: #32CD32");
        }
        else {
            uspesno = false;
            document.getElementById("ProcentiPosiljaLes").setAttribute("style", "background-color: #FF6347");
            document.getElementById("ProcentiPosiljaGlina").setAttribute("style", "background-color: #FF6347");
            document.getElementById("ProcentiPosiljaZelezo").setAttribute("style", "background-color: #FF6347");
            document.getElementById("ProcentiPosiljaZito").setAttribute("style", "background-color: #FF6347");
            document.getElementById("ProcentiSprejemaLes").setAttribute("style", "background-color: #FF6347");
            document.getElementById("ProcentiSprejemaGlina").setAttribute("style", "background-color: #FF6347");
            document.getElementById("ProcentiSprejemaZelezo").setAttribute("style", "background-color: #FF6347");
            document.getElementById("ProcentiSprejemaZito").setAttribute("style", "background-color: #FF6347");
        }

        if (uspesno) {
            //var ZaVracanjeTrgovanja = [villageid, PrioritetaTrgovanje, 100, koordinataX, koordinataY, LesZaDodat / 100, GlinaZaDodat / 100, ZelezoZaDodat / 100, ZitoZaDodat / 100, VrednostOpcije, PrikazBoxa, LesZaSprejet / 100, GlinaZaSprejet / 100, ZelezoZaSprejet / 100, ZitoZaSprejet / 100];

            var trgovanje =
            {
                villageid: villageid,
                type: "trade",
                x: koordinataX,
                y: koordinataY,
                woodEmpty: LesZaDodat / 100,
                clayEmpty: GlinaZaDodat / 100,
                ironEmpty: ZelezoZaDodat / 100,
                grainEmpty: ZitoZaDodat / 100,
                option: VrednostOpcije,
                optionValue: PrikazBoxa,
                woodAccept: LesZaSprejet / 100,
                clayAccept: GlinaZaSprejet / 100,
                ironAccept: ZelezoZaSprejet / 100,
                grainAccept: ZitoZaSprejet / 100,
                wood: 0,
                clay: 0,
                iron: 0,
                grain: 0,
                time: 0,
                joinwithprevious:false
            }

            var myJSONText = JSON.stringify(trgovanje);

            VrniServeru(myJSONText);
        }


    }
    else {

        if (document.getElementById("r1").value != "" || document.getElementById("r2").value != "" || document.getElementById("r3").value != "" || document.getElementById("r4").value != "") {
            var LesZaDodat = document.getElementById("r1").value;
            var GlinaZaDodat = document.getElementById("r2").value;
            var ZelezoZaDodat = document.getElementById("r3").value;
            var ZitoZaDodat = document.getElementById("r4").value;
            if (LesZaDodat == "") { LesZaDodat = 0; }
            if (GlinaZaDodat == "") { GlinaZaDodat = 0; }
            if (ZelezoZaDodat == "") { ZelezoZaDodat = 0; }
            if (ZitoZaDodat == "") { ZitoZaDodat = 0; }
            document.getElementsByName("r1")[0].setAttribute("style", "background-color: #32CD32");
            document.getElementsByName("r2")[0].setAttribute("style", "background-color: #32CD32");
            document.getElementsByName("r3")[0].setAttribute("style", "background-color: #32CD32");
            document.getElementsByName("r4")[0].setAttribute("style", "background-color: #32CD32");
        }
        else {
            uspesno = false;
            document.getElementsByName("r1")[0].setAttribute("style", "background-color: #FF6347");
            document.getElementsByName("r2")[0].setAttribute("style", "background-color: #FF6347");
            document.getElementsByName("r3")[0].setAttribute("style", "background-color: #FF6347");
            document.getElementsByName("r4")[0].setAttribute("style", "background-color: #FF6347");
        }

        if (uspesno) {
            //var ZaVracanjeTrgovanja = [villageid, PrioritetaTrgovanje, 100, koordinataX, koordinataY, LesZaDodat, GlinaZaDodat, ZelezoZaDodat, ZitoZaDodat, VrednostOpcije, PrikazBoxa];
            var trgovanje =
            {
                villageid: villageid,
                type: "trade",
                x: koordinataX,
                y: koordinataY,
                woodEmpty: 100,
                clayEmpty: 100,
                ironEmpty: 100,
                grainEmpty: 100,
                option: VrednostOpcije,
                optionValue: PrikazBoxa,
                woodAccept: 0,
                clayAccept: 0,
                ironAccept: 0,
                grainAccept: 0,
                wood: LesZaDodat,
                clay: GlinaZaDodat,
                iron: ZelezoZaDodat,
                grain: ZitoZaDodat,
                time: 0,
                joinwithprevious: false
            }
            var myJSONText = JSON.stringify(trgovanje);

            VrniServeru(myJSONText);
        }
    }
}

function NadgradiVsaPoljaHandler() {
    TaIdStrani = IdTrenutneStrani();
    var gradnja =
        {
            id: 0,
            level: document.getElementById("doStopnje").value,
            building: 0,
            villageid: IdTrenutneStrani(),
            type: "building",
            joinwithprevious: false,
            fields: {
                wood: document.getElementById("upgradeallwood").checked,
                clay: document.getElementById("upgradeallclay").checked,
                iron: document.getElementById("upgradealliron").checked,
                crop: document.getElementById("upgradeallcrop").checked
            }
        };
    var myJSONText = JSON.stringify(gradnja);
    testlog(gradnja)
    VrniServeru(myJSONText);
}

function DodajNaFarmlist(ime_farme, link_farme) {
    var village = IdTrenutneStrani();
    try {
        link_farme = link_farme.split("&")[0];
    }
    catch (err) { }
    var Farm =
    {
        type: "farm",
        name: filtriraj(ime_farme),
        link: link_farme,
        troops: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        att: 4,
        work: false,
        villageid: village
    }
    var myJSONText = JSON.stringify(Farm);
    console.log(Farm)
    VrniServeru(myJSONText);
}

function DodajPartyHandler() {

    var TaIdStrani = IdTrenutneStrani();
    var demolish =
        {
            gid: this.getAttribute("gid"),
            repeat: document.getElementById("RepeatEvery" + this.getAttribute("festival")).value,
            festival: this.getAttribute("festival"),
            r1: this.getAttribute("r1"),
            r2: this.getAttribute("r2"),
            r3: this.getAttribute("r3"),
            r4: this.getAttribute("r4"),
            villageid: TaIdStrani,
            type: "Party",
            time: 0,
            joinwithprevious: false
        };
    var myJSONText = JSON.stringify(demolish);
    VrniServeru(myJSONText);
}

function DodajArmorUpgradeHandler() {

    var TaIdStrani = IdTrenutneStrani();
    var demolish =
        {
            gid: this.getAttribute("gid"),
            level: document.getElementById("MaxLevel" + this.getAttribute("unit")).value,
            unit: this.getAttribute("unit"),
            villageid: TaIdStrani,
            type: "ArmorUpgrade",
            time: 0,
            joinwithprevious: false
        };
    var myJSONText = JSON.stringify(demolish);
    VrniServeru(myJSONText);
}

function DodajDemolishHandler() {
    var select = document.getElementsByName("abriss")[0];
    var stavba = select.value;
    var Vsebina = "";
    for (var i = 0; i < select.childNodes.length; i++) {
        try {
            if (select.childNodes[i].value == stavba && select.childNodes[i].tagName.toLowerCase() == "option") {
                Vsebina = select.childNodes[i].innerHTML;
                break;
            }
        }
        catch (err) {
        }

    }

    var TaIdStrani = IdTrenutneStrani();
    var demolish =
        {
            gid: this.getAttribute("gid"),
            level: document.getElementById("MinLevel").value,
            building: stavba,
            name: Vsebina,
            villageid: TaIdStrani,
            type: "demolish",
            time: 0,
            active: true,
            joinwithprevious: false
        };
    var myJSONText = JSON.stringify(demolish);
    VrniServeru(myJSONText);
}

function DodajGradnjoHandler() {
    console.log("dodajgradnjohandler")
    if (this.getAttribute("polozaj") * 1 + "" == "NaN" || this.getAttribute("polozaj") * 1 > 40) {
        alert("Id of building wasnt recognised correctly. Please go to dorf1/dorf2 page and click on wanted building. If error is still there, pelase post it on forum")
        return;
    }
    var TaIdStrani = IdTrenutneStrani();
    var gradnja =
        {
            id: this.getAttribute("polozaj"),
            level: document.getElementById("doStopnje").value,
            building: this.getAttribute("stavba"),
            villageid: TaIdStrani,
            type: "building",
            joinwithprevious: false
        };

    var myJSONText = JSON.stringify(gradnja);

    VrniServeru(myJSONText);
}

function DodajGradnjoHandler2() {
    if (this.getAttribute("polozaj") * 1 + "" == "NaN" || this.getAttribute("polozaj") * 1 > 40) {
        alert("Id of building wasnt recognised correctly. Please go to dorf1/dorf2 page and click on wanted building. If error is still there, pelase post it on forum")
        return;
    }

    var gradnja =
        {
            id: this.getAttribute("polozaj"),
            level: document.getElementById("doStopnje" + this.name).value,
            building: this.name,
            villageid: IdTrenutneStrani(),
            type: "building",
            joinwithprevious: false
        };

    var myJSONText = JSON.stringify(gradnja);

    VrniServeru(myJSONText);
}


function DodajUrjenjeHandler() {
    var uspesno = true;
    var villageid = IdTrenutneStrani();
    var EnoteZaUrjenje = [];
    for (var gsd = 1; gsd < 12; gsd++) {
        try {
            eval("t" + gsd + " = document.getElementsByName('t" + gsd + "')[1].value*1;");
            eval("t" + gsd + "true=true;");
        }
        catch (Error) {

            try {
                eval("t" + gsd + " = document.getElementsByName('t" + gsd + "')[0].value*1;");
                eval("t" + gsd + "true=true;");
            }
            catch (Error) {
                eval("t" + gsd + " = 0");
                eval("t" + gsd + "true=false;");
            }
        }
        EnoteZaUrjenje.push(eval("t" + gsd));

    }

    var VrednostOpcije = document.getElementById("OpcijaUrjenje").value;
    var PrikazBoxa = document.getElementById("VrednostCasaUrjenje").value;
    var barva = "#FF6347";
    if (t1 == 0 && t2 == 0 && t3 == 0 && t4 == 0 && t5 == 0 && t6 == 0 && t7 == 0 && t8 == 0 && t9 == 0 && t10 == 0 && t11 == 0) {
        barva = "#FF6347";
        uspesno = false;
    }
    else {
        barva = "#32CD32";
    }

    for (var gsd = 1; gsd < 12; gsd++) {
        try {
            eval("document.getElementsByName('t" + gsd + "')[1].setAttribute('style','background-color: " + barva + "');");
        }
        catch (Error) {

            try {
                eval("document.getElementsByName('t" + gsd + "')[0].setAttribute('style','background-color: " + barva + "');");
            }
            catch (Error) {
            }
        }
    }

    if ((Number(PrikazBoxa) || PrikazBoxa == 0) && VrednostOpcije == 1 && PrikazBoxa != "") {
        document.getElementById("VrednostCasaUrjenje").setAttribute("style", "background-color: #32CD32");
    }
    else if (VrednostOpcije == 1) {
        document.getElementById("VrednostCasaUrjenje").setAttribute("style", "background-color: #FF6347");
        uspesno = false;
    }

    if (uspesno) {
        //var ZaVracanjeTrgovanja = [villageid, PrioritetaUrjenje, 101, VrednostOpcije, PrikazBoxa, 0, gid];
        try {
            var id = document.getElementsByName("id")[0].value;
        }
        catch (er) { id = 0; }
        var Train =
        {
            villageid: villageid,
            type: "Train",
            option: VrednostOpcije,
            optionValue: PrikazBoxa,
            units: [t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11],
            gid: gid,
            id: id,
            time: 0,
            joinwithprevious: false
        }

        var myJSONText = JSON.stringify(Train);

        VrniServeru(myJSONText);
    }
    else {

    }

}

function dodajFarmlistT4() {

    console.log("test0")
    var stars = this.parentNode;
    var nekdiv = document.createElement("div");
    nekdiv.innerHTML = this.parentNode.innerHTML;
    var lid = nekdiv.getElementsByTagName("input");
    for (var asd = 0; asd < lid.length; asd++) {
        try {
            if (lid[asd].getAttribute("name") == "lid") {
                lid = lid[asd].getAttribute("value");
                break;
            }
        }
        catch (err) { }
    }
    try
    {
        var ime=nekdiv.getElementsByTagName("div")[0].getElementsByClassName("listTitleText")[0].childNodes[0].data.trim();
    }
    catch(errr)
    {
        var ime = nekdiv.getElementsByTagName("div")[0].getElementsByTagName("div")[0];

        while (ime.getElementsByTagName("button").length) {
            ime.removeChild(ime.getElementsByTagName("button")[0]);
        }
        while (ime.getElementsByTagName("img").length) {
            ime.removeChild(ime.getElementsByTagName("img")[0]);
        }

        ime = ime.innerHTML.split("	").join("").split("\n").join("");
    }
    
    
    var villageid = IdTrenutneStrani();
    //alert([lid,ime,villageid].join("\n"));
    var trenutendatum = new Date();
    var farmlista = {
        lid: lid,
        ime: ime,
        villageid: villageid,
        active: true,
        type: "farmlist",
        farmnumber: 0,
        date: trenutendatum.getTime(),
        intervalmin: 20,
        intervalmax: 60,
        troopshome: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        completed:false,
        completedtime: trenutendatum.getTime() - 300001
    }

    var myJSONText = JSON.stringify(farmlista);

    VrniServeru(myJSONText);

}



function OpcijeUrjenjeHandler() {
    //alert("spremenjeno");
    var VrednostOpcije = document.getElementById("OpcijaUrjenje").value;
    var PrikazBoxa = document.getElementById("VrednostCasaUrjenje");
    if (VrednostOpcije == 1) {
        PrikazBoxa.style.display = "";
    }
    else {
        PrikazBoxa.style.display = "none";
    }
}

function OpcijeTrovanjeHandler() {
    //alert("spremenjeno");
    var VrednostOpcije = document.getElementById("OpcijaTrgovanje").value;
    var PrikazBoxa = document.getElementById("VrednostCasaTrgovanja");
    if (VrednostOpcije == 2) {
        PrikazBoxa.style.display = "";
        document.getElementById("divProcentiTrgovanje").style.display = "none";
        document.getElementById("MinResText").style.display = "none";
    }
    else if (VrednostOpcije == 3) {
        PrikazBoxa.style.display = "";
        document.getElementById("divProcentiTrgovanje").style.display = "";
        document.getElementById("MinResText").style.display = "";
    }
    else {
        PrikazBoxa.style.display = "none";
        document.getElementById("divProcentiTrgovanje").style.display = "none";
        document.getElementById("MinResText").style.display = "none";

    }
}

function OpcijeVasiHandler() {
    //alert("spremenjeno");
    var PoljeX = document.getElementsByName("x")[0];
    var PoljeY = document.getElementsByName("y")[0];
    var VrednostOpcije = document.getElementById("OpcijaVasiTrgovanje").value;
    if (VrednostOpcije == 0) {
        PoljeX.disabled = false;
        PoljeY.disabled = false;
    }
    else {
        PoljeX.disabled = true;
        PoljeY.disabled = true;
        PoljeX.value = getXfromCoord(VrednostOpcije);
        PoljeY.value = getYfromCoord(VrednostOpcije);
    }
}

function omogociXY() {
    var PoljeX = document.getElementsByName("x")[0];
    var PoljeY = document.getElementsByName("y")[0];
    PoljeX.disabled = false;
    PoljeY.disabled = false;
}






/////////////////////////////////////////////
//// funkcije za nastavljanje novega casa ///
/////////////////////////////////////////////



var AttBuilderTimeout;
var AttBuilderCheckTimeout;
var povecajCasinterval;
function povecajCas() {
    if (!unsafeWindow.Stopped) {
        AttbuildCurReq++;
        var timeleft = Math.round(AttbuildMaxReq * (21 - AttbuildCurReq) / (1000 * 20))
        unsafeWindow.SpremeniStatus('Waiting ' + timeleft + ' seconds to send attack<progress value="' + AttbuildCurReq + '" max="20">' + AttbuildCurReq + '</progress>');
        if (AttbuildCurReq < 20) {
            povecajCasinterval=setTimeout(povecajCas, AttbuildMaxReq / 20);
        }
    }
    else {
        try {
            clearTimeout(AttBuilderTimeout);
            clearTimeout(AttBuilderCheckTimeout);
            
        }
        catch (err) {
        }
        try {
            clearTimeout(povecajCasinterval);
        }
        catch (err) { }
    }
}

function NastaviNovCasHero() {
    var zdaj = new Date();
    unsafeWindow.PLAYER.hero.time = zdaj.getTime() + Math.round(RandomXtoY(900, 1100) * unsafeWindow.PLAYER.hero.interval * 60);
    if (!unsafeWindow.Stopped) {
        unsafeWindow.Start();
        return;
    }
}




///////////////////////////////////
//// funkcije za izvedbo taskov ///
///////////////////////////////////


function izvediTask()
{
    TravianServer = unsafeWindow.TravianServer;
    var task = this.getAttribute("task");
    task = eval("(" + task + ")");

    //testlog(task);
    switch (task.type) {
        case "building":
            switch (TravianServer) {
                case 3:
                    NadgradiT3(task);
                    break;
                case 4:
                case 4.2:
                    NadgradiT4(task);
                    break;
            }
            break;
        case "Train":
            switch (TravianServer) {
                case 3:
                    UriEnoteT3(task);
                    break;
                case 4:
                case 4.2:
                    UriEnoteT4(task);
                    break;
            }
            break;
        case "trade":
            switch (TravianServer) {
                case 3:
                    PosljiSurovineT3(task);
                    break;
                case 4:
                case 4.2:
                    PosljiSurovineT4(task);
                    break;
            }
            break;
        case "farm":
            switch (TravianServer) {
                case 3:
                    PosljiEnoteT3(task);
                    break;
                case 4:
                case 4.2:
                    PosljiEnoteT4(task);
                    break;
            }
            break;
        case "demolish":
            Demolish(task);
            break;
        case "AttackBuilder":
            task.curetdata = 0;
            AttackBuilder(task);
            break;
        case "ArmorUpgrade":
            switch (TravianServer) {
                case 3:
                    ArmorUpgradeT3(task);
                    break;
                case 4:
                case 4.2:
                    ArmorUpgradeT4(task);
                    break;
            }
            break;
        case "Party":
            switch (TravianServer) {
                case 3:
                    PartyT3(task);
                    break;
                case 4:
                case 4.2:
                    PartyT4(task);
                    break;
            }
            break;
        case "Hero":
            setTimeout(function () {
                PosljiHeroja(task);
            }, RandomXtoY(1000, 2000));
            break;
        case "testzbiralisca":
            setTimeout(function () {
                testzbiralisca();
            }, RandomXtoY(1000, 2000));
            break;
        case "analizirajreporte":
            testlog("analizarep");
            setTimeout(function () {
                AnalizirajReportGoldClub(task.reports, true);
            }, RandomXtoY(1000, 2000));
            break;
        case "tribe":
            console.log("gm recieved task")
            setTimeout(function () {
                AnalizirajPleme();
            }, RandomXtoY(1000, 2000));
            break;
    }
}

function testzbiralisca() {

    setTimeout(function () {
        GM.xmlHttpRequest({
            method: 'GET',
            url: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?gid=16&tt=2",
            //data: data,
            headers: {},
            onload: function (responseDetails) {
                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?gid=16&tt=2");
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }
                var forme = doc.getElementsByTagName("form");
                
                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Nr. of forms:" + forme.length, "Test", 0));
                unsafeWindow.Start();
            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });
    }, RandomXtoY(1000, 2000));


}

function PosljiHeroja(task) {
    if (unsafeWindow.Stopped) {
        return;
    }
    GM.xmlHttpRequest({
        method: 'GET',
        url: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/hero.php?t=1",
        headers: {
            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
        },
        onload: function (responseDetails) {

            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;

            var test124 = PreveriLoginTask(doc,unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/hero.php?t=1");
            if (unsafeWindow.Stopped || !test124) {
                return;
            }
            var tag3331 = doc.evaluate(".//div[@class='heroStatusMessage']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            console.log("hero:")
            console.log(tag3331.snapshotLength)
            if (tag3331.snapshotLength > 0) {
                var herojSlika = tag3331.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                if (herojSlika == 100) {
                    var tag33311 = doc.evaluate(".//td[@class='element current powervalue']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (tag33311.snapshotLength > 0) {
                        try {
                            var herojSlika = tag33311.snapshotItem(0).getElementsByTagName("span")[0].innerHTML.match(/[\d\.]+/g)[0] * 1;
                            if (herojSlika >= unsafeWindow.PLAYER.hero.minhealth) {
                                if (unsafeWindow.PLAYER.hero.advanture) {
                                    setTimeout(PosljiNaDogodivscino, RandomXtoY(1000, 2000));
                                }
                                else {
                                    NastaviNovCasHero();
                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Heros advantures are not enabled.", "Hero", 0));
                                }
                            }
                            else {
                                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Heros health is only " + herojSlika + ", minimum helth:" + unsafeWindow.PLAYER.hero.minhealth, "Hero", 0));
                                NastaviNovCasHero();
                            }
                        }
                        catch (err) {
                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Unable to recognise heros helth", "Hero", 0));
                            NastaviNovCasHero();
                        }
                    }
                    else {
                        NastaviNovCasHero();
                    }
                }
                else {//ni doma
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Hero is not home", "Hero", 0));
                    NastaviNovCasHero();
                }
            }
            else {//ni doma
                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Unable to recognise if hero is home.", "Hero", 0));
                NastaviNovCasHero();
            }
        },
        onerror: function (responseDetails) {
            
            setTimeout(function () {
                
                if (unsafeWindow.Stopped == false) {
                    unsafeWindow.StartEvent();
                }
            }, 60000);
        },
        ontimeout: function (responseDetails) {
            
            setTimeout(function () {
                
                if (unsafeWindow.Stopped == false) {
                    unsafeWindow.StartEvent();
                }
            }, 60000);
        },
        onabort: function (responseDetails) {
            
            setTimeout(function () {
                
                if (unsafeWindow.Stopped == false) {
                    unsafeWindow.StartEvent();
                }
            }, 60000);
        }
    });
}

function PosljiNaDogodivscino() {
    unsafeWindow.SpremeniStatus("Trying to send hero to advanture");
    if (unsafeWindow.Stopped) {
        return;
    }
    GM.xmlHttpRequest({
        method: 'GET',
        url: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/hero.php?t=3",
        headers: {
            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
        },
        onload: function (responseDetails) {

            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;

            var test124 = PreveriLoginTask(doc,unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/hero.php?t=3");
            if (unsafeWindow.Stopped || !test124) {
                return;
            }

            var tag33311 = doc.evaluate(".//div[@class='heroStatusMessage']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

            if (tag33311.snapshotLength > 0) {
                for (var k = 0; k < tag33311.snapshotLength; k++) {
                    try {
                        if (tag33311.snapshotItem(k).getElementsByTagName("div")[0].getAttribute("class") == "error") {
                            unsafeWindow.SpremeniStatus("Unable to send hero to advanture");
                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Unable to send hero to advanture(probably no rally point).", "Hero", 0));
                            NastaviNovCasHero();
                            return;
                        }
                    } catch (err) { }
                }
            }
            var IdStrani = doc.evaluate(".//a[contains(@href, 'start_adventure.php')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (IdStrani.snapshotLength > 0) {
                var link = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/" + IdStrani.snapshotItem(0).getAttribute("href");
                unsafeWindow.SpremeniStatus("Sending hero to advanture");

                setTimeout(function () {
                    GM.xmlHttpRequest({
                        method: 'GET',
                        url: link,
                        headers: {
                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
                        },
                        onload: function (responseDetails) {

                            var doc = document.implementation.createHTMLDocument('My title');
                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                            doc.documentElement.appendChild(body);
                            doc.body.innerHTML = responseDetails.responseText;

                            var test124 = PreveriLoginTask(doc,link);
                            if (unsafeWindow.Stopped || !test124) {
                                return;
                            }

                            var IdStrani = doc.evaluate(".//form[@class='adventureSendButton']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                            if (IdStrani.snapshotLength > 0) {
                                var form = IdStrani.snapshotItem(0).getElementsByTagName("input");
                                var data = "";
                                for (var i = 0; i < form.length; i++) {
                                    data += form[i].getAttribute("name") + "=" + form[i].value + "&";
                                }
                                data += "start=start";

                                setTimeout(function () {
                                    GM.xmlHttpRequest({
                                        method: 'POST',
                                        url: unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/start_adventure.php",
                                        data: data,
                                        headers: {
                                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
                                        },
                                        onload: function (responseDetails) {
                                            var doc = document.implementation.createHTMLDocument('My title');
                                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                            doc.documentElement.appendChild(body);
                                            doc.body.innerHTML = responseDetails.responseText;

                                            var test124 = PreveriLoginTask(doc,unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/start_adventure.php");
                                            if (unsafeWindow.Stopped || !test124) {
                                                return;
                                            }
                                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Hero has been sent to adventure.", "Hero", 0));
                                            NastaviNovCasHero();
                                        },
                                        onerror: function (responseDetails) {
                                            
                                            setTimeout(function () {
                                                
                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        ontimeout: function (responseDetails) {
                                            
                                            setTimeout(function () {
                                                
                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        onabort: function (responseDetails) {
                                            
                                            setTimeout(function () {
                                                
                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        }
                                    });
                                }, RandomXtoY(1000, 5000));
                            }
                            else {
                                NastaviNovCasHero();
                                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Unable to send hero to advanture.", "Hero", 0));
                            }
                        },
                        onerror: function (responseDetails) {
                            
                            setTimeout(function () {
                                
                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        },
                        ontimeout: function (responseDetails) {
                            
                            setTimeout(function () {
                                
                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        },
                        onabort: function (responseDetails) {
                            
                            setTimeout(function () {
                                
                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        }
                    });
                }, RandomXtoY(1000, 5000));
            }
            else {
                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("There is no avaible advanture.", "Hero", 0));
                NastaviNovCasHero();
            }
        },
        onerror: function (responseDetails) {
        }
    });
}

function PreveriAttackBuilder(task) {
    
    if (unsafeWindow.Stopped) {
        try {
            clearTimeout(AttBuilderTimeout);
            clearTimeout(AttBuilderCheckTimeout);

        }
        catch (err) { }
        try {
            clearTimeout(povecajCasinterval);
        }
        catch (err) { }
        return;
    }
    
    var reklink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?newdid=" + task.villageid + "&id=39&tt=2&z=" + getCoordfromXY(task.x, task.y);
    if (unsafeWindow.TravianServer == 3) {
        reklink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/a2b.php?newdid=" + task.villageid + "&z=" + getCoordfromXY(task.x, task.y);
    }

    GM.xmlHttpRequest({
        method: 'GET',
        url: reklink,
        headers: {},
        onload: function (responseDetails) {
            AttbuildCurReq++;

            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;

            var test124 = PreveriLoginTask(doc,reklink);
            if (unsafeWindow.Stopped || !test124) {
                return;
            }
            var inputs = doc.getElementsByTagName("form")[0].getElementsByTagName("input");
            var data = "";
            var AnalysedC = false;
            var AnalysedT11 = false;
            for (var i = 0; i < inputs.length; i++) {
                if (i > 0 && inputs[i].getAttribute("name") != "c") {
                    data += "&";
                }

                if (inputs[i].getAttribute("name") == "t11") {
                    AnalysedT11 = true;
                }

                if (inputs[i].getAttribute("name").indexOf("t") > -1 && inputs[i].getAttribute("name").match(/[\d\.]+/g) != null) {

                    var troop = inputs[i].getAttribute("name").match(/[\d\.]+/g)[0] * 1 - 1;
                    var maxtroop = 0;

                    if (inputs[i].getAttribute("class").indexOf("disabled") == -1) {
                        maxtroop = inputs[i].parentNode.getElementsByTagName("a")[0].getAttribute("onclick").split(inputs[i].getAttribute("name"))[1].split(".").join("").match(/[\d\.]+/g)[0] * 1;
                    }


                    if (task.totaltroop[troop] * 1 <= maxtroop * 1) {
                        data += inputs[i].getAttribute("name") + "=" + task.attacks[task.curetdata].troops[troop];
                    }
                    else if (troop == 10) {
                        if (1 <= maxtroop && task.attacks[task.curetdata].hero) {
                            data += inputs[i].getAttribute("name") + "=1";
                        }
                        else {
                            data += inputs[i].getAttribute("name") + "=0";
                        }
                    }
                    else {
                        unsafeWindow.SpremeniStatus("Not enought troops");
                        try {
                            clearTimeout(AttBuilderTimeout);
                            clearTimeout(AttBuilderCheckTimeout);

                        }
                        catch (err) { }
                        try {
                            clearTimeout(povecajCasinterval);
                        }
                        catch (err) { }
                        setTimeout(function () {
                            if (!unsafeWindow.Stopped) {
                                unsafeWindow.Start()
                            }
                        }, 5000);
                        return;
                    }
                }
                else if (inputs[i].getAttribute("name") == "c") {

                    if (!AnalysedC) {
                        if (i > 0) {
                            data += "&";
                        }
                        data += inputs[i].getAttribute("name") + "=" + task.attackType;
                        AnalysedC = true;
                    }
                }
                else if (inputs[i].getAttribute("name") == "redeployHero") {
                    data += inputs[i].getAttribute("name") + "=";
                }
                else {
                    data += inputs[i].getAttribute("name") + "=" + inputs[i].getAttribute("value");
                }
            }

        },
        onerror: function (responseDetails) {

            setTimeout(function () {

                if (unsafeWindow.Stopped == false) {
                    unsafeWindow.StartEvent();
                }
            }, 60000);
        },
        ontimeout: function (responseDetails) {

            setTimeout(function () {

                if (unsafeWindow.Stopped == false) {
                    unsafeWindow.StartEvent();
                }
            }, 60000);
        },
        onabort: function (responseDetails) {

            setTimeout(function () {

                if (unsafeWindow.Stopped == false) {
                    unsafeWindow.StartEvent();
                }
            }, 60000);
        }
    });

}

function PosljiAttackBuilder(task) {

    
    if (unsafeWindow.Stopped) {
        return;
    }
    var reklink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?id=39&tt=2";
    if (unsafeWindow.TravianServer == 3) {
        reklink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/a2b.php";
    }
    GM.xmlHttpRequest({
        method: 'POST',
        url: reklink,
        data: task["data" + task.curetdata],
        headers: {
            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
        },
        onload: function (responseDetails) {
            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;
        },
        onerror: function (responseDetails) {
        }
    });

    task.curetdata++;

    if (task.curetdata >= task.attacks.length) {
        for (var i = 0; i < unsafeWindow.PLAYER.attackbuilder.TASKS.length; i++) {
            if (unsafeWindow.PLAYER.attackbuilder.TASKS[i].tasknumber == task.tasknumber) {
                unsafeWindow.PLAYER.attackbuilder.TASKS[i].active = false;
                //unsafeWindow.PLAYER.attackbuilder.TASKS[i].time+=60000*1;
                unsafeWindow.PLAYER.attackbuilder.TASKS[i].status = "Attacks have been sent";
            }
        }
        unsafeWindow.SpremeniStatus('Attacks have been sent.');
        var datum = new Date(task.time);
        var dan = datum.getDate() + "";
        if (dan.length == 1) {
            dan = "0" + dan;
        }
        var mesec = datum.getMonth() + 1;
        mesec += "";
        if (mesec.length == 1) {
            mesec = "0" + mesec;
        }
        var leto = datum.getFullYear();

        var ura = datum.getHours() + "";
        if (ura.length == 1) {
            ura = "0" + ura;
        }
        var minuta = datum.getMinutes() + "";
        if (minuta.length == 1) {
            minuta = "0" + minuta;
        }
        var sekunda = datum.getSeconds() + "";
        if (sekunda.length == 1) {
            sekunda = "0" + sekunda;
        }
        var skupaj = dan + "/" + mesec + "/" + leto + " " + ura + ":" + minuta + ":" + sekunda;
        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Attacks to (" + task.x + "|" + task.y + ") have been sent to arrive at " + skupaj, "Attack builder", cloneInto(task.villageid, unsafeWindow)));

        setTimeout(unsafeWindow.Start, 2000);
    }
    else {
        setTimeout(function () {
            PosljiAttackBuilder(task)
        }, task.attacks[task.curetdata].delay);
        
        
    }

}

var AttbuildMaxReq=1;
var AttbuildCurReq=1;
function AttackBuilder(task) {
    if (unsafeWindow.Stopped) {
        return;
    }

    if (task.curetdata == 0) {
        AttbuildMaxReq = task.numberOfAttacks * 2;
        AttbuildCurReq = 0;
    }

    var reklink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?newdid=" + task.villageid + "&id=39&tt=2&z=" + unsafeWindow.PLAYER.getCoordfromXY(task.x, task.y);
    if (unsafeWindow.TravianServer == 3) {
        reklink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/a2b.php?newdid=" + task.villageid + "&z=" + unsafeWindow.PLAYER.getCoordfromXY(task.x, task.y);
    }
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: 'GET',
            url: reklink,
            headers: {
            },
            onload: function (responseDetails) {
                AttbuildCurReq++;

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,reklink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }
                unsafeWindow.SpremeniStatus('Preparing attack builder<progress value="' + AttbuildCurReq + '" max="' + AttbuildMaxReq + '">' + AttbuildCurReq + '</progress>');
                var inputs = doc.getElementsByTagName("form")[0].getElementsByTagName("input");
                var data = "";
                var AnalysedC = false;
                var AnalysedT11 = false;


                for (var i = 0; i < inputs.length; i++) {
                    if (i > 0 && inputs[i].getAttribute("name") != "c") {
                        data += "&";
                    }

                    if (inputs[i].getAttribute("name") == "t11") {
                        AnalysedT11 = true;
                    }

                    if (inputs[i].getAttribute("name").indexOf("t") > -1 && inputs[i].getAttribute("name").match(/[\d\.]+/g) != null) {

                        var troop = inputs[i].getAttribute("name").match(/[\d\.]+/g)[0] * 1 - 1;
                        var maxtroop = 0;
                        //                    switch (unsafeWindow.TravianServer) {
                        //                        case 4:
                        //                        case 4.2:
                        if (inputs[i].getAttribute("class").indexOf("disabled") == -1) {
                            maxtroop = inputs[i].parentNode.getElementsByTagName("a")[0].getAttribute("onclick").split(inputs[i].getAttribute("name"))[1].split(".").join("").match(/[\d\.]+/g)[0] * 1;
                        }
                        //                            break;
                        //                        case 3:
                        //                            break;
                        //                    }

                        if (task.totaltroop[troop] * 1 <= maxtroop * 1) {
                            //attacks[task.curetdata].troops
                            data += inputs[i].getAttribute("name") + "=" + task.attacks[task.curetdata].troops[troop];
                        }
                        else if (troop == 10) {
                            if (1 <= maxtroop && task.attacks[task.curetdata].hero) {
                                data += inputs[i].getAttribute("name") + "=1";
                            }
                            else {
                                data += inputs[i].getAttribute("name") + "=0";
                            }
                        }
                        else {
                            unsafeWindow.SpremeniStatus("Not enought troops");
                            setTimeout(function () {
                                if (!unsafeWindow.Stopped) {
                                    unsafeWindow.Start()
                                }
                            }, 30000);
                            return;
                        }
                    }
                    else if (inputs[i].getAttribute("name") == "c") {

                        if (!AnalysedC) {
                            if (i > 0) {
                                data += "&";
                            }
                            data += inputs[i].getAttribute("name") + "=" + task.attackType;
                            AnalysedC = true;
                        }
                    }
                    else if (inputs[i].getAttribute("name") == "redeployHero") {
                        data += inputs[i].getAttribute("name") + "=";
                    }
                    else {
                        data += inputs[i].getAttribute("name") + "=" + inputs[i].getAttribute("value");
                    }
                }
                //            switch (unsafeWinodw.TravianServer) {
                //                case 4:
                //                case 4.2:
                data += "&s1=ok";
                //                    break;
                //                case 3:
                //                    break;
                //            }

                reklink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?id=39&tt=2";
                if (unsafeWindow.TravianServer == 3) {
                    reklink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/a2b.php";
                }

                setTimeout(function () {
                    GM.xmlHttpRequest({
                        method: 'POST',
                        url: reklink,
                        data: data,
                        headers: {
                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
                        },
                        onload: function (responseDetails) {
                            AttbuildCurReq++;

                            var doc = document.implementation.createHTMLDocument('My title');
                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                            doc.documentElement.appendChild(body);
                            doc.body.innerHTML = responseDetails.responseText;

                            var test124 = PreveriLoginTask(doc,reklink);
                            if (unsafeWindow.Stopped || !test124) {
                                return;
                            }
                            unsafeWindow.SpremeniStatus('Preparing attack builder<progress value="' + AttbuildCurReq + '" max="' + AttbuildMaxReq + '">' + AttbuildCurReq + '</progress>');
                            var inputs = doc.getElementsByTagName("form")[0].getElementsByTagName("input");
                            var data = "";
                            var Analysedspy = false;
                            for (var i = 0; i < inputs.length; i++) {
                                if (i > 0) {
                                    data += "&";
                                }

                                if (inputs[i].getAttribute("name") == "redeployHero") {
                                    data += inputs[i].getAttribute("name") + "=";
                                }
                                else if (inputs[i].getAttribute("name") == "spy") {
                                    if (!Analysedspy) {
                                        if (i > 0) {
                                            data += "&";
                                        }
                                        if (task.attackType == 4) {
                                            data += inputs[i].getAttribute("name") + "=1";
                                        }
                                        else if (task.attackType == 3) {
                                            data += inputs[i].getAttribute("name") + "=2";
                                        }
                                        Analysedspy = true;
                                    }
                                }
                                else if (inputs[i].getAttribute("name") == "kata") {
                                    data += inputs[i].getAttribute("name") + "=" + task.cata1;
                                }
                                else if (inputs[i].getAttribute("name") == "kata2") {
                                    data += inputs[i].getAttribute("name") + "=" + task.cata2;
                                }
                                else {
                                    data += inputs[i].getAttribute("name") + "=" + inputs[i].getAttribute("value");
                                }
                            }
                            data += "&s1=ok";

                            if (task.attacks[task.curetdata].troops[7] * 1 >= 20) {
                                data = "kata2=" + task.attacks[task.curetdata].cata2 + "&" + data;
                            }
                            if (task.attacks[task.curetdata].troops[7] * 1 > 0) {
                                data = "kata=" + task.attacks[task.curetdata].cata1 + "&" + data;
                            }

                            task["data" + task.curetdata] = data;
                            if (task.curetdata == 0) {
                                task["delay" + task.curetdata] = 0;
                            }
                            else {
                                task["delay" + task.curetdata] = task.attacks[task.curetdata].delay * 1;
                            }
                            task.curetdata++;
                            if (task.curetdata >= task.attacks.length) {
                                var Zdaj = new Date();
                                task.curetdata = 0;
                                if (task.calibrateTime) {
                                    count = 0;
                                    CalibratedTimes = [];
                                    task.servercas = serverCas(doc);
                                    task.zdajcas = Zdaj.getTime();
                                    CalibrateTime(task);
                                }
                                else {
                                    var Zdaj = new Date();

                                    var ServerCas = serverCas(doc);
                                    console.log(ServerCas)
                                    var ServerCas1 = new Date();
                                    ServerCas1.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                                    var ServerCas2 = new Date();
                                    ServerCas2.setDate(ServerCas2.getDate() + 1);
                                    ServerCas2.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                                    var ServerCas3 = new Date();
                                    ServerCas3.setDate(ServerCas3.getDate() - 1);
                                    ServerCas3.setHours(ServerCas[0], ServerCas[1], ServerCas[2]);
                                    var MinRazlika = ServerCas1.getTime() - Zdaj.getTime();
                                    console.log(MinRazlika)
                                    if (Math.abs(ServerCas2.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                                        MinRazlika = ServerCas2.getTime() - Zdaj.getTime();
                                    }
                                    if (Math.abs(ServerCas3.getTime() - Zdaj.getTime()) < Math.abs(MinRazlika)) {
                                        MinRazlika = ServerCas3.getTime() - Zdaj.getTime();
                                    }

                                    var preostaliCas = task.time - Zdaj.getTime() - task.triptime - MinRazlika;
                                    console.log(task.time)
                                    console.log(Zdaj.getTime())
                                    console.log(task.triptime)
                                    console.log(MinRazlika)
                                    console.log(preostaliCas)
                                    if (!unsafeWindow.Stopped) {

                                        if (preostaliCas < attbuildsafety) {

                                            AttBuilderCheckTimeout = setTimeout(function () {
                                                PreveriAttackBuilder(task);
                                            }, 0);

                                            AttBuilderTimeout = setTimeout(function () {
                                                PosljiAttackBuilder(task);
                                            }, attbuildsafety);
                                        }
                                        else {
                                            AttbuildMaxReq = preostaliCas;
                                            AttbuildCurReq = 1;
                                            var timeleft = Math.round(AttbuildMaxReq * (21 - AttbuildCurReq) / (1000 * 20))
                                            unsafeWindow.SpremeniStatus('Waiting ' + timeleft + ' seconds to send attack<progress value="' + AttbuildCurReq + '" max="20">' + AttbuildCurReq + '</progress>');
                                            povecajCasinterval = setTimeout(povecajCas, AttbuildMaxReq / 20);


                                            AttBuilderCheckTimeout = setTimeout(function () {
                                                PreveriAttackBuilder(task);
                                            }, preostaliCas - attbuildsafety);


                                            AttBuilderTimeout = setTimeout(function () {
                                                PosljiAttackBuilder(task);
                                            }, preostaliCas);
                                        }
                                    }

                                }
                            }
                            else {
                                AttackBuilder(task);
                            }
                            return;
                            setTimeout(function () {
                                GM.xmlHttpRequest({
                                    method: 'POST',
                                    url: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?id=39&tt=2",
                                    data: data,
                                    headers: {
                                        "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                        "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
                                    },
                                    onload: function (responseDetails) {
                                    },
                                    onerror: function (responseDetails) {
                                    }
                                });

                            }, 2000);
                        },
                        onerror: function (responseDetails) {

                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        },
                        ontimeout: function (responseDetails) {

                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        },
                        onabort: function (responseDetails) {

                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        }
                    });

                }, RandomXtoY(1000, 5000));
            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));
}

function PartyT3(task) {
    unsafeWindow.SpremeniStatus("Party<progress value='0' max='100'>0%</progress>");
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: 'GET',
            url: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?gid=" + task.gid + "&newdid=" + task.villageid,
            headers: {
                //"Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                //"Content-Type" : "application/x-www-form-urlencoded; charset=utf-8" ,
            },
            onload: function (responseDetails) {

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;
                unsafeWindow.SpremeniStatus("Party<progress value='50' max='100'>50%</progress>");

                var test124 = PreveriLoginTask(doc,unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?gid=" + task.gid + "&newdid=" + task.villageid);
                if (!test124) {
                    return;
                }

                var tag3331 = doc.evaluate(".//div[@class='tit']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                //testlog(tag3331.snapshotLength);
                if (tag3331.snapshotLength >= task.festival * 1 + 1) {
                    var gumb = tag3331.snapshotItem(task.festival * 1).parentNode.parentNode.getElementsByClassName("act")[0].getElementsByTagName("a");
                    var tester = true;
                    if (gumb.length > 0) {

                        if (tester) {
                            var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + gumb[0].getAttribute("href");
                            setTimeout(function () {
                                GM.xmlHttpRequest({
                                    method: 'GET',
                                    url: link,
                                    headers: {
                                        //"Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                        //"Content-Type" : "application/x-www-form-urlencoded; charset=utf-8" ,
                                    },
                                    onload: function (responseDetails) {

                                        var doc = document.implementation.createHTMLDocument('My title');
                                        var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                        doc.documentElement.appendChild(body);
                                        doc.body.innerHTML = responseDetails.responseText;


                                        var test124 = PreveriLoginTask(doc,link);
                                        if (!test124) {
                                            return;
                                        }
                                        unsafeWindow.SpremeniStatus("Party<progress value='100' max='100'>100%</progress>");
                                        var uspesno = doc.getElementsByClassName("under_progress");
                                        var casZdaj = new Date();
                                        casZdaj = casZdaj.getTime();
                                        if (uspesno.length > 0) {
                                            //uspesno

                                            var timer = unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).repeat * 60000;
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                                        }
                                        else {//neuspesno
                                            var timer = RandomXtoY(1800000, 3600000);
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                                        }
                                    },
                                    onerror: function (responseDetails) {

                                        setTimeout(function () {

                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    },
                                    ontimeout: function (responseDetails) {

                                        setTimeout(function () {

                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    },
                                    onabort: function (responseDetails) {

                                        setTimeout(function () {

                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    }
                                });

                            }, RandomXtoY(1000, 5000));
                        }
                        else {
                            var casZdaj = new Date();
                            casZdaj = casZdaj.getTime();
                            var timer = RandomXtoY(1800000, 3600000);
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                        }
                    }
                    else {
                        var casZdaj = new Date();
                        casZdaj = casZdaj.getTime();
                        var timer = RandomXtoY(1800000, 3600000);
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                    }
                }
            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));
}

function PartyT4(task) {
    unsafeWindow.SpremeniStatus("Party<progress value='0' max='100'>0%</progress>");
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: 'GET',
            url: unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/build.php?gid=" + task.gid + "&newdid=" + task.villageid,
            headers: {
                //"Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                //"Content-Type" : "application/x-www-form-urlencoded; charset=utf-8" ,
            },
            onload: function (responseDetails) {

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;


                var test124 = PreveriLoginTask(doc, unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?gid=" + task.gid + "&newdid=" + task.villageid);
                if (!test124) {
                    return;
                }
                unsafeWindow.SpremeniStatus("Party<progress value='50' max='100'>50%</progress>");
                var tag3331 = doc.evaluate(".//div[@class='research']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (tag3331.snapshotLength >= task.festival * 1 + 1) {
                    var gumb = tag3331.snapshotItem(task.festival * 1).getElementsByTagName("button");
                    var tester = true;
                    if (gumb.length > 0) {

                        try {
                            if (gumb[0].value == "npc") {
                                tester = false;
                            }
                        }
                        catch (err) {
                            tester = false;
                        }
                        if (tester) {
                            var link = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/" + gumb[0].getAttribute("onclick").split("'")[1];
                            setTimeout(function () {
                                GM.xmlHttpRequest({
                                    method: 'GET',
                                    url: link,
                                    headers: {
                                        //"Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                        //"Content-Type" : "application/x-www-form-urlencoded; charset=utf-8" ,
                                    },
                                    onload: function (responseDetails) {

                                        var doc = document.implementation.createHTMLDocument('My title');
                                        var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                        doc.documentElement.appendChild(body);
                                        doc.body.innerHTML = responseDetails.responseText;


                                        var test124 = PreveriLoginTask(doc,link);
                                        if (!test124) {
                                            return;
                                        }
                                        unsafeWindow.SpremeniStatus("Party<progress value='100' max='100'>100%</progress>");
                                        var uspesno = doc.getElementsByClassName("under_progress");
                                        var casZdaj = new Date();
                                        casZdaj = casZdaj.getTime();
                                        if (uspesno.length > 0) {
                                            //uspesno
                                    
                                            var timer = unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).repeat * 60000;
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                                        }
                                        else {//neuspesno
                                            var timer = RandomXtoY(1800000, 3600000);
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                                        }
                                    },
                                    onerror: function (responseDetails) {
                                
                                        setTimeout(function () {
                                    
                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    },
                                    ontimeout: function (responseDetails) {
                                
                                        setTimeout(function () {
                                    
                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    },
                                    onabort: function (responseDetails) {
                                
                                        setTimeout(function () {
                                    
                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    }
                                });

                            }, RandomXtoY(1000, 5000));
                        }
                        else {
                            var casZdaj = new Date();
                            casZdaj = casZdaj.getTime();
                            var timer = RandomXtoY(1800000, 3600000);
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                        }
                    }
                    else {
                        var casZdaj = new Date();
                        casZdaj = casZdaj.getTime();
                        var timer = RandomXtoY(1800000, 3600000);
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                    }
                }
            },
            onerror: function (responseDetails) {
        
                setTimeout(function () {
            
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {
        
                setTimeout(function () {
            
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {
        
                setTimeout(function () {
            
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));
}

function ArmorUpgradeT4(task) {
    unsafeWindow.SpremeniStatus("Upgrading armor");
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: 'GET',
            url: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?gid=" + task.gid + "&newdid=" + task.villageid,
            headers: {
                //"Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                //"Content-Type" : "application/x-www-form-urlencoded; charset=utf-8" ,
            },
            onload: function (responseDetails) {


                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;


                var test124 = PreveriLoginTask(doc,unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?gid=" + task.gid + "&newdid=" + task.villageid);
                if (!test124) {
                    return;
                }

                var tag3331 = doc.evaluate(".//div[@class='research']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (tag3331.snapshotLength) {
                    for (var i = 0; i < tag3331.snapshotLength; i++) {
                        var enota = tag3331.snapshotItem(i).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                        if (enota == task.unit) {
                            var gumb = tag3331.snapshotItem(i).getElementsByTagName("button");
                            var stopnja = tag3331.snapshotItem(i).getElementsByClassName("level")[0].innerHTML;
                            var stopnja2 = stopnja.match(/[\d\.]+/g);
                            stopnja = 0;
                            for (var k = 0; k < stopnja2.length & k < 2; k++) {
                                stopnja += stopnja2[k] * 1;
                            }
                            if (stopnja >= task.level * 1) {
                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                                if (!unsafeWindow.Stopped) {
                                    setTimeout(unsafeWindow.Start, 300);
                                }
                                return;
                            }

                            var tester = true;
                            var gumb = tag3331.snapshotItem(i).getElementsByTagName("button");
                            try {
                                if (gumb[0].value == "npc") {
                                    tester = false;
                                }
                            }
                            catch (err) {
                                tester = false;
                            }
                            if (tester) {
                                try {
                                    var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + gumb[0].getAttribute("onclick").split("'")[1];
                                }
                                catch (err) {
                                    NastaviNovCasArmorUpgrade(task, doc);
                                    return;
                                }
                                setTimeout(function () {
                                    GM.xmlHttpRequest({
                                        method: 'GET',
                                        url: link,
                                        headers: {
                                            //"Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                            //"Content-Type" : "application/x-www-form-urlencoded; charset=utf-8" ,
                                        },
                                        onload: function (responseDetails) {



                                            var doc = document.implementation.createHTMLDocument('My title');
                                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                            doc.documentElement.appendChild(body);
                                            doc.body.innerHTML = responseDetails.responseText;

                                            var test124 = PreveriLoginTask(doc,link);
                                            if (!test124) {
                                                return;
                                            }

                                            var tag3331 = doc.evaluate(".//div[@class='research']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                                            if (tag3331.snapshotLength) {
                                                for (var i = 0; i < tag3331.snapshotLength; i++) {
                                                    var enota = tag3331.snapshotItem(i).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                                                    if (enota == task.unit) {
                                                        var stopnja = tag3331.snapshotItem(i).getElementsByClassName("level")[0].innerHTML;
                                                        var stopnja2 = stopnja.match(/[\d\.]+/g);
                                                        stopnja = 0;
                                                        for (var k = 0; k < stopnja2.length & k < 2; k++) {
                                                            stopnja += stopnja2[k] * 1;
                                                        }
                                                        if (stopnja >= task.level * 1) {
                                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                                                            if (!unsafeWindow.Stopped) {
                                                                setTimeout(unsafeWindow.Start, 300);
                                                            }
                                                            return;
                                                        }
                                                    }
                                                }
                                            }



                                            var timer = RandomXtoY(1800000, 3600000);
                                            try {
                                                var timer = doc.getElementById("timer2").innerHTML;
                                                timer = timer.split(":")[0] * 360000 + timer.split(":")[1] * 60000 + (timer.split(":")[2] * 1 + 10) * 1000;
                                            }
                                            catch (err) {
                                                try {
                                                    var timer = doc.getElementById("timer1").innerHTML;
                                                    timer = timer.split(":")[0] * 3600000 + timer.split(":")[1] * 60000 + (timer.split(":")[2] * 1 + 10) * 1000;
                                                }
                                                catch (err) {

                                                }
                                            }
                                            var casZdaj = new Date();
                                            casZdaj = casZdaj.getTime();
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
                                            if (!unsafeWindow.Stopped) {
                                                setTimeout(unsafeWindow.Start, 300);
                                            }

                                        },
                                        onerror: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        ontimeout: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        onabort: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        }
                                    });

                                }, RandomXtoY(1000, 5000));
                            }
                            else {
                                NastaviNovCasArmorUpgrade(task,doc);
                            }
                        }
                    }
                }
            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));
}


function NastaviNovCasArmorUpgrade(task,doc) {
    var timer = RandomXtoY(1800000, 3600000);
    try {
        var timer = doc.getElementById("timer2").innerHTML;
        timer = timer.split(":")[0] * 3600000 + timer.split(":")[1] * 60000 + (timer.split(":")[2] * 1 + 10) * 1000;
    }
    catch (err) {
        try {
            var timer = doc.getElementById("timer1").innerHTML;
            timer = timer.split(":")[0] * 3600000 + timer.split(":")[1] * 60000 + (timer.split(":")[2] * 1 + 10) * 1000;
        }
        catch (err) {

        }
    }
    var casZdaj = new Date();
    casZdaj = casZdaj.getTime();
    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PridobiTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.type, unsafeWindow)).time = casZdaj + timer;
    if (!unsafeWindow.Stopped) {
        setTimeout(unsafeWindow.Start, 300);
    }
}

function Demolish(task) {
    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }
    unsafeWindow.SpremeniStatus("Demolishing <progress value='0' max='100'>0%</progress>");
    var cas = new Date();
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: 'GET',
            url: unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/build.php?gid=15&newdid=" + task.villageid,
            headers: {
                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
            },
            onload: function (responseDetails) {


                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/build.php?gid=15&newdid=" + task.villageid);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }
                unsafeWindow.SpremeniStatus("Demolishing <progress value='50' max='100'>50%</progress>");
                var Options = doc.evaluate(".//option[@value='" + task.building + "']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (Options.snapshotLength) {
                    var opcija = Options.snapshotItem(0);
                    var tekst = opcija.innerHTML.split(task.building + ".").join("");
                    var stopnja = 0;
                    try {
                        stopnja = tekst.match(/[\d\.]+/g)[0] * 1;
                    }
                    catch (err) {

                    }

                    if (stopnja > task.level) {//unici
                        var c = doc.getElementsByName("c")[0].getAttribute("value");
                        var a = doc.getElementsByName("a")[0].getAttribute("value");
                        var dd = "";
                        var demolishdodatek = doc.evaluate(".//input[@type='hidden'][contains(@name, 'demolish')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        if (demolishdodatek.snapshotLength) {
                            dd = "&"+demolishdodatek.snapshotItem(0).getAttribute("name") + "=" + demolishdodatek.snapshotItem(0).getAttribute("value")
                        }
                        console.log(dd)
                        setTimeout(function () {
                            GM.xmlHttpRequest({
                                method: 'POST',
                                url: unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/build.php",
                                data: "gid=15&a=" + a + "&c=" + c +dd+ "&abriss=" + task.building,
                                headers: {
                                    "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                    "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
                                },
                                onload: function (responseDetails) {

                                    var doc = document.implementation.createHTMLDocument('My title');
                                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                    doc.documentElement.appendChild(body);
                                    doc.body.innerHTML = responseDetails.responseText;


                                    var test124 = PreveriLoginTask(doc,unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/build.php");
                                    if (!test124) {
                                        return;
                                    }
                                    console.log("na 100%")
                                    unsafeWindow.SpremeniStatus("Demolishing <progress value='100' max='100'>100%</progress>");
                                    //try {
                                    if (stopnja > 1) {
                                        var demolistable = doc.getElementById("demolish")
                                        var timer=[0,30,0]
                                        if (demolistable)
                                        {
                                            console.log("demolistable found")
                                            var timerelement = demolistable.getElementsByClassName("timer")
                                            if (timerelement.length)
                                            {
                                                console.log("timer found")
                                                timer = timerelement[0].innerHTML.split(":");
                                            }
                                        }
                                        //var timer = doc.getElementById("timer1").innerHTML.split(":");
                                        var novcas = cas.getTime() + 10000 + timer[0] * 3600000 + timer[1] * 60000 + timer[2] * 1000;
                                        unsafeWindow.PLAYER.SetDemolishTime(cloneInto(task.villageid, unsafeWindow), novcas);
                                    }
                                    else {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task, unsafeWindow));
                                        //unsafeWindow.PLAYER.removeDemolishTask(cloneInto(task.tasknumber, unsafeWindow), cloneInto(task.villageid, unsafeWindow));
                                    }
                                    unsafeWindow.SpremeniStatus("Succesfuly demolished <progress value='0' max='100'>0%</progress>");
                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Succesfuly demolished", "Demolish", cloneInto(task.villageid, unsafeWindow)));
                                    //}
                                    //catch (err) {
                                    //    console.log("error pri timer")
                                    //}

                                    if (!unsafeWindow.Stopped) {
                                        setTimeout(unsafeWindow.Start, 300);
                                    }
                                },
                                onerror: function (responseDetails) {
                                    
                                    setTimeout(function () {
                                        
                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                ontimeout: function (responseDetails) {
                                    
                                    setTimeout(function () {
                                        
                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                onabort: function (responseDetails) {
                                    
                                    setTimeout(function () {
                                        
                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                }
                            });

                        }, RandomXtoY(1000, 5000));

                    }
                    else {
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                        unsafeWindow.SpremeniStatus("Building already demolished to wanted level");
                        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Building already demolished a wanted level", "Demolish", cloneInto(task.villageid, unsafeWindow)));
                        if (!unsafeWindow.Stopped) {
                            setTimeout(unsafeWindow.Start, 300);
                        }
                        //izbrisi task
                    }
                }
                else {
                    unsafeWindow.SpremeniStatus("Building already demolishing");
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Building already demolishing", "Demolish", cloneInto(task.villageid, unsafeWindow)));
                    var demolistable = doc.getElementById("demolish")
                    var timer = [0, 30, 0]
                    if (demolistable) {
                        console.log("demolistable found")
                        var timerelement = demolistable.getElementsByClassName("timer")
                        if (timerelement.length) {
                            console.log("timer found")
                            timer = timerelement[0].innerHTML.split(":");
                        }
                    }
                    var novcas = cas.getTime() + 10000 + timer[0] * 3600000 + timer[1] * 60000 + timer[2] * 1000;
                    unsafeWindow.PLAYER.SetDemolishTime(cloneInto(task.villageid, unsafeWindow), cloneInto(novcas, unsafeWindow));
                    if (!unsafeWindow.Stopped) {
                        setTimeout(unsafeWindow.Start, 300);
                    }
                }

            },
            onerror: function (responseDetails) {
                
                setTimeout(function () {
                    
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {
                
                setTimeout(function () {
                    
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {
                
                setTimeout(function () {
                    
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));

}

function NadgradiT3(task) {
    unsafeWindow.SpremeniStatus("Building " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="0" max="100">0%</progress>');
    var newdid = "&newdid=" + task.villageid;
    if (unsafeWindow.PLAYER.villages.length <= 1) {
        newdid = "";
    }

    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }

    setTimeout(function () {
        var requestlink = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/build.php?id=" + task.id + newdid;


        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            headers: {
            },
            onload: function (responseDetails) {
                if (unsafeWindow.Stopped) {
                    unsafeWindow.SpremeniStatus("Stopped");
                    return;
                }
                unsafeWindow.SpremeniStatus("Building sucessful" + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="50" max="100">50%</progress>');


                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;


                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }



                var ImeTeZgradbe = doc.getElementById("build").getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                var TestNekaj = true;
                if (ImeTeZgradbe != 0) {
                    TestNekaj = false;
                }
                var TabelaNoveStavbe = doc.evaluate(".//table[@class='new_building']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                var NovaStavba = false;
                var ElementPovezave;
                if (TabelaNoveStavbe.snapshotLength && TestNekaj) {//zgradi novo stavbo  
                    ElementPovezave = doc.evaluate(".//a[contains(@href, 'a=" + task.building + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    NovaStavba = true;
                }
                else {//nadgradi obstojeco stavbo
                    ElementPovezave = doc.evaluate(".//a[@class='build']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                }

                if (ElementPovezave.snapshotLength) {
                    var ElementPovezave1 = ElementPovezave.snapshotItem(0);
                    var link = ElementPovezave1.getAttribute("href");
                    if (NovaStavba == false) {
                        var StopnjaGradnje = ElementPovezave1.innerHTML.match(/[\d\.]+/g)[0] * 1;
                    }
                    else {
                        var StopnjaGradnje = 1;
                    }
                    if (StopnjaGradnje <= task.level * 1) {
                        var requestlink = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/" + link;
                    


                        setTimeout(function () {
                            GM.xmlHttpRequest({
                                method: 'GET',
                                url: requestlink,
                                headers: {
                                },
                                onload: function (responseDetails) {
                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.buildingsucessful + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje, "Build", cloneInto(task.villageid, unsafeWindow)));
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.buildingsucessful + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje + '<progress value="100" max="100">100%</progress>');


                                    if (task.tasknumber != undefined && StopnjaGradnje == task.level * 1) {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                                    }

                                    if (unsafeWindow.Stopped) {
                                        unsafeWindow.SpremeniStatus("Stopped");
                                        return;
                                    }
                                    if (task.building * 1 < 5) {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                                    }
                                    else {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                                    }
                                },
                                onerror: function (responseDetails) {
                            
                                    setTimeout(function () {
                                
                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                ontimeout: function (responseDetails) {
                            
                                    setTimeout(function () {
                                
                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                onabort: function (responseDetails) {
                            
                                    setTimeout(function () {
                                
                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                }
                            });

                        }, RandomXtoY(1000, 5000))


                    }
                    else {
                        unsafeWindow.SpremeniStatus("Building is already at wanted level:" + +" " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje + '<progress value="100" max="100">100%</progress>');
                        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.buildingatwantedlevel + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje, "Build", cloneInto(task.villageid, unsafeWindow)));
                        if (task.tasknumber != undefined) {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                        }
                        if (unsafeWindow.Stopped) {
                            unsafeWindow.SpremeniStatus("Stopped");
                            return;
                        }

                        if (task.building * 1 < 5) {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                        }
                        else {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                        }
                        //stavba je ze nadgrajena do te stopnje
                    }
                }
                else {


                    if (unsafeWindow.Stopped) {
                        unsafeWindow.SpremeniStatus("Stopped");
                        return;
                    }
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Unable to build" + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level, "Build", cloneInto(task.villageid, unsafeWindow)));
                    unsafeWindow.SpremeniStatus("Unable to build" + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="100" max="100">100%</progress>')

                    if (task.building * 1 < 5) {
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                    }
                    else {
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                    }
                }



            },
            onerror: function (responseDetails) {
        
                setTimeout(function () {
            
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {
        
                setTimeout(function () {
            
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {
        
                setTimeout(function () {
            
                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));


}

function NadgradiT4old(task) {
    console.log("building")
    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.building + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="0" max="100">0%</progress>');
    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }

    setTimeout(function () {
        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?id=" + task.id + "&newdid=" + task.villageid;
        if (task.id * 1 > 18) {
            if (task.building * 1 == 13 || task.building * 1 == 14 || task.building * 1 == 19 || task.building * 1 == 20 || task.building * 1 == 21 || task.building * 1 == 22 || task.building * 1 == 29 || task.building * 1 == 30 || task.building * 1 == 36 || task.building * 1 == 37) {
                requestlink += "&category=2";
            }
            else if (task.building * 1 == 5 || task.building * 1 == 6 || task.building * 1 == 7 || task.building * 1 == 8 || task.building * 1 == 9) {
                requestlink += "&category=3";
            }
            else if (task.building * 1 == 17)//trznica
            {
                requestlink += "&t=0";
            }
            else if (task.building * 1 == 25 || task.building * 1 == 26)//palaca,rezidenca
            {
                requestlink += "&s=0";
            }
            else if (task.building * 1 == 16)//zbiralisce
            {
                requestlink += "&tt=0";
            }
        }
        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            headers: {},
            onload: function (responseDetails) {


                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }
                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.building + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="50" max="100">50%</progress>');


                var ImeTeZgradbe = doc.getElementById("build").getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                var TestNekaj = true;
                if (ImeTeZgradbe != 0) {
                    TestNekaj = false;
                }
                var TabelaNoveStavbe = doc.evaluate(".//div[@class='build_desc']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                var NovaStavba = false;
                var ElementPovezave;
                if (TabelaNoveStavbe.snapshotLength && TestNekaj) {//zgradi novo stavbo  
                    ElementPovezave = doc.evaluate(".//button[contains(@onclick, 'a=" + task.building + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    NovaStavba = true;
                }
                else {//nadgradi obstojeco stavbo
                    ElementPovezave = doc.evaluate(".//button[@class='build']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (TravianServer == 4.2) {
                        ElementPovezave = doc.evaluate(".//button[@class='green build']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    }
                }

                if (ElementPovezave.snapshotLength) {
                    var ElementPovezave1 = ElementPovezave.snapshotItem(0);
                    var link = ElementPovezave1.getAttribute("href");
                    if (NovaStavba == false) {
                        var StopnjaGradnje = ElementPovezave1.innerHTML.match(/[\d\.]+/g)[0] * 1;
                    }
                    else {
                        var StopnjaGradnje = 1;
                    }
                    if (StopnjaGradnje <= task.level * 1) {
                        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + ElementPovezave1.getAttribute("onclick").split("'")[1];



                        setTimeout(function () {
                            GM.xmlHttpRequest({
                                method: 'GET',
                                url: requestlink,
                                headers: {},
                                onload: function (responseDetails) {


                                    var doc = document.implementation.createHTMLDocument('My title');
                                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                    doc.documentElement.appendChild(body);
                                    doc.body.innerHTML = responseDetails.responseText;

                                    var test124 = PreveriLoginTask(doc,requestlink);
                                    if (unsafeWindow.Stopped || !test124) {
                                        return;
                                    }

                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.buildingsucessful + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje, "Build", cloneInto(task.villageid, unsafeWindow)));
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.buildingsucessful + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje + '<progress value="100" max="100">100%</progress>');


                                    if (task.tasknumber != undefined && StopnjaGradnje == task.level * 1) {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task, unsafeWindow));
                                    }

                                    if (unsafeWindow.Stopped) {
                                        unsafeWindow.SpremeniStatus("Stopped");
                                        return;
                                    }
                                    if (task.building * 1 < 5) {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                                    }
                                    else {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                                    }

                                },
                                onerror: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                ontimeout: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                onabort: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                }
                            });

                        }, RandomXtoY(1000, 5000))


                    }
                    else {
                        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.buildingatwantedlevel + +" " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje + '<progress value="100" max="100">100%</progress>');
                        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.buildingatwantedlevel + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje, "Build", cloneInto(task.villageid, unsafeWindow)));
                        if (task.tasknumber != undefined) {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task, unsafeWindow));
                        }
                        if (unsafeWindow.Stopped) {
                            unsafeWindow.SpremeniStatus("Stopped");
                            return;
                        }
                        if (task.building * 1 < 5) {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                        }
                        else {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                        }
                        //stavba je ze nadgrajena do te stopnje
                    }
                }
                else {


                    if (unsafeWindow.Stopped) {
                        unsafeWindow.SpremeniStatus("Stopped");
                        return;
                    }
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.unabletobuild + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level, "Build", cloneInto(task.villageid, unsafeWindow)));
                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.unabletobuild + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="100" max="100">100%</progress>')
                    if (task.building * 1 < 5) {
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                    }
                    else {
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                    }
                }



            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));


}

//var parser = new DOMParser();
//var doc = parser.parseFromString(responseDetails.responseText, "text/html");


function addLog(type,village,message,player,state,updatestatus)
{
    console.log(message)
    
    if (updatestatus != false)
    {
        unsafeWindow.SpremeniStatus(message)
    }
    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(message, type, village))
}

function log(message, type) {
    console.log(message)
}

function setTimeoutStart(mintime, maxtime, PLAYER)
{
    setTimeout(function () {

        if (unsafeWindow.Stopped == false) {
            unsafeWindow.StartEvent();
        }
    }, RandomXtoY(mintime, maxtime));
}


function getNrOfPreviousSiblings(element1) {
    var minprevel = 0;
    c = element1;
    while (c && minprevel < 1000) {
        c = c.previousElementSibling;
        minprevel++;
    }
    return minprevel
}

function analizirajTrgovce99(doc, tabelastrgovci, PLAYER, naselje1, maxmerhants)
{
    var previossiblings = 0;
    var prihajajocitrgovcinaslov = null;
    var odhajajocitrgovcinaslov = null;
    if (tabelastrgovci) {
        var naslovi = tabelastrgovci.getElementsByTagName("h4")
        var ex11 = ".//tr[@class='res']";
        var Tabele = doc.evaluate(ex11, tabelastrgovci, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        //console.log(naslovi)
        var nadaljuj = true
        if (naslovi.length == 2) {
            var naslov1 = naslovi[0].innerHTML.trim()
            var naslov2 = naslovi[1].innerHTML.trim()
            PLAYER.incomingmerchants = naslov1;
            PLAYER.outgoingmerchants = naslov2;
            console.log(naslov1)
            console.log(naslov2)
            prihajajocitrgovcinaslov = naslovi[0]
            odhajajocitrgovcinaslov = naslovi[1]
            previossiblings = getNrOfPreviousSiblings(odhajajocitrgovcinaslov)
            console.log(previossiblings)
        }
        else if (naslovi.length == 1) {
            if (PLAYER.incomingmerchants != "" && naslovi[0].innerHTML.split(PLAYER.incomingmerchants).length > 1) {
                prihajajocitrgovcinaslov = naslovi[0]
            }
            else if (PLAYER.outgoingmerchants != "" && naslovi[0].innerHTML.split(PLAYER.outgoingmerchants).length > 1) {
                odhajajocitrgovcinaslov = naslovi[0]
            }
            else {
                console.log("no saved own merchants")
                naselje1.PONUDBETRGOVCI = 0;
                //var ana = AnalizirajTrznicoXX(doc, naselje1.villageid);
                //nadaljuj = false

                var TrgovciNosijo = naselje1.TRGOVCI[0][1]
                var skupnotrgovcevvtrznici = 0;
                for (var gfsd = 0; gfsd < Tabele.snapshotLength; gfsd++) {
                    var Tabele1 = Tabele.snapshotItem(gfsd);
                    var poljezsur = Tabele1.getElementsByTagName("span")[0]
                    var Celatabela = Tabele1.parentNode.parentNode;
                    var naslovnacelica = Celatabela.getElementsByTagName("thead")[0].getElementsByClassName("dorf")[0]
                    var Tatimer = Celatabela.getElementsByClassName("timer")[0].innerHTML.split(":")
                    var PrihodCezSekund = Tatimer[0] * 3600 + Tatimer[1] * 60 + Tatimer[2] * 1;
                    var idnaseljavkateregaposiljam = naslovnacelica.getElementsByTagName("a")[0].getAttribute("href").split("d=")[1].match(/[\d\.]+/g)[0] * 1
                    var classpoljezsur = poljezsur.getAttribute("class")
                    var surovine = [
                        poljezsur.innerHTML.split('class="r1"')[1].split(">")[1].split(">")[0].match(/[\d\.]+/g)[0] * 1,
                        poljezsur.innerHTML.split('class="r2"')[1].split(">")[1].split(">")[0].match(/[\d\.]+/g)[0] * 1,
                        poljezsur.innerHTML.split('class="r3"')[1].split(">")[1].split(">")[0].match(/[\d\.]+/g)[0] * 1,
                        poljezsur.innerHTML.split('class="r4"')[1].split(">")[1].match(/[\d\.]+/g)[0] * 1
                    ]
                    var SteviloPoslanihTrgovcev = Math.ceil((surovine[0] + surovine[1] + surovine[2] + surovine[3]) / Math.max(TrgovciNosijo, 1));
                    skupnotrgovcevvtrznici += SteviloPoslanihTrgovcev
                }
                var maxmerhants = naselje1.TRGOVCI[0][2];
                var availablemerchants = naselje1.TRGOVCI[0][0];
                console.log("skupnotrgovcevvtrznici " + skupnotrgovcevvtrznici)
                console.log("maxmerhants " + maxmerhants)
                console.log("availablemerchants " + availablemerchants)
                if (skupnotrgovcevvtrznici + availablemerchants > maxmerhants) {
                    prihajajocitrgovcinaslov = naslovi[0]
                }
                else {
                    odhajajocitrgovcinaslov = naslovi[0]
                }
                //nadaljuj = false
            }


        }
        else {
            console.log("ni trgovcev na poti.")
            nadaljuj = false
        }
        console.log(naselje1.TRGOVCI)
        if (nadaljuj) {
            console.log("Nadaljujem")

            var VracanjaTrgovcev = [naselje1.TRGOVCI[0]];
            var TrgovciNosijo = naselje1.TRGOVCI[0][1]
            var PrihajajoceSurovine = [];
            for (var gfsd = 0; gfsd < Tabele.snapshotLength; gfsd++) {
                var Tabele1 = Tabele.snapshotItem(gfsd);
                var poljezsur = Tabele1.getElementsByTagName("span")[0]
                var Celatabela = Tabele1.parentNode.parentNode;
                var naslovnacelica = Celatabela.getElementsByTagName("thead")[0].getElementsByClassName("dorf")[0]
                var predelementov = getNrOfPreviousSiblings(Celatabela)
                console.log(predelementov)
                var lastninapoti = false
                var prihajajocituji = false
                console.log(prihajajocitrgovcinaslov)
                if (predelementov < previossiblings) {
                    console.log("tuji1")
                    prihajajocituji = true
                }
                else if (odhajajocitrgovcinaslov) {
                    console.log("lastni")
                    lastninapoti = true
                }
                else {
                    prihajajocituji = true
                    console.log("tuji2")
                }

                var Tatimer = Celatabela.getElementsByClassName("timer")[0].innerHTML.split(":")
                var PrihodCezSekund = Tatimer[0] * 3600 + Tatimer[1] * 60 + Tatimer[2] * 1;
                var idnaseljavkateregaposiljam = naslovnacelica.getElementsByTagName("a")[0].getAttribute("href").split("d=")[1].match(/[\d\.]+/g)[0] * 1
                var classpoljezsur = poljezsur.getAttribute("class")
                log(classpoljezsur, 5)
                var surovine = [
                    poljezsur.innerHTML.split('class="r1"')[1].split(">")[1].split(">")[0].match(/[\d\.]+/g)[0] * 1,
                    poljezsur.innerHTML.split('class="r2"')[1].split(">")[1].split(">")[0].match(/[\d\.]+/g)[0] * 1,
                    poljezsur.innerHTML.split('class="r3"')[1].split(">")[1].split(">")[0].match(/[\d\.]+/g)[0] * 1,
                    poljezsur.innerHTML.split('class="r4"')[1].split(">")[1].match(/[\d\.]+/g)[0] * 1
                ]
                var SteviloPoslanihTrgovcev = Math.ceil((surovine[0] + surovine[1] + surovine[2] + surovine[3]) / Math.max(TrgovciNosijo, 1));
                log(surovine, 5)
                log(idnaseljavkateregaposiljam, 5)
                var SekundePotovanja = 1
                if (lastninapoti && classpoljezsur != "none") {
                    log("transportto", 5)

                    Pleme = PLAYER.tribe * 1;
                    var HitrostTrgovcev = 1;

                    if (Pleme == 0) {
                        HitrostTrgovcev = 16;
                    }
                    else if (Pleme == 1) {
                        HitrostTrgovcev = 12;
                    }
                    else if (Pleme == 2) {
                        HitrostTrgovcev = 24;
                    }
                    else if (Pleme == 5) {
                        HitrostTrgovcev = 16;
                    }
                    else if (Pleme == 6) {
                        HitrostTrgovcev = 20;
                    }
                    var XVasPosiljanja = getXfromCoord(idnaseljavkateregaposiljam * 1);
                    var YVasPosiljanja = getYfromCoord(idnaseljavkateregaposiljam * 1);

                    var RazdaljaVmes = PridobiRazdaljo(naselje1.x * 1, naselje1.y * 1, XVasPosiljanja * 1, YVasPosiljanja * 1);
                    var SekundePotovanja = Math.ceil(RazdaljaVmes * 3600 / (PLAYER.speed * HitrostTrgovcev)) + 5;
                    var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;

                    var CasVracanja = new Date();
                    CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);

                    var vracamke =
                    {
                        trgovci: SteviloPoslanihTrgovcev,
                        time: CasVracanja.getTime()
                    }
                    VracanjaTrgovcev.push(vracamke)
                }
                else if (prihajajocituji) {
                    log("transportfrom", 5)
                    var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;

                    var CasVracanja = new Date();
                    CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);


                    var vracamke =
                    {
                        wood: surovine[0],
                        clay: surovine[1],
                        iron: surovine[2],
                        grain: surovine[3],
                        time: CasVracanja.getTime()
                    }
                    PrihajajoceSurovine.push(vracamke);

                }
                else if (lastninapoti && classpoljezsur == "none") {
                    log("returnfrom", 5)
                    var CasVracanja = new Date();
                    var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;
                    CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);

                    var vracamke =
                    {
                        trgovci: SteviloPoslanihTrgovcev,
                        time: CasVracanja.getTime()
                    }
                    VracanjaTrgovcev.push(vracamke);
                }
                else {
                    console.log("nic od nastetega")
                }
            }
            naselje1.TRGOVCI = cloneInto(VracanjaTrgovcev, unsafeWindow);
            naselje1.SUROVINEPRIHAJAJOCE = cloneInto(PrihajajoceSurovine, unsafeWindow);
            log(naselje1.TRGOVCI, 5)
            log(naselje1.SUROVINEPRIHAJAJOCE, 5)
        }


    }
}

var analizirajNaselje = function (doc, url, originalDocText) {
    log("start analysing1", 5);
    //log(unsafeWindow.PLAYER, 5)
    if (!url) {
        url = doc.location.href
    }
    
    log(url, 5)
    var server2 = url.split("/")[2];
    log(server2, 5)
    log(url.split("/"), 5)
    var saveplayer = false;
    if (!originalDocText) {
        try {
            originalDocText = doc.body.innerHTML;
        }
        catch (err) {
            log("doc.body is undefined", 2)
            originalDocText = "";
        }
    }
    
    var timeNow = new Date();
    if (server2.indexOf("travian") == -1) {
        log("url not travian page", 2);
        return;
    }
    //log("tester3", 5)
    var ActiveVillage = doc.evaluate(".//a[contains(@href, 'newdid') and @class='active']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    if (ActiveVillage.snapshotLength > 0) {
        var villageid = ActiveVillage.snapshotItem(0).getAttribute("href").split("newdid=")[1].match(/[\d\.]+/g)[0] * 1;
    }
    else {
        log("cant find active village", 2)
        return false;
    }
    //log("tester2", 5)
    var slikaheroj = doc.evaluate(".//img[contains(@src, 'uid=') and @class='heroImage']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    if (slikaheroj.snapshotLength > 0) {
        var uid = slikaheroj.snapshotItem(0).getAttribute("src").split("uid=")[1].match(/[\d\.]+/g)[0] * 1;
    }
    else {
        log("cant find hero picture", 2)
        return false;
    }
    //log("tester1", 5)
    //log([server2, uid], 5)
    var PLAYER = unsafeWindow.PLAYER;//getPlayerFromServerUid(server2, uid);
    //log("player:", 5);
    //log(PLAYER, 5);
    
    /*if (!PLAYER) {
        PLAYER = createEmptyPlayer(uid, server2);
        saveplayer = true;
        definePlayerMethods(PLAYER);
        addPlayer(PLAYER);
    }*/
    var deviation = 0;//PLAYER.intervaldeviation;
    var playerName = doc.getElementsByClassName("playerName")[0].getElementsByTagName("a")[0].innerHTML;
    PLAYER.name = playerName;
    PLAYER.server2 = server2;
    var tribe = -1;
    var ex = ".//img[contains(@class, 'g3')]";
    var tribeev = doc.evaluate(ex, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    if (tribeev.snapshotLength) {
        try {

            var tribenumber = tribeev.snapshotItem(0).getAttribute("class").match(/[\d\.]+/g)[0] * 1;
            switch (tribenumber) {
                case 31:
                    tribe = 0;
                    break;
                case 32:
                    tribe = 1;
                    break;
                case 33:
                    tribe = 2;
                    break;
            }
        }
        catch (err) {
        }
    }
    //log("tribe:", 5);
    //log(tribe, 5);
    if (tribe != -1) {
        PLAYER.tribe = tribe;
    }

    var ImenaVasi = [];
    var IdjiNaselijT4 = [];
    var allNewdids = [];
    var naseljjj = doc.getElementById("sidebarBoxVillagelist");
    var allvillages = doc.evaluate("//a[contains(@href, 'newdid=')]", naseljjj, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    for (var i = 0; i < allvillages.snapshotLength; i++) {
        try {
            var villid = allvillages.snapshotItem(i).getAttribute("href").split("newdid=")[1].match(/[\d\.]+/g)[0] * 1;
            var coorx = allvillages.snapshotItem(i).getElementsByClassName("coordinateX")[0].innerHTML.split("(").join("");
            coorx = convertToNumber(coorx)
            var coory = allvillages.snapshotItem(i).getElementsByClassName("coordinateY")[0].innerHTML.split(")").join("");
            coory = convertToNumber(coory)
            var villagename = allvillages.snapshotItem(i).getElementsByClassName("name")[0].innerHTML;
            var IdTegaNaselja = PLAYER.getCoordfromXY(coorx, coory);
            var naselje = PLAYER.getVillage(villid);
            if (!naselje) {
                /*log("adding village", 5)
                naselje = createEmptyVillage(villid);
                log(naselje, 5)
                log(PLAYER.villages.length, 5)
                PLAYER.villages[PLAYER.villages.length] = naselje;
                log(PLAYER.villages.length, 5)
                saveplayer = true;

                addLog("Village", villid, "New village detected: " + villagename + "(" + coorx + "|" + coory + "); villageid:" + villid, PLAYER, 1);
                log(allvillages.snapshotItem(i).getAttribute("href"), 1)*/
            }
            naselje.x = coorx;
            naselje.y = coory;
            naselje.villageid = villid;
            naselje.name = villagename;
            naselje.ID = IdTegaNaselja;

            //log("naselje", 5);
            //log(naselje, 5);
            ImenaVasi.push(villagename);
            IdjiNaselijT4.push(IdTegaNaselja);
            allNewdids.push(villid);

        }
        catch (err) {
            log("error: ", 5)
            log(err, 5)
            continue;
        }
    }
    //log("villages:", 5);
    //log(ImenaVasi, 5);
    //log(IdjiNaselijT4, 5);
    //log(allNewdids, 5);
    //log("player:", 5);
    //log(PLAYER, 5);
    var CasZdaj = new Date();
    var lesvvasi = doc.getElementById("l1").innerHTML;
    var glinavvasi = doc.getElementById("l2").innerHTML;
    var zelezovvasi = doc.getElementById("l3").innerHTML;
    var zitovvasi = doc.getElementById("l4").innerHTML;
    var totalcrop = 100;
    var naselje1 = PLAYER.getVillage(villageid);
    //log("naselje1", 5)
    //log(naselje1, 5)
    //log(villageid, 5)
    //log(PLAYER, 5)
    naselje1.PosodobiTrgovce();
    naselje1.warhouse = doc.getElementById("stockBarWarehouse").innerHTML.split(".").join("").split(",").join("") * 1;
    naselje1.granary = doc.getElementById("stockBarGranary").innerHTML.split(".").join("").split(",").join("") * 1;
    naselje1.wood = lesvvasi.split("/")[0].split(".").join("").split(",").join("") * 1;
    naselje1.clay = glinavvasi.split("/")[0].split(".").join("").split(",").join("") * 1;
    naselje1.iron = zelezovvasi.split("/")[0].split(".").join("").split(",").join("") * 1;
    naselje1.grain = zitovvasi.split("/")[0].split(".").join("").split(",").join("") * 1;
    naselje1.time = CasZdaj.getTime();
    try { totalcrop = doc.getElementById("stockBarFreeCrop").innerHTML.split(".").join("") * 1; }
    catch (err) { }
    naselje1.grainTotal = totalcrop;
    console.log("proizvodnja")
    console.log("proizvodnja")
    console.log("proizvodnja")
    console.log("proizvodnja")
    console.log("proizvodnja")
    console.log("proizvodnja")
    console.log("proizvodnja")
    try {
        var zacetek = originalDocText.indexOf("resources.production = {");
        zacetek = originalDocText.indexOf("{", zacetek);
        var konec = originalDocText.indexOf("}", zacetek)+1;
        console.log(originalDocText.substring(zacetek, konec))
        var proizvodnja = JSON.parse(originalDocText.substring(zacetek, konec));
        console.log(proizvodnja)
        naselje1.woodP = proizvodnja.l1;
        naselje1.clayP = proizvodnja.l2;
        naselje1.ironP = proizvodnja.l3;
        naselje1.grainP = proizvodnja.l4;
        naselje1.grainTotal = proizvodnja.l5;
    }

    catch (err) {
        console.log("error proizvodnja")
    }
    try {
        var zacetek = originalDocText.indexOf("resources.storage = {");
        zacetek = originalDocText.indexOf("{", zacetek);
        var konec = originalDocText.indexOf("}", zacetek) + 1;
        console.log(originalDocText.substring(zacetek, konec))
        var proizvodnja = JSON.parse(originalDocText.substring(zacetek, konec));
        console.log(proizvodnja)
        naselje1.wood = proizvodnja.l1;
        naselje1.clay = proizvodnja.l2;
        naselje1.iron = proizvodnja.l3;
        naselje1.grain = proizvodnja.l4;
        //naselje1.grainTotal = proizvodnja.l5;
    }

    catch (err) {
        console.log("error storage")
    }
    try {
        var zacetek = originalDocText.indexOf("resources.maxStorage = {");
        zacetek = originalDocText.indexOf("{", zacetek);
        var konec = originalDocText.indexOf("}", zacetek) + 1;
        console.log(originalDocText.substring(zacetek, konec))
        var proizvodnja = JSON.parse(originalDocText.substring(zacetek, konec));
        console.log(proizvodnja)
        naselje1.warhouse = proizvodnja.l1;
        naselje1.granary = proizvodnja.l4;
        //naselje1.grainTotal = proizvodnja.l5;
    }

    catch (err) {
        console.log("error maxStorage")
    }
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALURJENJE), Math.round(60000 * (1 + deviation) * naselje1.INTERVALURJENJE));
    naselje1.CASANALIZEURJENJE = novCas;
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALFESTIVAL), Math.round(60000 * (1 + deviation) * naselje1.INTERVALFESTIVAL));
    naselje1.CASANALIZEFESTIVAL = novCas;
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALARMOR), Math.round(60000 * (1 + deviation) * naselje1.INTERVALARMOR));
    naselje1.CASANALIZEARMOR = novCas;
    var novCas1 = new Date();
    novCas1 = novCas1.getTime();
    naselje1.CASANALIZE = novCas1;
    //alert(novCas1)

    //analyse hero
    if (url.indexOf("hero.php") > -1) {

        var divHealth = doc.evaluate(".//div[@class='attribute health tooltip']/div[@class='element current powervalue']/span[@class='value']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        if (divHealth.snapshotLength == 0) {
            divHealth = doc.evaluate(".//tr[@class='attribute health tooltip']/td[@class='element current powervalue']/span[@class='value']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        }
        if (divHealth.snapshotLength > 0) {
            var herohealth = divHealth.snapshotItem(0).innerHTML.match(/[\d\.]+/g)[0] * 1;
            log("health:" + herohealth, 5);
            if (herohealth != "NaN") {
                PLAYER.hero.health = herohealth;
                saveplayer = true;
                //addLog("Hero", "", "Heros health: "+PLAYER.hero.health, PLAYER, 1);
            }
            else {
                //addLog("Hero", "", "Heros health is not a number. Hero deactivated.", PLAYER, 2);
            }

        }
        else {
            log("hero hp not found", 5)
            //addLog("Hero", "", "Failed to read hero's health. Hero deactivated.", PLAYER, 2);
        }

        var split1 = originalDocText.split(' class="attribute health tooltip"')
        if (split1.length > 1) {
            var split2 = split1[1].split('#x202d;&amp;#x202d;');
            if (split2.length > 1) {
                var split3 = split2[1].split('&');
                if (split3.length > 1) {
                    PLAYER.hero.health_regen = split3[0].match(/[\d\.]+/g)[0] * 1;
                    log("regen:" + split3[0].match(/[\d\.]+/g)[0], 5);
                    saveplayer = true;
                    //addLog("Hero", "", "Heros health regen: "+PLAYER.hero.health_regen, PLAYER, 1);
                }
                else {
                    //addLog("Hero", "", "Failed to read hero's regeneration. Hero deactivated.", PLAYER, 2);
                }
            }
            else {
                //addLog("Hero", "", "Failed to read hero's regeneration. Hero deactivated.", PLAYER, 2);
            }
        }
        else {
            //addLog("Hero", "", "Failed to read hero's regeneration. Hero deactivated.", PLAYER, 2);
        }

        PLAYER.hero.analyse_time = timeNow.getTime();
        saveplayer = true;
        var split1 = originalDocText.split('new Travian.Game.Hero.Inventory(')
        if (split1.length > 1) {
            var split2 = split1[1].split('text:')
            if (split2.length > 1) {
                var objekttext = split2[0] + "}";
                var objekttext = objekttext.substring(objekttext.indexOf("{"), objekttext.length);
                var objekttext1 = objekttext.split("isInVillage:");
                if (objekttext1.length > 1) {
                    objekttext1 = objekttext1[1].split(",");
                    if (objekttext1.length > 1) {
                        objekttext = '{"isInVillage":' + objekttext1[0] + "}";
                    }
                }
                console.log(objekttext)
                var heroobjekt = JSON.parse(objekttext);

            }
            else {
                //addLog("Hero", "", "Failed to read hero's data. Hero deactivated.", PLAYER, 2);
            }
        }
        else {
            //addLog("Hero", "", "Failed to read hero's data. Hero deactivated.", PLAYER, 2);
        }

        if (heroobjekt.isInVillage) {
        }
        else {
            var divHealth = doc.evaluate(".//div[@class='heroStatusMessage ']/span[contains(@id,'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (divHealth.snapshotLength > 0) {
                var cas = divHealth.snapshotItem(0).innerHTML.split(":");
                PLAYER.hero.time = timeNow.getTime() + cas[0] * 3600000 + cas[1] * 60000 + cas[2] * 1000 + randomXToY(5000, 15000);
                saveplayer = true;
                log("PLAYER.hero.time:" + PLAYER.hero.time, 5)
                log(cas[0] * 3600000, 5)
                log(cas[1] * 60000, 5)
                log(cas[2] * 1000, 5)
            }
            else {
                //addLog("Hero", "", "Hero is not in village.", PLAYER, 2);
            }
        }
    }


    var sendselect = doc.getElementById("send_select");
    //analyse marketplace
    if (sendselect)//marketplace
    {
        console.log("on marketplace");
        console.log("on marketplace");
        console.log("on marketplace");
        console.log("on marketplace");
        console.log("on marketplace");
        if (naselje1.TRGOVCI.length == 0) {
            naselje1.TRGOVCI = cloneInto([[0, 1, 0]], unsafeWindow);
        }
        var nadaljujstaro = true;
        try {
            var zacetek = originalDocText.indexOf("Travian.Game.Marketplace(");
            zacetek = originalDocText.indexOf("{", zacetek);
            var konec = originalDocText.indexOf("}", zacetek) + 1;
            var parsestring = originalDocText.substring(zacetek, konec)
            parsestring = parsestring.split(" ").join("").split("\n").join("").split("	").join("").split("true").join("1").split("false").join("0")
            parsestring=parsestring.replace(/([a-z][^:]*)(?=\s*:)/g, '"$1"')
            console.log(parsestring)
            var trgovci1 = JSON.parse(parsestring);
            console.log(trgovci1)
            if ('merchantsAvailable' in trgovci1 && 'capacityPerMerchant' in trgovci1 && 'merchantsMax' in trgovci1)
            {
                console.log("vsi podatki o trgovcih")
                naselje1.TRGOVCI[0][0] = trgovci1.merchantsAvailable * 1;
                naselje1.TRGOVCI[0][1] = trgovci1.capacityPerMerchant * 1;
                naselje1.TRGOVCI[0][2] = trgovci1.merchantsMax * 1;
                nadaljujstaro = false;
                console.log(naselje1.TRGOVCI[0])
            }
            
        }

        catch (err) {
            console.log("error trgovci1")
            
        }

        if (nadaljujstaro)
        {
            var merchantsdiv = doc.evaluate(".//div[@class='boxes boxesColor gray traderCount']/div[@class='boxes-contents cf']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            console.log("merchantsdiv.snapshotLength:" + merchantsdiv.snapshotLength)
            if (merchantsdiv.snapshotLength > 0) {
                console.log(merchantsdiv.snapshotItem(0).innerHTML)
                var trgovci = merchantsdiv.snapshotItem(0).innerHTML.match(/[\d\.]+/g);
                log("Nr. of merchants: " + trgovci, 5);
                console.log(naselje1)
                console.log(trgovci[0])

                naselje1.TRGOVCI[0][0] = trgovci[0] * 1;
                naselje1.TRGOVCI[0][2] = trgovci[1] * 1;
                console.log(naselje1.TRGOVCI[0][0])
                console.log(trgovci[0] * 1)
                var maxmerhants = trgovci[1] * 1;
                var availablemerchants = trgovci[0] * 1;
                console.log(naselje1.TRGOVCI)
                console.log(naselje1.TRGOVCI[0])
                console.log(naselje1.TRGOVCI[0][0])
                //naselje1.TRGOVCI[0][1]=trgovci[1]*1;
                //naselje1
            }
            else {
                log("unable to find number of merchants.", 5);
                var maxmerhants = 0;
                naselje1.TRGOVCI[0][0] = 0;
            }

            /*
            var merchantsdiv = document.evaluate(".//div[@class='carry']/b", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            console.log("merchantsdiv.snapshotLength:" + merchantsdiv.snapshotLength)
            */
            var merchantsdiv = doc.evaluate(".//div[@class='carry']//b", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            console.log("merchantsdiv.snapshotLength:" + merchantsdiv.snapshotLength)
            if (merchantsdiv.snapshotLength > 0) {
                var trgovci = merchantsdiv.snapshotItem(0).innerHTML.match(/[\d\.]+/g);
                log("Merchants carry: " + trgovci, 5);
                naselje1.TRGOVCI[0][1] = trgovci[0] * 1;
                console.log(naselje1.TRGOVCI)
                //naselje1.TRGOVCI[0][1]=trgovci[1]*1;
                //naselje1
            }
            else {
                log("unable to find number of merchants.", 5);
                naselje1.TRGOVCI[0][0] = 0;

            }

        }
        
        console.log(naselje1.TRGOVCI)
        var tabelastrgovci = doc.getElementById("merchantsOnTheWayFormular")

        
        //console.log(tabelastrgovci.innerHTML)
        if (tabelastrgovci) {
            analizirajTrgovce99(doc,tabelastrgovci, PLAYER, naselje1)
        }
        console.log(naselje1.TRGOVCI)
        console.log("konec analize")
        //var fgdsags = nekajkajneobstaja[0][0]


        var novCas = new Date();
        novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALTRZNICA), Math.round(60000 * (1 + deviation) * naselje1.INTERVALTRZNICA));
        naselje1.CASANALIZETRZNICA = novCas;

    }

    //analyse dorf1
    console.log("dorf1_1")
    if (url.indexOf("dorf") > -1) {
        console.log("dorf1_2")
        if (url.indexOf("dorf1") > -1) {
            console.log("dorf1_3")
            var divPolja = doc.evaluate(".//map[@id='rx']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (divPolja.snapshotLength) {
                console.log("dorf1_4")
                divPolja = divPolja.snapshotItem(0);

                /*
                1: 3-3-3-9
                2: 3-4-5-6
                3: 4-4-4-6
                4: 4-5-3-6
                5: 5-3-4-6
                6: 1-1-1-15
                7: 4-4-3-7
                8: 3-4-4-7
                9: 4-3-4-7
                10: 3-5-4-6
                11: 4-3-5-6
                12: 5-4-3-6

                TipiPokarajin
                */
                var vsebina = doc.getElementById("village_map");
                var TipPokrajine = vsebina.getAttribute("class");
                var StevilkaPokrajine = TipPokrajine.match(/[\d\.]+/g)[0] * 1;

                var SlikePolj = divPolja.getElementsByTagName("area");
                var Polja = [[0, 0, 0]];
                var ShranjujemPolja = "";
                var PoljaZaShranjevanje = CasZdaj.getDate() + ":" + CasZdaj.getMonth() + ":" + CasZdaj.getFullYear() + ":" + CasZdaj.getHours() + ":" + CasZdaj.getMinutes() + ":" + CasZdaj.getSeconds();

                for (var i = 0; i < SlikePolj.length - 1; i++) {
                    var IdPolja = i + 1; //TipSlike.substring(zacetek,konec)*1;
                    var TipPolja = SlikePolj[i].getAttribute("alt");
                    var ImePolja = TipiPokarajin[StevilkaPokrajine][IdPolja];

                    var StopnjaPolja = TipPolja.match(/[\d\.]+/g)[0] * 1;
                    Polja.push([IdPolja, ImePolja, StopnjaPolja]);
                    try {
                        TipPolja = TipPolja.split(" ");
                        TipPolja.splice(TipPolja.length - 2, 2);
                        TipPolja = TipPolja.join(" ");
                    }
                    catch (err) {
                    }
                    if (ShranjujemPolja == "") {
                        ShranjujemPolja = TipPolja;
                    }
                    else {
                        ShranjujemPolja += "|" + TipPolja;
                    }
                    var underconstruction = false;
                    try {
                        if (vsebina.childNodes[i * 2 + 1].getAttribute("class").indexOf("underConstruction") > -1) {
                            underconstruction = true;
                        }
                    }
                    catch (err) {
                    }
                    var polje = {
                        id: IdPolja * 1,
                        name: ImePolja * 1,
                        level: StopnjaPolja * 1,
                        underconstruction: underconstruction
                    }


                    //PoljaZaShranjevanje+="|"+IdPolja+","+ImePolja+","+StopnjaPolja;
                    naselje1.POLJA[IdPolja] = cloneInto(polje, unsafeWindow);


                }
                //return
                unsafeWindow.IMENAPOLJ = ShranjujemPolja;
                PLAYER.IMENAPOLJ = ShranjujemPolja;


                divPolja = null;
                Polja = null;
                TipPokrajine = null;
                var novCas = new Date();
                novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALGRADNJA), Math.round(60000 * (1 + deviation) * naselje1.INTERVALGRADNJA));
                naselje1.CASANALIZEGRADNJA1 = novCas;
                //console.log("CASANALIZEGRADNJA1:" + novCas)
            }
            else {
                log("Error analysing fields. Please contact administrator with this error on forum", 1);
            }
        }

        //analyse dorf2
        if (url.indexOf("dorf2") > -1) {
            var sttt = 0;
            while (naselje1.POLJA[19] && sttt < 30) {
                naselje1.POLJA.splice(19, 1);
                sttt++;
            }

            var CasZdaj = new Date();
            var divZPolji = doc.getElementById("village_map");

            var SlikePolj = divZPolji.getElementsByTagName("img");
            var Polja = [[0, 0, 0]];
            var PoljaZaShranjevanje = CasZdaj.getDay() + ":" + CasZdaj.getMonth() + ":" + CasZdaj.getFullYear() + ":" + CasZdaj.getHours() + ":" + CasZdaj.getMinutes() + ":" + CasZdaj.getSeconds();
            var area = doc.getElementsByTagName("area");
            for (var i = 0; i < SlikePolj.length - 2; i++) {
                var TipSlike = SlikePolj[i].getAttribute("class");
                var TipSlike2 = SlikePolj[i].getAttribute("alt");
                var doddd = 0;
                try {//building d1 g23
                    TipSlike = TipSlike.split("building").join("");
                    var mesto1999 = TipSlike.lastIndexOf('g');
                    if (mesto1999 == -1) {
                        ImePolja = 0;
                    }
                    else {
                        mesto1999 += 1;
                        var ImePolja = TipSlike.substring(mesto1999);
                        ImePolja = ImePolja.match(/[\d\.]+/g)[0] * 1;
                        if (isNaN(ImePolja - 0)) {
                            ImePolja = 0;
                        }
                    }
                }
                catch (Error) {
                    var ImePolja = 0;
                }

                var IdPolja = i + 19;
                if (IdPolja > 40) {
                    break;
                }
                try {
                    var TipSlike2tmp = TipSlike2.split("level")
                    TipSlike2tmp[0]=""
                    var StopnjaPolja = TipSlike2tmp.join("").match(/[\d\.]+/g)[0] * 1;
                }
                catch (Error) {
                    var StopnjaPolja = 0;
                }
                if (StopnjaPolja + "" == "undefined" || StopnjaPolja == undefined || StopnjaPolja + "" == "NaN" || StopnjaPolja == NaN) {
                    StopnjaPolja = 0;
                }
                Polja[IdPolja] = [IdPolja, ImePolja, StopnjaPolja];

                var underconstruction = false;
                try {
                    var diviStopenj = doc.getElementById("levels").childNodes
                    for (var qqq = 0; qqq < diviStopenj.length; qqq++) {
                        if (diviStopenj[qqq].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == IdPolja * 1 && diviStopenj[qqq].getAttribute("class").indexOf("underConstruction") > -1) {
                            underconstruction = true;
                            var polje2 = {
                                id: IdPolja * 1,
                                name: ImePolja * 1,
                                level: StopnjaPolja * 1,
                                underconstruction: underconstruction
                            }

                        }
                    }
                }
                catch (err) {

                }
                try {

                    var IdPolja = area[i + doddd].getAttribute("href").split("id=")[1].match(/[\d\.]+/g)[0];

                }
                catch (err) {
                    continue;
                }
                var polje = {
                    id: IdPolja * 1,
                    name: ImePolja * 1,
                    level: StopnjaPolja * 1,
                    underconstruction: underconstruction
                }

                naselje1.POLJA[IdPolja] = cloneInto(polje, unsafeWindow);
            }

            for (var i = 1; i <= 40; i++) {

                if (!naselje1.POLJA[i]) {
                    var polje2 = {
                        id: i,
                        name: 0,
                        level: 0,
                        underconstruction: false
                    }
                    naselje1.POLJA[i] = cloneInto(polje2, unsafeWindow);
                }
            }
            var novCas = new Date();
            novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALGRADNJA), Math.round(60000 * (1 + deviation) * naselje1.INTERVALGRADNJA));
            naselje1.CASANALIZEGRADNJA2 = novCas;
        }



        var CasKoncanja1 = [0, 0];

        var SpanTimer = doc.evaluate(".//span[contains(@id, 'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        if (SpanTimer.snapshotLength == 0) {
            SpanTimer = doc.evaluate(".//span[contains(@class, 'timer')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        }
        var StavbeKiSeGradijo = [];
        var Stavba1 = [0, 0];
        var Stavba2 = [0, 0];
        log("SpanTimer.snapshotLength:" + SpanTimer.snapshotLength, 5);
        if (SpanTimer.snapshotLength == 0) {
            var DatumKoncanja1 = new Date();
            var DatumKoncanja2 = new Date();
            var Koncan1 = "0,0" + ":" + DatumKoncanja1.getDate() + ":" + DatumKoncanja1.getMonth() + ":" + DatumKoncanja1.getFullYear() + ":" + DatumKoncanja1.getHours() + ":" + DatumKoncanja1.getMinutes() + ":" + DatumKoncanja1.getSeconds();
            var Koncan2 = "0,0" + ":" + DatumKoncanja2.getDate() + ":" + DatumKoncanja2.getMonth() + ":" + DatumKoncanja2.getFullYear() + ":" + DatumKoncanja2.getHours() + ":" + DatumKoncanja2.getMinutes() + ":" + DatumKoncanja2.getSeconds();
            var DatumKoncanjaGradnje = Koncan1 + "/" + Koncan2;
        }
        else {


            Timerji: for (var TaTimer = 0; TaTimer < SpanTimer.snapshotLength; TaTimer++) {
                try {
                    var StopnjaStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("lvl");

                    if (StopnjaStavbe.length == 0) {
                        continue Timerji;
                    }
                    try {
                        SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].removeChild(SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].getElementsByTagName("span")[0]);
                    }
                    catch (err) {
                    }
                    var ImeStavbe = SpanTimer.snapshotItem(TaTimer).parentNode.parentNode.getElementsByClassName("name")[0].innerHTML.split(" <span")[0];

                    while (ImeStavbe.charCodeAt(0) == 32 || ImeStavbe.charCodeAt(0) == 10 || ImeStavbe.charCodeAt(0) == 9) {
                        ImeStavbe = ImeStavbe.substring(1);
                    }
                    while (ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 32 || ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 10 || ImeStavbe.charCodeAt(ImeStavbe.length - 1) == 9) {
                        ImeStavbe = ImeStavbe.substring(0, ImeStavbe.length - 2);
                    }
                    console.log("IMENAPOLJ")
                    console.log(unsafeWindow.IMENAPOLJ)
                    var Pirmerjalnik = "(" + unsafeWindow.IMENAPOLJ + ")";

                    var test = ImeStavbe.toLowerCase().match(Pirmerjalnik.toLowerCase());

                    if (test != null) {
                        var TipStavbe = 1;
                    }
                    else {
                        var TipStavbe = 5;
                    }
                    log("TipStavbe:" + TipStavbe, 5);



                    var casKoncanja = SpanTimer.snapshotItem(TaTimer).innerHTML;
                    var UraKoncanja = casKoncanja.split(":")[0];
                    var MinutaKoncanja = casKoncanja.split(":")[1];
                    var SekundaKoncanja = casKoncanja.split(":")[2];
                    var CasKoncanja = UraKoncanja * 3600 + MinutaKoncanja * 60 + SekundaKoncanja * 1;
                }
                catch (err) {
                    log("error: ", 5)
                    log(err, 5)
                    var TipStavbe = 0;
                }
                if (TipStavbe == 0) {
                }
                else if (TipStavbe <= 4 && CasKoncanja > CasKoncanja1[0]) {
                    CasKoncanja1[0] = CasKoncanja;
                    Stavba1 = [TipStavbe, StopnjaStavbe];
                }
                else if (TipStavbe > 4 && CasKoncanja > CasKoncanja1[1]) {
                    CasKoncanja1[1] = CasKoncanja;
                    Stavba2 = [TipStavbe, StopnjaStavbe];
                }

            }

            var DatumKoncanja1 = new Date();
            DatumKoncanja1.setSeconds(DatumKoncanja1.getSeconds() + CasKoncanja1[0]);
            var DatumKoncanja2 = new Date();
            DatumKoncanja2.setSeconds(DatumKoncanja2.getSeconds() + CasKoncanja1[1]);

        }
        naselje1.BuildingTime = DatumKoncanja2.getTime();
        naselje1.FieldTime = DatumKoncanja1.getTime();

    }



    /*
    this.INTERVALGRADNJA = 60;
    this.INTERVALTRZNICA = 30;
    this.INTERVALURJENJE = 60;
    this.INTERVALFESTIVAL = 180;
    this.INTERVALARMOR = 60;
    this.CASANALIZEGRADNJA1 = 0;
    this.CASANALIZEGRADNJA2 = 0;
    this.CASANALIZETRZNICA = 0;
    this.CASANALIZEURJENJE = 0;
    this.CASANALIZEFESTIVAL = 0;
    this.CASANALIZEARMOR = 0;

    */
    AnalizirajEnoteDoma(doc, villageid)
    log(PLAYER, 5)
    if (saveplayer) {
        log("saving player", 5)
        savePlayer(PLAYER);
        updateStartPanel()
        updateAllPanels();
    }
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALURJENJE), Math.round(60000 * (1 + deviation) * naselje1.INTERVALURJENJE));
    naselje1.CASANALIZEURJENJE = novCas;
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALFESTIVAL), Math.round(60000 * (1 + deviation) * naselje1.INTERVALFESTIVAL));
    naselje1.CASANALIZEFESTIVAL = novCas;
    var novCas = new Date();
    novCas = novCas.getTime() + RandomXtoY(Math.round(60000 * (1 - deviation) * naselje1.INTERVALARMOR), Math.round(60000 * (1 + deviation) * naselje1.INTERVALARMOR));
    naselje1.CASANALIZEARMOR = novCas;

    return true;
}

function convertToNumber(numberstring) {
    var newnumber = "";
    for (var i = 0; i < numberstring.length; i++) {
        if (numberstring[i] * 1 + "" != "NaN" || numberstring[i] == "-") {
            newnumber += numberstring[i];
        }
    }
    return newnumber * 1;
}


function build(task) {
    var PLAYER = unsafeWindow.PLAYER
    var village = PLAYER.getVillage(task.villageid);
    var buildinglevel = 1;
    var location = task.id;
    var buildingid = task.building;
    var level = task.level;
    var d12 = (location <= 18) ? "dorf1.php" : "dorf2.php";
    var requestnr = 0;
    var maxrequestnr = 10;
    log(task)
    
    if (unsafeWindow.Stopped) {
        addLog("Build", village.villageid, "Bot was stopped. Build not completed.", PLAYER, 2);
        return
    }
    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.building + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="0" max="100">0%</progress>');
    var swichVillage = function (doc, villageid) {
        log("swichVillage", 5);
        if (unsafeWindow.Stopped) {
            addLog("Build", village.villageid, "Bot was stopped. Build not completed.", PLAYER, 2);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Build", village.villageid, "Max number of requests reached while trying to build. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        log(doc, 5);
        log(villageid, 5);
        var sidebarBoxVillagelist = doc.getElementById("sidebarBoxVillagelist")
        if (!sidebarBoxVillagelist)
        {
            log("cant find sidebarBoxVillagelist", 5);
            addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Can not find active village (village list).", PLAYER, 2);
            setTimeoutStart(150000, 300000, PLAYER);
            return false;
        }
        var ActiveVillage = doc.evaluate(".//a[contains(@href, 'newdid=" + villageid + "')]", sidebarBoxVillagelist, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        //log(doc.getElementsByTagName("a"), 5);
        if (ActiveVillage.snapshotLength > 0) {
            setTimeout(function () {
                request(funkcijaPoOdprtjuDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + d12 + "?newdid=" + villageid + "&", "")
            }, randomXToY(500, 1500))
            return
            var villagehref = ActiveVillage.snapshotItem(0).getAttribute("href");
            if (villagehref == "newdid=" + villageid + "&") {
                setTimeout(function () {
                    request(funkcijaPoOdprtjuDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + d12 + ActiveVillage.snapshotItem(0).getAttribute("href"), "")
                }, randomXToY(500, 1500))
            }
            else {

                setTimeout(function () {
                    request(funkcijaPonovnoOdpriDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + d12 + ActiveVillage.snapshotItem(0).getAttribute("href"), "")
                }, randomXToY(500, 1500))
            }
        }
        else {
            log("cant find active village swichVillage", 5);
            addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Can not find active village.", PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);
            return false;
        }
    }



    var funkcijaPoGradnji = function (response, json, status, statusText, headers, doc, url) {
        if (unsafeWindow.Stopped) {
            addLog("Build", village.villageid, "Bot was stopped. Build not completed.", PLAYER, 2);
            return
        }
        if (response.status != 200) {
            addLog("Build", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Build", village.villageid, "Max number of requests reached while trying to build. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        if (!preverjenLogin) {
            return
            if (d12 == "dorf2.php") {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPonovnoOdpriDorf12)
            }
            else {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPoOdprtjuDorf12)
            }
            return;
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village.villageid) {
            swichVillage(doc, village.villageid);
            return;
        }
        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.building + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="100" max="100">100%</progress>');
        addLog("Build", village.villageid, prevodi.buldings[task.building] + " was built to level " + buildinglevel, PLAYER, 1);
        setTimeoutStart(1500, 3000, PLAYER);
    }

    var funkcijaKlikniGumbNadgradi = function (response, json, status, statusText, headers, doc, url) {
        console.log("funkcija funkcijaKlikniGumbNadgradi")
        if (unsafeWindow.Stopped) {
            addLog("Build", village.villageid, "Bot was stopped. Build not completed.", PLAYER, 2);
            return
        }
        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.building + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="67" max="100">75%</progress>');
        if (response.status != 200) {
            addLog("Build", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Build", village.villageid, "Max number of requests reached while trying to build. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        if (!preverjenLogin) {
            return
            if (d12 == "dorf2.php") {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPonovnoOdpriDorf12)
            }
            else {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPoOdprtjuDorf12)
            }
            return;
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village.villageid) {
            swichVillage(doc, village.villageid);
            return;
        }
        var TabelaNoveStavbe = doc.evaluate(".//div[@class='gid0' and @id='build']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        var NovaStavba = false;
        var ElementPovezave;

        if (TabelaNoveStavbe.snapshotLength) {//zgradi novo stavbo  
            log("build new building", 5)
            var tabgumb = doc.evaluate(".//div[@class='container infrastructure active' or @class='container military active' or @class='container resources active']/div[@class='content']/a[@class='tabItem']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (tabgumb.snapshotLength) {
                log("gradim", 5)
                var targetcategory = 1
                if (task.building * 1 == 13 || task.building * 1 == 14 || task.building * 1 == 19 || task.building * 1 == 20 || task.building * 1 == 21 || task.building * 1 == 22 || task.building * 1 == 29 || task.building * 1 == 30 || task.building * 1 == 36 || task.building * 1 == 37) {
                    targetcategory = 2;
                }
                else if (task.building * 1 == 5 || task.building * 1 == 6 || task.building * 1 == 7 || task.building * 1 == 8 || task.building * 1 == 9) {
                    targetcategory = 3;
                }
                var categ = tabgumb.snapshotItem(0).getAttribute("href").split("category=")[1].match(/[\d\.]+/g)[0] * 1;
                log(categ + "!=" + targetcategory, 5)
                if (categ != targetcategory) {
                    var tabgumb2 = doc.evaluate(".//div[@class='container infrastructure normal' or @class='container military normal' or @class='container resources normal']/div[@class='content']/a[@class='tabItem' and contains(@href, 'category=" + targetcategory + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (tabgumb2.snapshotLength) {
                        setTimeout(function () {
                            request(funkcijaKlikniGumbNadgradi, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + tabgumb2.snapshotItem(0).getAttribute("href"), "")
                        }, randomXToY(500, 1500))
                    }
                    else {
                        log("no result4", 5)
                        setTimeoutStart(15000, 30000, PLAYER);
                        addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Building site - unable to switch to proper category tab.", PLAYER, 2);
                    }
                    return;
                }
            }
            else if (task.id == 39 || task.id == 40) {
            }
            else {

                log("no result3", 5)
                addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Building site -unable to recognise active category tab.", PLAYER, 2);
                setTimeoutStart(15000, 30000, PLAYER);
                return;
            }


            var buildgumb = doc.evaluate(".//button[contains(@onclick, 'window.location.href') and contains(@onclick, '" + d12 + "') and contains(@onclick, 'a=" + buildingid + "') and not(contains(@onclick, 'b='))]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (buildgumb.snapshotLength) {
                setTimeout(function () {
                    request(funkcijaPoGradnji, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + buildgumb.snapshotItem(0).getAttribute("onclick").split("'")[1], "")
                }, randomXToY(500, 1500))
            }
            else {
                addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Building site - unable to find link to build new building.", PLAYER, 2);
                log("no result2", 5)
                setTimeoutStart(1500, 3000, PLAYER);
                return;
            }
        }
        else {//nadgradi obstojeco stavbo
            log("upgrade building ", 5)
            var tabgumb = doc.evaluate(".//div[@class='container active']/div/a[@class='tabItem' and contains(@href, 't=')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

            if (tabgumb.snapshotLength)//if there is a tab to swich (marketplace, rally point...), switch it
            {
                var tabid = tabgumb.snapshotItem(0).getAttribute("href").split("t=")[1].match(/[\d\.]+/g)[0] * 1;
                if (tabid != 0) {
                    var tabgumb2 = doc.evaluate(".//div[@class='container normal']/div/a[@class='tabItem' and contains(@href, 't=0')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (tabgumb2.snapshotLength) {
                        setTimeout(function () {
                            request(funkcijaKlikniGumbNadgradi, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + tabgumb2.snapshotItem(0).getAttribute("href"), "")
                        }, randomXToY(500, 1500))
                    }
                    else {
                        log("no result5", 5)
                        setTimeoutStart(1500, 3000, PLAYER);
                    }
                    return;
                }
            }



            var buildgumb = doc.evaluate(".//button[contains(@onclick, 'window.location.href') and contains(@onclick, '" + d12 + "') and contains(@onclick, 'a=" + location + "') and not(contains(@onclick, 'b='))]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (buildgumb.snapshotLength) {
                //log(buildgumb.snapshotItem(0))
                var stopnja = buildgumb.snapshotItem(0).getElementsByClassName("button-content")[0].innerHTML.match(/[\d\.]+/g)[0] * 1;
                buildinglevel = stopnja;
                log(stopnja, 5)
                log(level, 5)
                if (stopnja <= level) {
                    setTimeout(function () {
                        request(funkcijaPoGradnji, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + buildgumb.snapshotItem(0).getAttribute("onclick").split("'")[1], "")
                    }, randomXToY(500, 1500))
                }
                else {
                    addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Building is already level " + buildinglevel, PLAYER, 2);
                    log("ze na zeljeni stopnji", 5)
                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task, unsafeWindow));
                    //IzbrisiTask(task, "building", village);
                    setTimeoutStart(15000, 30000, PLAYER);
                    return;
                }


            }
            else {

                log("no result2", 5);
                addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Unable to find link to upgrade building.", PLAYER, 2);
                setTimeoutStart(15000, 30000, PLAYER);
                return;
            }
        }
    }


    var funkcijaPoOdprtjuDorf12 = function (response, json, status, statusText, headers, doc, url) {
        console.log("po odprtju dorf12")
        if (unsafeWindow.Stopped) {
            addLog("Build", village.villageid, "Bot was stopped. Build not completed.", PLAYER, 2);
            return
        }
        if (response.status != 200) {
            addLog("Build", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }
        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.building + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="33" max="100">33%</progress>');
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Build", village.villageid, "Max number of requests reached while trying to build. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        if (!preverjenLogin) {
            return
            if (d12 == "dorf2.php") {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPonovnoOdpriDorf12)
            }
            else {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPoOdprtjuDorf12)
            }
            return;
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village.villageid) {
            swichVillage(doc, village.villageid);
            return;
        }
        var areagumb = doc.evaluate(".//area[contains(@href, 'build.php?') and contains(@href, 'id=" + location + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        console.log(".//area[contains(@href, 'build.php?') and contains(@href, 'id=" + location + "')]")
        if (areagumb.snapshotLength) {
            setTimeout(function () {
                request(funkcijaKlikniGumbNadgradi, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + areagumb.snapshotItem(0).getAttribute("href"), "")
            }, randomXToY(500, 1500))
        }
        else {
            log("no result1", 5);
            console.log(task)
            //console.log(Stavbe[task.building])
            addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Unable to find building link on " + d12 + " page.", PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);
        }
    };

    var funkcijaPonovnoOdpriDorf12 = function (response, json, status, statusText, headers, doc, url) {
        if (unsafeWindow.Stopped) {
            addLog("Build", village.villageid, "Bot was stopped. Build not completed.", PLAYER, 2);
            return
        }
        if (response.status != 200) {
            addLog("Build", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Build", village.villageid, "Max number of requests reached while trying to build. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        var preverjenLogin = PreveriLoginTask(doc, url);
        if (!preverjenLogin) {
            return
            if (d12 == "dorf2.php") {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPonovnoOdpriDorf12)
            }
            else {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPoOdprtjuDorf12)
            }
            return;
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village.villageid) {
            swichVillage(doc, village.villageid);
            return;
        }
        var areagumb = doc.evaluate(".//a[@href='" + d12 + "']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        if (areagumb.snapshotLength) {
            setTimeout(function () {
                request(funkcijaPoOdprtjuDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + d12, "")
            }, randomXToY(500, 1500))

        }
        else {
            //console.log("Failed to build " + Stavbe[task.building][0][0] + " to level " + buildinglevel + "; Unable to find link to redirect to " + d12 + " page.")
            addLog("Build", village.villageid, "Failed to build " + prevodi.buldings[task.building] + " to level " + buildinglevel + "; Unable to find link to redirect to " + d12 + " page.", PLAYER, 2);
            //log("no result1", 5)
            setTimeoutStart(15000, 30000, PLAYER);
        }

    };

    setTimeout(function () {
        console.log("before request")
        request(funkcijaPoOdprtjuDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + d12, "")
    }, randomXToY(500, 1500))


}

function pridobiActiveVillage(doc) {
    var ActiveVillage = doc.evaluate(".//a[contains(@href, 'newdid=') and @class='active']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
    if (ActiveVillage.snapshotLength > 0) {
        log(ActiveVillage.snapshotItem(0), 5)
        var villageid = ActiveVillage.snapshotItem(0).getAttribute("href").split("newdid=")[1].match(/[\d\.]+/g)[0] * 1;
        return villageid;
    }
    else {
        log("cant find active village", 2)
        return false;
    }
}

function request(callbackfunction, type, url, data, data2,headers1) {
    console.log("start request")
    if (type == "GET") {
        console.log("sending get request to:" + url)
        /*Request({
            url: url,
            responseType: "document",
            onComplete: function (response, json, status, statusText, headers) {
                var parser = Cc["@mozilla.org/xmlextras/domparser;1"].createInstance(Ci.nsIDOMParser);
                var doc = parser.parseFromString(response.text, "text/html");
                analizirajNaselje(doc, url, response.text)
                callbackfunction(response, json, status, statusText, headers, doc);
                doc = null;
            }
        }).get();*/

        setTimeout(function () {
            GM.xmlHttpRequest({
                method: 'GET',
                url: url,
                headers: {},
                onload: function (responseDetails) {
                    var parser = new DOMParser();
                    var doc = parser.parseFromString(responseDetails.responseText, "text/html");
                    //log(responseDetails)
                    analizirajNaselje(doc, url, responseDetails.responseText)
                    //return
                    callbackfunction(responseDetails, responseDetails.json, responseDetails.status, responseDetails.statusText, responseDetails.responseHeaders, doc, url,data2);
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });
        }, RandomXtoY(500, 2500));


    }
    else if (type == "POST") {
        console.log("sending post to: " + url)
        console.log("data: " + data)
        var headers2 = {
            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"//,
            //Referer: link + "/build.php?id=39&tt=99",
           

        }
        for (var key in headers1) {
            headers2[key] = headers1[key];
        }
        console.log(headers2)
        setTimeout(function () {
            GM.xmlHttpRequest({
                method: 'POST',
                url: url,
                data: data,
                headers: headers2,
                onload: function (responseDetails) {
                    var parser = new DOMParser();
                    var doc = parser.parseFromString(responseDetails.responseText, "text/html");
                    //log(responseDetails)
                    //console.log("request finished")
                    //console.log(responseDetails.responseText)
                    //return
                    analizirajNaselje(doc, url, responseDetails.responseText)
                    //return
                    callbackfunction(responseDetails, responseDetails.json, responseDetails.status, responseDetails.statusText, responseDetails.responseHeaders, doc, url, data2);
                },
                onerror: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                ontimeout: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                },
                onabort: function (responseDetails) {

                    setTimeout(function () {

                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, 60000);
                }
            });
        }, RandomXtoY(500, 2500));

        return
        Request({
            url: url,
            content: data,
            onComplete: function (response, json, status, statusText, headers) {
                var parser = Cc["@mozilla.org/xmlextras/domparser;1"].createInstance(Ci.nsIDOMParser);
                var doc = parser.parseFromString(response.text, "text/html");
                analizirajNaselje(doc, url, response.text)
                callbackfunction(response, json, status, statusText, headers, doc);
                doc = null;
            }
        }).post();
    }
}

function NadgradiT4(task) {
    console.log("building")
    build(task)
    return
    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.building + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="0" max="100">0%</progress>');
    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }

    setTimeout(function () {
        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?id=" + task.id + "&newdid=" + task.villageid;
        if (task.id * 1 > 18) {
            if (task.building * 1 == 13 || task.building * 1 == 14 || task.building * 1 == 19 || task.building * 1 == 20 || task.building * 1 == 21 || task.building * 1 == 22 || task.building * 1 == 29 || task.building * 1 == 30 || task.building * 1 == 36 || task.building * 1 == 37) {
                requestlink += "&category=2";
            }
            else if (task.building * 1 == 5 || task.building * 1 == 6 || task.building * 1 == 7 || task.building * 1 == 8 || task.building * 1 == 9) {
                requestlink += "&category=3";
            }
            else if (task.building * 1 == 17)//trznica
            {
                requestlink += "&t=0";
            }
            else if (task.building * 1 == 25 || task.building * 1 == 26)//palaca,rezidenca
            {
                requestlink += "&s=0";
            }
            else if (task.building * 1 == 16)//zbiralisce
            {
                requestlink += "&tt=0";
            }
        }
        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            headers: {},
            onload: function (responseDetails) {


                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }
                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.building + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="50" max="100">50%</progress>');


                var ImeTeZgradbe = doc.getElementById("build").getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                var TestNekaj = true;
                if (ImeTeZgradbe != 0) {
                    TestNekaj = false;
                }
                var TabelaNoveStavbe = doc.evaluate(".//div[@class='build_desc']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                var NovaStavba = false;
                var ElementPovezave;
                if (TabelaNoveStavbe.snapshotLength && TestNekaj) {//zgradi novo stavbo  
                    ElementPovezave = doc.evaluate(".//button[contains(@onclick, 'a=" + task.building + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    NovaStavba = true;
                }
                else {//nadgradi obstojeco stavbo
                    ElementPovezave = doc.evaluate(".//button[@class='build']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    if (TravianServer == 4.2) {
                        ElementPovezave = doc.evaluate(".//button[@class='green build']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    }
                }

                if (ElementPovezave.snapshotLength) {
                    var ElementPovezave1 = ElementPovezave.snapshotItem(0);
                    var link = ElementPovezave1.getAttribute("href");
                    if (NovaStavba == false) {
                        var StopnjaGradnje = ElementPovezave1.innerHTML.match(/[\d\.]+/g)[0] * 1;
                    }
                    else {
                        var StopnjaGradnje = 1;
                    }
                    if (StopnjaGradnje <= task.level * 1) {
                        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + ElementPovezave1.getAttribute("onclick").split("'")[1];



                        setTimeout(function () {
                            GM.xmlHttpRequest({
                                method: 'GET',
                                url: requestlink,
                                headers: {},
                                onload: function (responseDetails) {


                                    var doc = document.implementation.createHTMLDocument('My title');
                                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                    doc.documentElement.appendChild(body);
                                    doc.body.innerHTML = responseDetails.responseText;

                                    var test124 = PreveriLoginTask(doc,requestlink);
                                    if (unsafeWindow.Stopped || !test124) {
                                        return;
                                    }

                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.buildingsucessful + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje, "Build", cloneInto(task.villageid, unsafeWindow)));
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.buildingsucessful + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje + '<progress value="100" max="100">100%</progress>');


                                    if (task.tasknumber != undefined && StopnjaGradnje == task.level * 1) {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task, unsafeWindow));
                                    }

                                    if (unsafeWindow.Stopped) {
                                        unsafeWindow.SpremeniStatus("Stopped");
                                        return;
                                    }
                                    if (task.building * 1 < 5) {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                                    }
                                    else {
                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                                    }

                                },
                                onerror: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                ontimeout: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                },
                                onabort: function (responseDetails) {

                                    setTimeout(function () {

                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, 60000);
                                }
                            });

                        }, RandomXtoY(1000, 5000))


                    }
                    else {
                        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.buildingatwantedlevel + +" " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje + '<progress value="100" max="100">100%</progress>');
                        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.buildingatwantedlevel + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + StopnjaGradnje, "Build", cloneInto(task.villageid, unsafeWindow)));
                        if (task.tasknumber != undefined) {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task, unsafeWindow));
                        }
                        if (unsafeWindow.Stopped) {
                            unsafeWindow.SpremeniStatus("Stopped");
                            return;
                        }
                        if (task.building * 1 < 5) {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                        }
                        else {
                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                        }
                        //stavba je ze nadgrajena do te stopnje
                    }
                }
                else {


                    if (unsafeWindow.Stopped) {
                        unsafeWindow.SpremeniStatus("Stopped");
                        return;
                    }
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.unabletobuild + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level, "Build", cloneInto(task.villageid, unsafeWindow)));
                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.unabletobuild + " " + prevodi.buldings[task.building] + " " + prevodi.level + " " + task.level + '<progress value="100" max="100">100%</progress>')
                    if (task.building * 1 < 5) {
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                    }
                    else {
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf2InZacni();
                    }
                }



            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));


}

function UriEnoteT3(task) {
    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.trainingtroops + " [" + task.units + "] " + '<progress value="0" max="100">0%</progress>');
    var newdid = "&newdid=" + task.villageid;
    if (unsafeWindow.PLAYER.villages.length <= 1) {
        newdid = "";
    }

    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }
    setTimeout(function () {
        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?";
        if (task.id) {
            requestlink += "&id=" + task.id + newdid;
        }
        else {
            requestlink += "&gid=" + task.gid + newdid;
        }

        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            headers: {},
            onload: function (responseDetails) {
                if (unsafeWindow.Stopped) {
                    unsafeWindow.SpremeniStatus("Stopped");
                    return;
                }
                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.trainingtroops + " [" + task.units + "] " + '<progress value="50" max="100">50%</progress>');

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }

                var LahkoPosljem = true;
                for (var i = 1; i < 12; i++) {
                    var unit = i - 1;
                    try {
                        eval("Maxt" + i + "=" + 'doc.getElementsByName("t"+i)[0].parentNode.parentNode.getElementsByClassName("max")[0].getElementsByTagName("a")[0].getAttribute("onclick").split(".value=")[1].split(";")[0];');
                        if (task.units[unit] * 1 > eval("Maxt" + i) * 1) {
                            LahkoPosljem = false;
                            break;
                        }
                    }
                    catch (Error) {
                        if (task.units[unit] * 1 > 0) {
                            LahkoPosljem = false;
                            break;
                        }
                    }
                }

                if (LahkoPosljem) {

                    var requestlink2 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php";
                    var obrazec = doc.getElementsByName("snd");
                    for (var i = 0; i < obrazec.length; i++) {
                        if (obrazec[i].getAttribute("style") == undefined) {
                            obrazec = obrazec[i];
                            break;
                        }
                        else if (obrazec[i].getAttribute("style").indexOf("display:none") == -1 && obrazec[i].getAttribute("style").indexOf("display: none") == -1) {
                            obrazec = obrazec[i];
                            break;
                        }
                    }

                    var inputi = obrazec.getElementsByTagName("input");
                    var data = "";
                    for (var i = 0; i < inputi.length; i++) {
                        if (data != "") {
                            data += "&";
                        }


                        if (inputi[i].getAttribute("name") == undefined) {
                        }
                        else if (inputi[i].getAttribute("name").indexOf("t") > -1) {
                            var enota = inputi[i].getAttribute("name").match(/[\d\.]+/g)[0] * 1 - 1;
                            data += inputi[i].getAttribute("name") + "=" + task.units[enota];
                        }
                        else {
                            data += inputi[i].getAttribute("name") + "=" + inputi[i].getAttribute("value");
                        }
                    }
                    data += "&s1=ok";

                    setTimeout(function () {
                        GM.xmlHttpRequest({
                            method: 'POST',
                            url: requestlink2,
                            data: data,
                            headers: {
                                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                Referer: requestlink
                            },
                            onload: function (responseDetails) {

                                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.trainingsuccesful + " [" + task.units + "] " + '<progress value="100" max="100">100%</progress>');
                                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.trainingsuccesful + " [" + task.units + "] ", "Train", cloneInto(task.villageid, unsafeWindow)));

                                if (task.tasknumber != undefined && task.option * 1 == 0) {
                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                                }
                                else if (task.tasknumber != undefined && task.option * 1 == 1) {
                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PovecajCasUrjenja(cloneInto(task.tasknumber, unsafeWindow));
                                }

                                if (unsafeWindow.Stopped) {
                                    unsafeWindow.SpremeniStatus("Stopped");
                                    return;
                                }
                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();

                            },
                            onerror: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            ontimeout: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            onabort: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            }
                        });

                    }, RandomXtoY(1000, 5000));
                }
                else {

                    if (unsafeWindow.Stopped) {
                        unsafeWindow.SpremeniStatus("Stopped");
                        return;
                    }
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.notenoughtres + " [" + task.units + "] ", "Train", cloneInto(task.villageid, unsafeWindow)));
                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.notenoughtres + " [" + task.units + "] " + '<progress value="100" max="100">100%</progress>')
                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                }
            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));
}


function UriEnoteT4(task) {

    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.trainingtroops + " [" + task.units + "] " + '<progress value="0" max="100">0%</progress>');

    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }
    setTimeout(function () {
        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?";
        if (task.id) {
            requestlink += "&id=" + task.id + "&newdid=" + task.villageid;
            if (task.units[9] * 1 >= 0)//palaca in rezidenca
            {
                requestlink += "&s=1";
            }
        }
        else {
            requestlink += "&gid=" + task.gid + "&newdid=" + task.villageid;
        }

        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            headers: {},
            onload: function (responseDetails) {
                if (unsafeWindow.Stopped) {
                    unsafeWindow.SpremeniStatus("Stopped");
                    return;
                }
                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.trainingtroops + " [" + task.units + "] " + '<progress value="50" max="100">50%</progress>');

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }

                var LahkoPosljem = true;
                for (var i = 1; i < 12; i++) {
                    var unit = i - 1;
                    try {
                        //eval("Maxt" + i + "=" + 'doc.getElementsByName("t"+i)[0].nextSibling.nextSibling.nextSibling.getAttribute("onclick").split(".value=")[1].split(";")[0];');
                        //console.log(doc.getElementsByName("t"+i))
                        //console.log(doc.getElementsByName("t"+i)[0].parentElement)
                        //console.log(doc.getElementsByName("t"+i)[0].parentElement.getElementsByTagName("a"))
                        var maxt=doc.getElementsByName("t"+i)[0].parentElement.getElementsByTagName("a")
                        console.log(maxt[maxt.length-1])
                        maxt= maxt[maxt.length-1].getAttribute("onclick").split(".val(")[1].split(";")[0];
                        console.log(task.units[unit],">",maxt)
                        if (task.units[unit] * 1 > maxt) {
                            LahkoPosljem = false;
                            break;
                        }
                    }
                    catch (Error) {
                        console.log(Error)
                        var maxt=0;
                        if (task.units[unit] * 1 > maxt) {
                            LahkoPosljem = false;
                            break;
                        }
                    }
                }


                console.log("LahkoPosljem",LahkoPosljem)

                if (LahkoPosljem) {

                    var requestlink2 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php";
                    var obrazec = doc.getElementsByName("snd");
                    for (var i = 0; i < obrazec.length; i++) {
                        if (obrazec[i].getAttribute("style") == undefined) {
                            obrazec = obrazec[i];
                            break;
                        }
                        else if (obrazec[i].getAttribute("style").indexOf("display:none") == -1 && obrazec[i].getAttribute("style").indexOf("display: none") == -1) {
                            obrazec = obrazec[i];
                            break;
                        }
                    }

                    var inputi = obrazec.getElementsByTagName("input");
                    var data = "";
                    for (var i = 0; i < inputi.length; i++) {
                        if (data != "") {
                            data += "&";
                        }


                        if (inputi[i].getAttribute("name") == undefined) {
                        }
                        else if (inputi[i].getAttribute("name").indexOf("t") > -1) {
                            var enota = inputi[i].getAttribute("name").match(/[\d\.]+/g)[0] * 1 - 1;
                            data += inputi[i].getAttribute("name") + "=" + task.units[enota];
                        }
                        else {
                            data += inputi[i].getAttribute("name") + "=" + inputi[i].getAttribute("value");
                        }
                    }
                    data += "&s1=ok";


                    setTimeout(function () {
                        GM.xmlHttpRequest({
                            method: 'POST',
                            url: requestlink2,
                            data: data,
                            headers: {
                                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                Referer: requestlink
                            },
                            onload: function (responseDetails) {


                                var doc = document.implementation.createHTMLDocument('My title');
                                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                doc.documentElement.appendChild(body);
                                doc.body.innerHTML = responseDetails.responseText;

                                var test124 = PreveriLoginTask(doc,requestlink2);
                                if (unsafeWindow.Stopped || !test124) {
                                    return;
                                }

                                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.trainingsuccesful + " [" + task.units + "] " + '<progress value="100" max="100">100%</progress>');
                                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.trainingsuccesful + " [" + task.units + "] ", "Train", cloneInto(task.villageid, unsafeWindow)));

                                if (task.tasknumber != undefined && task.option * 1 == 0) {
                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                                }
                                else if (task.tasknumber != undefined && task.option * 1 == 1) {
                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PovecajCasUrjenja(cloneInto(task.tasknumber, unsafeWindow));
                                }

                                if (unsafeWindow.Stopped) {
                                    unsafeWindow.SpremeniStatus("Stopped");
                                    return;
                                }
                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();

                            },
                            onerror: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            ontimeout: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            onabort: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            }
                        });

                    }, RandomXtoY(1000, 5000))



                }
                else {

                    if (unsafeWindow.Stopped) {
                        unsafeWindow.SpremeniStatus("Stopped");
                        return;
                    }
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.notenoughtres + " [" + task.units + "] ", "Train", cloneInto(task.villageid, unsafeWindow)));
                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.notenoughtres + " [" + task.units + "] " + '<progress value="100" max="100">100%</progress>')
                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajDorf1InZacni();
                }



            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));


}

function PosljiSurovineT3(task) {
    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + ' <progress value="0" max="100">0%</progress>');

    var newdid = "&newdid=" + task.villageid;
    if (unsafeWindow.PLAYER.villages.length <= 1) {
        newdid = "";
    }

    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }

    setTimeout(function () {
        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?&gid=17" + newdid;

        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            headers: {},
            onload: function (responseDetails) {


                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="33" max="100">33%</progress>');


                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }


                if (true) {
                    var IdStrani = doc.evaluate(".//a[contains(@href, 't=1')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    var PageId = IdStrani.snapshotItem(0).getAttribute("href").split("id=")[1];
                    if (PageId.indexOf("&") > -1) {
                        PageId = PageId.split("&")[0];
                        PageId = PageId.split("amp;").join("");
                    }

                    var requestlink2 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php";
                    var data = "r1=" + task.wood + "&r2=" + task.clay + "&r3=" + task.iron + "&r4=" + task.grain + "&dname=&x=" + task.x + "&y=" + task.y + "&id=" + PageId;
                    try {
                        var send3 = doc.getElementsByName("send3")[0];
                        if (send3.getAttribute("name") == "send3") {
                            data += "&send3=1"
                        }
                    }
                    catch (err) {
                    }
                    try {
                        var send3 = doc.getElementsByName("ft")[0];
                        if (send3.getAttribute("name") == "ft") {
                            data += "&ft=check"
                        }
                    }
                    catch (err) { }

                    setTimeout(function () {
                        GM.xmlHttpRequest({
                            method: 'POST',
                            url: requestlink2,
                            data: data,
                            headers: {
                                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                Referer: requestlink
                            },
                            onload: function (responseDetails) {

                                if (unsafeWindow.Stopped) {
                                    unsafeWindow.SpremeniStatus("Stopped");
                                    return;
                                }


                                var doc = document.implementation.createHTMLDocument('My title');
                                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                doc.documentElement.appendChild(body);
                                doc.body.innerHTML = responseDetails.responseText;

                                var Error = doc.evaluate(".//p[contains(@class, 'error')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                                if (Error.snapshotLength) {

                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.unabletosendres + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="100" max="100">100%</progress>');
                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.unabletosendres + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y, "Trade", cloneInto(task.villageid, unsafeWindow)));
                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajTrznicoInZacni();
                                    return;
                                }
                                else {
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="66" max="100">66%</progress>');
                                }



                                var data = "";
                                var Inputi = doc.getElementsByName("snd")[0].getElementsByTagName("input");
                                for (var i = 0; i < Inputi.length; i++) {
                                    if (i > 0) {
                                        data += "&";
                                    }
                                    if (Inputi[i].getAttribute("name") == "x2") {
                                    }
                                    else {
                                        data += Inputi[i].getAttribute("name") + "=" + Inputi[i].getAttribute("value");
                                    }
                                }

                                setTimeout(function () {
                                    GM.xmlHttpRequest({
                                        method: 'POST',
                                        url: requestlink2,
                                        data: data,
                                        headers: {
                                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                            Referer: requestlink
                                        },
                                        onload: function (responseDetails) {
                                            unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingressucessful + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="100" max="100">100%</progress>');
                                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.sendingressucessful + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y, "Trade", cloneInto(task.villageid, unsafeWindow)));
                                            if (task.tasknumber != undefined && task.option * 1 == 0) {
                                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                                            }
                                            else if (task.tasknumber != undefined && task.option * 1 < 3) {
                                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PovecajCasTrgovanja(cloneInto(task, unsafeWindow));
                                            }

                                            if (unsafeWindow.Stopped) {
                                                unsafeWindow.SpremeniStatus("Stopped");
                                                return;
                                            }
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).ShraniTrgovanje(cloneInto(task, unsafeWindow));
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajTrznicoInZacni();
                                        },
                                        onerror: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        ontimeout: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        onabort: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        }
                                    });

                                }, RandomXtoY(1000, 5000));

                            },
                            onerror: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            ontimeout: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            onabort: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            }
                        });

                    }, RandomXtoY(1000, 5000));
                }

            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));
}

function replace0(input)
{
    if(input==0)
    {
        return ""
    }
    return input
}
function getVillageName(x, y, PLAYER) {
    var vasVKateroPosiljam = unsafeWindow.PLAYER.getVillageFromXY(x, y)
    if (vasVKateroPosiljam) {
        return vasVKateroPosiljam.name;
    }
    return ""
}

function getAjaxToken(html)
{
    var split1=html.split("Travian.shawlsSheilaCarissa")
    if(split1.length>1)
    {
        return split1[1].split("'")[1]
    }
    else
    {
        return html.split("window.ajaxToken")[1].split("'")[1]
    }
  
}


function trade(task, village, PLAYER) {
    task.res = { wood: task.wood, clay: task.clay, iron: task.iron, crop: task.grain }
    log("start trade", 5)
    var buildinglevel = 1;
    var d12 = "dorf2.php";
    var ajaxToken = ""
    var idd = ""
    var t1 = ""
    var requestnr = 0;
    var maxrequestnr = 15;
    if (unsafeWindow.Stopped) {
        addLog("Trade", village.villageid, "Bot was stopped. Trade not compleatd.", PLAYER, 2);
        return
    }
    var swichVillage = function (doc, villageid) {
        if (unsafeWindow.Stopped) {
            addLog("Trade", village.villageid, "Bot was stopped. Trade not compleatd.", PLAYER, 2);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Trade", village.villageid, "Max number of requests reached while trying to send merchants. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        log(doc, 5);
        log(villageid, 5);
        var ActiveVillage = doc.evaluate(".//a[contains(@href, 'newdid=" + villageid + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        log(doc.getElementsByTagName("a"), 5);
        if (ActiveVillage.snapshotLength > 0) {
            var villagehref = ActiveVillage.snapshotItem(0).getAttribute("href");
            if (true) {
                setTimeout(function () {
                    request(funkcijaPoOdprtjuDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/dorf2.php?newdid=" + villageid, "")
                }, randomXToY(500, 1500))
            }
            else {

                setTimeout(function () {
                    request(funkcijaPonovnoOdpriDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + d12 + ActiveVillage.snapshotItem(0).getAttribute("href"), "")
                }, randomXToY(500, 1500))
            }
        }
        else {
            log("cant find active village swichVillage", 2);
            addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + "); Can not find active village.", PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);
            return false;
        }
    }

    var funkcijaPoTrgovanju2 = function (response, json, status, statusText, headers, doc, url) {
        if (response.status != 200) {
            addLog("Trade", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }

        var ResponseObject = JSON.parse(response.responseText)
        if (ResponseObject.response) {
            ResponseObject = ResponseObject.response;
        }
        log(ResponseObject, 5)
        if (ResponseObject.error != false) {
            addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + ").[3]", PLAYER, 2);
            setTimeoutStart(1500, 3000, PLAYER);
            return;
        }
        var naselje1 = village
        var parser = new DOMParser();
        var doc = parser.parseFromString(ResponseObject.data.merchantsOnTheWay, "text/html");
        
        if (ResponseObject.data.merchantsAvailable *1 != NaN)
        {
            console.log("Nastavljeni st trgovcev")
            naselje1.TRGOVCI[0][0] = cloneInto(ResponseObject.data.merchantsAvailable*1, unsafeWindow);
        }
        analizirajTrgovce99(doc, doc, PLAYER, naselje1)
        if (ResponseObject.data.storage.l1*1 != NaN) {
            //console.log("Nastavljeni ResponseObject.data.storage.l1")
            naselje1.wood = cloneInto(ResponseObject.data.storage.l1, unsafeWindow);
        }
        if (ResponseObject.data.storage.l2 * 1 != NaN) {
            //console.log("Nastavljeni ResponseObject.data.storage.l2")
            naselje1.clay = cloneInto(ResponseObject.data.storage.l2, unsafeWindow);
        }
        if (ResponseObject.data.storage.l3 * 1 != NaN) {
            //console.log("Nastavljeni ResponseObject.data.storage.l3")
            naselje1.iron = cloneInto(ResponseObject.data.storage.l3, unsafeWindow);
        }
        if (ResponseObject.data.storage.l4 * 1 != NaN) {
            //console.log("Nastavljeni ResponseObject.data.storage.l4")
            naselje1.grain = cloneInto(ResponseObject.data.storage.l4, unsafeWindow);
        }

        //console.log(ResponseObject)
        
        
        
        /*return
        console.log(ResponseObject)
        
        var ex11 = ".//tr[@class='res']";
        var Tabele = doc.evaluate(ex11, doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        var VracanjaTrgovcev = [naselje1.TRGOVCI[0]];
        VracanjaTrgovcev[0][0] = ResponseObject.data.merchantsAvailable;
        var TrgovciNosijo = naselje1.TRGOVCI[0][1]

        var PrihajajoceSurovine = [];
        for (var gfsd = 0; gfsd < Tabele.snapshotLength; gfsd++) {
            var Tabele1 = Tabele.snapshotItem(gfsd);
            var poljezsur = Tabele1.getElementsByTagName("span")[0]
            var Celatabela = Tabele1.parentNode.parentNode;
            var naslovnacelica = Celatabela.getElementsByTagName("thead")[0].getElementsByClassName("dorf")[0]
            var Tatimer = Celatabela.getElementsByClassName("timer")[0].innerHTML.split(":")
            var PrihodCezSekund = Tatimer[0] * 3600 + Tatimer[1] * 60 + Tatimer[2] * 1;
            var idnaseljavkateregaposiljam = naslovnacelica.getElementsByTagName("a")[0].getAttribute("href").split("d=")[1].match(/[\d\.]+/g)[0] * 1
            log(Celatabela, 5)
            log(naslovnacelica, 5)
            log(Tatimer, 5)
            var surovine = [
                poljezsur.childNodes[2].data.match(/[\d\.]+/g)[0] * 1,
                poljezsur.childNodes[4].data.match(/[\d\.]+/g)[0] * 1,
                poljezsur.childNodes[6].data.match(/[\d\.]+/g)[0] * 1,
                poljezsur.childNodes[8].data.match(/[\d\.]+/g)[0] * 1
            ]
            var SteviloPoslanihTrgovcev = Math.ceil((surovine[0] + surovine[1] + surovine[2] + surovine[3]) / Math.max(TrgovciNosijo, 1));
            log(surovine, 5)
            log(idnaseljavkateregaposiljam, 5)
            var SekundePotovanja = 1
            if (naslovnacelica.innerHTML.split(PLAYER.transportto).length > 1) {
                log("transportto", 5)

                Pleme = PLAYER.tribe * 1;
                var HitrostTrgovcev = 1;

                if (Pleme == 0) {
                    HitrostTrgovcev = 16;
                }
                else if (Pleme == 1) {
                    HitrostTrgovcev = 12;
                }
                else if (Pleme == 2) {
                    HitrostTrgovcev = 24;
                }
                var XVasPosiljanja = getXfromCoord(idnaseljavkateregaposiljam * 1);
                var YVasPosiljanja = getYfromCoord(idnaseljavkateregaposiljam * 1);

                var RazdaljaVmes = PridobiRazdaljo(naselje1.x * 1, naselje1.y * 1, XVasPosiljanja * 1, YVasPosiljanja * 1);
                var SekundePotovanja = Math.ceil(RazdaljaVmes * 3600 / (PLAYER.speed * HitrostTrgovcev)) + 5;
                var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;

                var CasVracanja = new Date();
                CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);

                var vracamke =
                {
                    trgovci: SteviloPoslanihTrgovcev,
                    time: CasVracanja.getTime()
                }
                VracanjaTrgovcev.push(vracamke)
            }
            else if (naslovnacelica.innerHTML.split(PLAYER.transportfrom).length > 1) {
                log("transportfrom", 5)
                var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;

                var CasVracanja = new Date();
                CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);


                var vracamke =
                {
                    wood: surovine[0],
                    clay: surovine[1],
                    iron: surovine[2],
                    crop: surovine[3],
                    time: CasVracanja.getTime()
                }
                PrihajajoceSurovine.push(vracamke);

            }
            else if (naslovnacelica.innerHTML.split(PLAYER.returnfrom).length > 1) {
                log("returnfrom", 5)
                var CasVracanja = new Date();
                var VracanjeCezSekund = SekundePotovanja + PrihodCezSekund;
                CasVracanja.setSeconds(CasVracanja.getSeconds() + VracanjeCezSekund);

                var vracamke =
                {
                    trgovci: SteviloPoslanihTrgovcev,
                    time: CasVracanja.getTime()
                }
                VracanjaTrgovcev.push(vracamke);
            }
        }
        naselje1.TRGOVCI = cloneInto(VracanjaTrgovcev, unsafeWindow);
        naselje1.SUROVINEPRIHAJAJOCE = cloneInto(PrihajajoceSurovine, unsafeWindow);
        
            //"storage":{"l1":"77851.1134","l2":"77254.3400","l3":"79253.3400","l4":"6692.0198"}
        log(naselje1.TRGOVCI, 5)
        log(naselje1.SUROVINEPRIHAJAJOCE, 5)
        */
        if (unsafeWindow.Stopped) {
            addLog("Trade", village.villageid, "Bot was stopped.", PLAYER, 2);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Trade", village.villageid, "Max number of requests reached while trying to send merchants. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        setTimeoutStart(1500, 3000, PLAYER);
    }

    var funkcijaPoTrgovanju = function (response, json, status, statusText, headers, doc, url, data2) {

        if (response.status != 200) {
            addLog("Trade", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }

        var ResponseObject = JSON.parse(response.responseText)
        if (ResponseObject.response) {
            ResponseObject = ResponseObject.response;
        }
        log(ResponseObject, 5)
        if (ResponseObject.data.errorMessage != "") {
            addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + "). [1];Error message: " + ResponseObject.data.errorMessage, PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);
            return;
        }
        
        if (ResponseObject.data.notice == "") {
            addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + "). ", PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);
            return;
        }


        if (task.tasknumber != undefined && task.option * 1 == 0) {
            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
        }
        else if (task.tasknumber != undefined && task.option * 1 < 3) {
            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PovecajCasTrgovanja(cloneInto(task, unsafeWindow));
        }

        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + " " + getVillageName(task.x, task.y, PLAYER) + ": " + task.x + "|" + task.y + ' <progress value="100" max="100">0%</progress>');
        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).ShraniTrgovanje(cloneInto(task, unsafeWindow));
        //sucessfulTrade(task, village, PLAYER);
        addLog("Trade", village.villageid, "[" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] was sent to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + ")", PLAYER, 1);
        if (unsafeWindow.Stopped) {
            addLog("Trade", village.villageid, "Bot was stopped.", PLAYER, 2);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Trade", village.villageid, "Max number of requests reached while trying to send merchants. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        var poststring = "cmd=reloadMarketplace&ajaxToken=" + ajaxToken;

        setTimeout(function () {
            request(funkcijaPoTrgovanju2, "POST", unsafeWindow.http + "://" + PLAYER.server2 + "/ajax.php?cmd=reloadMarketplace", poststring, "", {
                "X-Requested-With": "XMLHttpRequest",
                "X-Request": "JSON",
                "Referer": data2["Referer"]
            })
        }, randomXToY(0, 50))
        //analizirajNaselje(doc);




    }

    var funkcijaPosljiSurovine2 = function (response, json, status, statusText, headers, doc, url,data2) {
        if (unsafeWindow.Stopped) {
            addLog("Trade", village.villageid, "Bot was stopped. Trade not completed.", PLAYER, 2);
            return
        }
        if (response.status != 200) {
            addLog("Trade", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Trade", village.villageid, "Max number of requests reached while trying to send merchants. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        var ResponseObject = JSON.parse(response.responseText)
        if (ResponseObject.response) {
            ResponseObject = ResponseObject.response;
        }
        log(ResponseObject, 5)
        if (ResponseObject.data.errorMessage != "") {
            addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + ").[2];Error message: " + ResponseObject.data.errorMessage, PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);
            return;
        }
        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + " " + getVillageName(task.x, task.y, PLAYER) + ": " + task.x + "|" + task.y + ' <progress value="75" max="100">0%</progress>');
        var parser = new DOMParser();
        var doc = parser.parseFromString(ResponseObject.data.formular, "text/html");

        var idd2 = doc.getElementById("id")
        var aaa = doc.getElementById("a")
        var sz = doc.getElementById("sz")
        var kid = doc.getElementById("kid")
        var c = doc.getElementById("c")
        var x2 = doc.getElementById("x2")
        var t2 = doc.getElementById("t")
        var poststring = "cmd=prepareMarketplace&t=" + t2.value + "&id=" + idd2.value + "&a=" + aaa.value + "&sz=" + sz.value + "&kid=" + kid.value + "&c=" + c.value + "&x2=" + x2.value + "&r1=" + replace0(task.res.wood) + "&r2=" + replace0(task.res.clay) + "&r3=" + replace0(task.res.iron) + "&r4=" + replace0(task.res.crop) + "&ajaxToken=" + ajaxToken;
        log(poststring, 5)
        setTimeout(function () {
            request(funkcijaPoTrgovanju, "POST", unsafeWindow.http + "://" + PLAYER.server2 + "/ajax.php?cmd=prepareMarketplace", poststring, data2, {
                "X-Requested-With": "XMLHttpRequest",
                "X-Request": "JSON",
                "Referer": data2["Referer"]
            })
        }, randomXToY(500, 1500))
        return
    }

    var funkcijaPosljiSurovine = function (response, json, status, statusText, headers, doc, url) {
        log("funkcijaPosljiSurovine", 1)
        if (unsafeWindow.Stopped) {
            addLog("Trade", village.villageid, "Bot was stopped. Trade not completed.", PLAYER, 2);
            return
        }
        if (response.status != 200) {
            addLog("Trade", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Trade", village.villageid, "Max number of requests reached while trying to send merchants. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        var preverjenLogin = preveriLogin(doc, PLAYER);
        if (!preverjenLogin) {
            return
            if (d12 == "dorf2.php") {
                //tab.onload=funkcijaPonovnoOdpriDorf12;
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPonovnoOdpriDorf12)
            }
            else {
                //tab.onload=funkcijaPoOdprtjuDorf12;
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPoOdprtjuDorf12)
            }
            return;
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village.villageid) {
            swichVillage(doc, village.villageid);
            return;
        }
        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + " " + getVillageName(task.x, task.y, PLAYER) + ": " + task.x + "|" + task.y + ' <progress value="50" max="100">0%</progress>');
        var aktivniTab = doc.evaluate(".//div[@class='container active']/div/a[@class='tabItem']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        var praviTab = doc.evaluate(".//div[contains(@class,'container')]/div/a[@class='tabItem' and contains(@href,'t=5')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        var NovaStavba = false;
        var ElementPovezave;
        if (aktivniTab.snapshotLength && praviTab.snapshotLength) {
            log("najden aktivni tab", 5)
            log(aktivniTab.snapshotItem(0).getAttribute("href"), 5)
            log(praviTab.snapshotItem(0).getAttribute("href"), 5)
            if (aktivniTab.snapshotItem(0) != praviTab.snapshotItem(0)) {
                log(unsafeWindow.http + "://" + PLAYER.server2 + "/" + praviTab.snapshotItem(0).getAttribute("href"), 1)
                setTimeout(function () {
                    request(funkcijaPosljiSurovine, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + praviTab.snapshotItem(0).getAttribute("href"), "")
                }, randomXToY(500, 1500))
                return;
            }
            else {
                var r1 = doc.getElementById("r1");
                var r2 = doc.getElementById("r2");
                var r3 = doc.getElementById("r3");
                var r4 = doc.getElementById("r4");
                var xCoordInput = doc.getElementById("xCoordInput");
                var yCoordInput = doc.getElementById("yCoordInput");
                var submitbutton = doc.getElementById("enabledButton");
                var idd = doc.getElementById("id")
                var t1 = doc.getElementById("t")
                ajaxToken = getAjaxToken(doc.documentElement.innerHTML)
                console.log(ajaxToken)
                log("inputs", 5)
                log(r1, 5)
                log(r2, 5)
                log(r3, 5)
                log(r4, 5)
                log(xCoordInput, 5)
                log(yCoordInput, 5)
                log(submitbutton, 5)
                log(idd, 5)
                log(t1, 5)
                log(ajaxToken, 5)
                if (r1 && r2 && r3 && r4 && xCoordInput && yCoordInput && submitbutton && idd && t1) {
                    log("found inputs", 5)
                    console.log(task)
                    var poststring = "cmd=prepareMarketplace&r1=" + replace0(task.res.wood) + "&r2=" + replace0(task.res.clay) + "&r3=" + replace0(task.res.iron) + "&r4=" + replace0(task.res.crop) + "&dname=&x=" + task.x + "&y=" + task.y + "&id=" + idd.value + "&t=" + t1.value + "&x2=1&ajaxToken=" + ajaxToken;
                    console.log(poststring)
                    setTimeout(function () {
                        request(funkcijaPosljiSurovine2, "POST", unsafeWindow.http + "://" + PLAYER.server2 + "/ajax.php?cmd=prepareMarketplace", poststring, { "Referer": url }, {
                            "X-Requested-With": "XMLHttpRequest",
                            "X-Request": "JSON",
                            "Referer": url//,
                            //"Content-Type": "application/json; charset=UTF-8;"
                        })
                    }, randomXToY(500, 1500))
                    return;
                }
                else {
                    log("inputs not found", 8);
                    addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + "); Can not find inputs for resources.", PLAYER, 2);
                    setTimeoutStart(15000, 30000, PLAYER);
                    return;
                }
            }
            return;

        }
        else {
            log("ni najden aktivni tab", 5)
            addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + "); Can not find active tab.", PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);
        }

    }


    var funkcijaPoOdprtjuDorf12 = function (response, json, status, statusText, headers, doc, url) {
        if (unsafeWindow.Stopped) {
            addLog("Trade", village.villageid, "Bot was stopped. Trade not compleated.", PLAYER, 2);
            return
        }
        if (response.status != 200) {
            addLog("Trade", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Trade", village.villageid, "Max number of requests reached while trying to send merchants. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        log("po odprtju dorf 2", 5)
        var preverjenLogin = preveriLogin(doc, PLAYER);
        if (!preverjenLogin) {
            return
            if (d12 == "dorf2.php") {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPonovnoOdpriDorf12)
            }
            else {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPoOdprtjuDorf12)
            }
            return;
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village.villageid) {
            swichVillage(doc, village.villageid);
            return;
        }
        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + " " + getVillageName(task.x, task.y, PLAYER) + ": " + task.x + "|" + task.y + ' <progress value="25" max="100">0%</progress>');
        var areagumb = doc.evaluate(".//img[@class='building g17']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        if (areagumb.snapshotLength) {
            var item = areagumb.snapshotItem(0);
            var location = 17 + getElementIndex(item);
            log(getElementIndex(item), 5);
            log(item.parentNode.childNodes, 5);
            var areagumb1 = doc.evaluate(".//area[contains(@href, 'build.php?') and contains(@href, 'id=" + location + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
            if (areagumb1.snapshotLength) {
                console.log(areagumb1.snapshotItem(0))
                console.log(areagumb1.snapshotItem(0).getAttribute("href"))
                console.log(areagumb1.snapshotItem(0).getAttribute("href"))
                log(unsafeWindow.http + "://" + PLAYER.server2 + "/" + areagumb1.snapshotItem(0).getAttribute("href"), 1);
                setTimeout(function () {
                    request(funkcijaPosljiSurovine, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + areagumb1.snapshotItem(0).getAttribute("href"), "")
                }, randomXToY(500, 1500))
                return;
            }
            else {
                log("no result1", 5);
                addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + "); Can not find marketplace.", PLAYER, 2);
                setTimeoutStart(15000, 30000, PLAYER);
            }
            return;

        }
        else {
            log("no result1", 5);
            addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + "); Can not find marketplace.", PLAYER, 2);
            setTimeoutStart(15000, 30000, PLAYER);
            return;
        }

    };
                                              
    var funkcijaPonovnoOdpriDorf12 = function (response, json, status, statusText, headers, doc, url) {
        if (unsafeWindow.Stopped) {
            addLog("Trade", village.villageid, "Bot was stopped. Trade not compleated.", PLAYER, 2);
            return
        }
        if (response.status != 200) {
            addLog("Trade", village.villageid, "Failed to load the page. Retry within 1 minute.", PLAYER, 2);
            setTimeoutStart(30000, 60000, PLAYER);
            return
        }
        requestnr++
        if (requestnr > maxrequestnr) {
            addLog("Trade", village.villageid, "Max number of requests reached while trying to send merchants. If you face this error often, please report it on forum.", PLAYER, 2);
            setTimeoutStart(30000, 90000, PLAYER);
            return;
        }
        var preverjenLogin = preveriLogin(doc, PLAYER, url);
        if (!preverjenLogin) {
            return
            if (d12 == "dorf2.php") {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPonovnoOdpriDorf12)
            }
            else {
                if (PLAYER.updatepassword) {
                    updatePassword(PLAYER, unsafeWindow.http + "://" + PLAYER.server2)
                }
                relogin(doc, PLAYER, funkcijaPoOdprtjuDorf12)
            }
            return;
        }
        var activevillageid = pridobiActiveVillage(doc);
        if (activevillageid != village.villageid) {
            swichVillage(doc, village.villageid);
            return;
        }
        var areagumb = doc.evaluate(".//a[@href='" + d12 + "']", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
        if (areagumb.snapshotLength) {
            setTimeout(function () {
                request(funkcijaPoOdprtjuDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + areagumb.snapshotItem(0).getAttribute("href"), "")
            }, randomXToY(500, 1500))
        }
        else {
            addLog("Trade", village.villageid, "Failed to send [" + task.res.wood + "," + task.res.clay + "," + task.res.iron + "," + task.res.crop + "] to " + getVillageName(task.x, task.y, PLAYER) + " (" + task.x + "|" + task.y + "); Unable to find link to redirect to " + d12 + " page.", PLAYER, 2);
            log("no result1", 5)
            setTimeoutStart(15000, 30000, PLAYER);
        }
    };
    log(unsafeWindow.http + "://" + PLAYER.server2 + "/" + d12, 5)
    setTimeout(function () {
        request(funkcijaPoOdprtjuDorf12, "GET", unsafeWindow.http + "://" + PLAYER.server2 + "/" + d12, "")
    }, randomXToY(500, 1500))
    log("url nastavljen", 5)
}

function preveriLogin(doc, PLAYER, url)
{
    return PreveriLoginTask(doc, url)
}

function getElementIndex(element) {
    return Array.prototype.indexOf.call(element.parentNode.childNodes, element);
}

function PosljiSurovineT4(task) {


    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + " "+getVillageName(task.x, task.y, PLAYER)+ ": " + task.x + "|" + task.y + ' <progress value="0" max="100">0%</progress>');
    var PLAYER=unsafeWindow.PLAYER;
    var village = PLAYER.getVillage(task.villageid);
    console.log(task)
    console.log(PLAYER)
    console.log(village)
    //return
    trade(task, village, PLAYER)
    return
    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }

    setTimeout(function () {
        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?&gid=17&newdid=" + task.villageid;
        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            headers: {},
            onload: function (responseDetails) {


                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }
                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="33" max="100">33%</progress>');

                var TestServera = doc.evaluate(".//a[contains(@href, 't=5')][contains(@href, 'id=')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (TestServera.snapshotLength > 0) {
                    var PageId = TestServera.snapshotItem(0).getAttribute("href").split("id=")[1];
                    if (PageId.indexOf("&") > -1) {
                        PageId = PageId.split("&")[0];
                        PageId = PageId.split("amp;").join("");
                    }
                    var dodd = "";
                    if (true) {
                        dodd = "&ajaxToken=" + getAjaxToken(responseDetails.responseText)
                    }

                    var requestlink2 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/ajax.php?cmd=prepareMarketplace";
                    var data = "cmd=prepareMarketplace&r1=" + task.wood + "&r2=" + task.clay + "&r3=" + task.iron + "&r4=" + task.grain + "&dname=&x=" + task.x + "&y=" + task.y + "&id=" + PageId + "&t=5&x2=1" + dodd;


                    setTimeout(function () {
                        GM.xmlHttpRequest({
                            method: 'POST',
                            url: requestlink2,
                            data: data,
                            headers: {
                                "X-Requested-With": "XMLHttpRequest",
                                "X-Request": "JSON",
                                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                Referer: requestlink
                            },
                            onload: function (responseDetails) {

                                if (unsafeWindow.Stopped) {
                                    unsafeWindow.SpremeniStatus("Stopped");
                                    return;
                                }
                                var ResponseObject = eval("(" + responseDetails.responseText + ")");
                                if (ResponseObject.response) {
                                    ResponseObject = ResponseObject.response;
                                }


                                if (ResponseObject.data.errorMessage != "") {
                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.unabletosendres + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y, "Trade", cloneInto(task.villageid, unsafeWindow)));
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.unabletosendres + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="100" max="100">100%</progress>')
                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajTrznicoInZacni();
                                    return;
                                }
                                else {
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="66" max="100">66%</progress>');
                                }

                                var doc = document.implementation.createHTMLDocument('My title');
                                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                doc.documentElement.appendChild(body);
                                doc.body.innerHTML = responseDetails.responseText;

                                var data = "cmd=prepareMarketplace&r1=" + task.wood + "&r2=" + task.clay + "&r3=" + task.iron + "&r4=" + task.grain + dodd;
                                var Inputi = doc.getElementsByTagName("input");
                                for (var i = 0; i < Inputi.length; i++) {
                                    if (Inputi[i].getAttribute("name").split('"').join("").split('\\').join("") != "dname") {
                                        data += "&" + Inputi[i].getAttribute("name").split("\"").join("").split('\\').join("") + "=" + Inputi[i].getAttribute("value").split("\"").join("").split('\\').join("");
                                    }
                                }


                                setTimeout(function () {
                                    GM.xmlHttpRequest({
                                        method: 'POST',
                                        url: requestlink2,
                                        data: data,
                                        headers: {
                                            "X-Requested-With": "XMLHttpRequest",
                                            "X-Request": "JSON",
                                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                            Referer: requestlink
                                        },
                                        onload: function (responseDetails) {

                                            var posljisurovineev = eval("(" + responseDetails.responseText + ")");

                                            if (posljisurovineev.redirectTo + "" != "undefined") {
                                                relogin();
                                                return;
                                            }


                                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.sendingressucessful + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y, "Trade", cloneInto(task.villageid, unsafeWindow)));
                                            unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingressucessful + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="100" max="100">100%</progress>');
                                            if (task.tasknumber != undefined && task.option * 1 == 0) {
                                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                                            }
                                            else if (task.tasknumber != undefined && task.option * 1 < 3) {
                                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PovecajCasTrgovanja(cloneInto(task, unsafeWindow));
                                            }

                                            if (unsafeWindow.Stopped) {
                                                unsafeWindow.SpremeniStatus("Stopped");
                                                return;
                                            }


                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).ShraniTrgovanje(cloneInto(task, unsafeWindow));
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajTrznicoInZacni();
                                        },
                                        onerror: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        ontimeout: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        onabort: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        }
                                    });

                                }, RandomXtoY(1000, 5000))

                            },
                            onerror: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            ontimeout: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            onabort: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            }
                        });

                    }, RandomXtoY(1000, 5000))


                }
                else {
                    var IdStrani = doc.evaluate(".//a[contains(@href, 't=1')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                    var PageId = IdStrani.snapshotItem(0).getAttribute("href").split("id=")[1];
                    if (PageId.indexOf("&") > -1) {
                        PageId = PageId.split("&")[0];
                        PageId = PageId.split("amp;").join("");
                    }

                    var requestlink2 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php";
                    var data = "r1=" + task.wood + "&r2=" + task.clay + "&r3=" + task.iron + "&r4=" + task.grain + "&dname=&x=" + task.x + "&y=" + task.y + "&id=" + PageId;

                    setTimeout(function () {
                        GM.xmlHttpRequest({
                            method: 'POST',
                            url: requestlink2,
                            data: data,
                            headers: {
                                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                Referer: requestlink
                            },
                            onload: function (responseDetails) {

                                if (unsafeWindow.Stopped) {
                                    unsafeWindow.SpremeniStatus("Stopped");
                                    return;
                                }

                                var doc = document.implementation.createHTMLDocument('My title');
                                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                doc.documentElement.appendChild(body);
                                doc.body.innerHTML = responseDetails.responseText;

                                var Error = doc.evaluate(".//p[contains(@class, 'error')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                                if (Error.snapshotLength) {

                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.unabletosendres + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="100" max="100">100%</progress>');
                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.unabletosendres + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y, "Trade", cloneInto(task.villageid, unsafeWindow)));
                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajTrznicoInZacni();
                                    return;
                                }
                                else {
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingresurces + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="66" max="100">66%</progress>');
                                }



                                var data = "";
                                var Inputi = doc.getElementsByName("snd")[0].getElementsByTagName("input");
                                for (var i = 0; i < Inputi.length; i++) {
                                    if (i > 0) {
                                        data += "&";
                                    }
                                    data += Inputi[i].getAttribute("name") + "=" + Inputi[i].getAttribute("value");
                                }

                                setTimeout(function () {
                                    GM.xmlHttpRequest({
                                        method: 'POST',
                                        url: requestlink2,
                                        data: data,
                                        headers: {
                                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                            Referer: requestlink
                                        },
                                        onload: function (responseDetails) {
                                            unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingressucessful + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y + '<progress value="100" max="100">100%</progress>');
                                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.sendingressucessful + " [" + task.wood + "," + task.clay + "," + task.iron + "," + task.grain + "] " + prevodi.to + ": " + task.x + "|" + task.y, "Trade", cloneInto(task.villageid, unsafeWindow)));
                                            if (task.tasknumber != undefined && task.option * 1 == 0) {
                                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).IzbrisiTask(cloneInto(task.tasknumber, unsafeWindow));
                                            }
                                            else if (task.tasknumber != undefined && task.option * 1 < 3) {
                                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).PovecajCasTrgovanja(cloneInto(task, unsafeWindow));
                                            }

                                            if (unsafeWindow.Stopped) {
                                                unsafeWindow.SpremeniStatus("Stopped");
                                                return;
                                            }

                                            unsafeWindow.PLAYER.AnalizirajVsaNaseljaInZacni();
                                        },
                                        onerror: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        ontimeout: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        onabort: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        }
                                    });

                                }, RandomXtoY(1000, 5000));

                            },
                            onerror: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            ontimeout: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            onabort: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            }
                        });

                    }, RandomXtoY(1000, 5000));
                }

            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));

}

function PosljiEnoteT3(task) {
    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="0" max="100">0%</progress>');

    var newdid = "&newdid=" + task.villageid;
    if (unsafeWindow.PLAYER.villages.length <= 1) {
        newdid = "";
    }

    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }
    var requestlink0 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/karte.php?z=" + task.link + newdid;
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink0,
            headers: {},
            onload: function (responseDetails) {
                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="20" max="100">20%</progress>');

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,requestlink0);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }

                var requestlink = doc.evaluate("//area[contains(@href, 'karte.php?d=" + task.link + "')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + requestlink.snapshotItem(0).getAttribute("href");
                setTimeout(function () {
                    GM.xmlHttpRequest({
                        method: 'GET',
                        url: requestlink,
                        headers: {},
                        onload: function (responseDetails) {

                            if (unsafeWindow.Stopped) {
                                unsafeWindow.SpremeniStatus("Stopped");
                                return;
                            }
                            unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="40" max="100">40%</progress>');

                            var doc = document.implementation.createHTMLDocument('My title');
                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                            doc.documentElement.appendChild(body);
                            doc.body.innerHTML = responseDetails.responseText;

                            var TestServera = PravilnoNaselje(doc, task.link);
                            if (TestServera != false) {
                                var requestlink2 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + TestServera + newdid;
                                var Stari = false;
                                if (TestServera.indexOf("a2b.php") > -1) {
                                    Stari = true;
                                }

                                setTimeout(function () {
                                    GM.xmlHttpRequest({
                                        method: 'GET',
                                        url: requestlink2,
                                        headers: {
                                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
                                        },
                                        onload: function (responseDetails) {

                                            if (unsafeWindow.Stopped) {
                                                unsafeWindow.SpremeniStatus("Stopped");
                                                return;
                                            }

                                            var doc = document.implementation.createHTMLDocument('My title');
                                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                            doc.documentElement.appendChild(body);
                                            doc.body.innerHTML = responseDetails.responseText;

                                            unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="60" max="100">60%</progress>');
                                            var inputs = doc.getElementsByTagName("form")[0].getElementsByTagName("input");
                                            var data = "";
                                            var AnalysedC = false;
                                            for (var i = 0; i < inputs.length; i++) {
                                                //timestamp=1333661360&timestamp_checksum=4888b4&b=1&t1=1&t4=&t7=&t9=&t2=&t5=&t8=&t10=&t3=&t6=&dname=&x=-192&y=149&c=2&s1=ok
                                                if (i > 0 && inputs[i].getAttribute("name") != "c") {
                                                    data += "&";
                                                }
                                                if (inputs[i].getAttribute("name").indexOf("t") > -1 && inputs[i].getAttribute("name").match(/[\d\.]+/g) != null) {
                                                    var troop = inputs[i].getAttribute("name").match(/[\d\.]+/g)[0] * 1 - 1;
                                                    var maxtroop = 0;

                                                    if (inputs[i].getAttribute("class").indexOf("disabled") == -1) {
                                                        try {
                                                            maxtroop = inputs[i].nextSibling.nextSibling.getAttribute("onclick").split(inputs[i].getAttribute("name"))[1].split(".").join("").match(/[\d\.]+/g)[0] * 1;
                                                        }
                                                        catch (err) {
                                                            maxtroop = 0;
                                                        }
                                                    }

                                                    if (task.troops[troop] * 1 <= maxtroop) {
                                                        data += inputs[i].getAttribute("name") + "=" + task.troops[troop];
                                                    }
                                                    else {
                                                        var vill = unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow))
                                                        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');
                                                        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));
                                                        vill.STARTFARM = -1;
                                                        var datenoww=new Date()
                                                        vill.CASANALIZEENOT = datenoww.getTime() + randomXToY(vill.CASANALIZEENOTintervalMIN * 60000, vill.CASANALIZEENOTintervalMAX * 60000);
                                                        vill.UpdateCasAnalizeEnot();
                                                        setTimeout(function () {
                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, RandomXtoY(500, 2000));
                                                        return
                                                        vill.AnalizirajZbiralisceInZacni();
                                                        return;
                                                    }
                                                }
                                                else if (inputs[i].getAttribute("name") == "c") {

                                                    if (!AnalysedC) {
                                                        if (i > 0) {
                                                            data += "&";
                                                        }
                                                        data += inputs[i].getAttribute("name") + "=" + task.att;
                                                        AnalysedC = true;
                                                    }
                                                }
                                                else if (inputs[i].getAttribute("name") == "redeployHero") {
                                                    data += inputs[i].getAttribute("name") + "=";
                                                }
                                                else {
                                                    data += inputs[i].getAttribute("name") + "=" + inputs[i].getAttribute("value");
                                                }


                                            }
                                            data += "&s1=ok";

                                            var requestlink3 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?id=39&tt=2";
                                            if (Stari) {
                                                requestlink3 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/a2b.php";
                                            }
                                            setTimeout(function () {
                                                GM.xmlHttpRequest({
                                                    method: 'POST',
                                                    url: requestlink3,
                                                    data: data,
                                                    headers: {
                                                        "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                                        "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
                                                    },
                                                    onload: function (responseDetails) {

                                                        if (unsafeWindow.Stopped) {
                                                            unsafeWindow.SpremeniStatus("Stopped");
                                                            return;
                                                        }

                                                        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="80" max="100">80%</progress>');

                                                        var doc = document.implementation.createHTMLDocument('My title');
                                                        var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                                        doc.documentElement.appendChild(body);
                                                        doc.body.innerHTML = responseDetails.responseText;

                                                        var inputs = doc.getElementsByTagName("form")[0].getElementsByTagName("input");
                                                        var data = "";
                                                        for (var i = 0; i < inputs.length; i++) {
                                                            if (i > 0) {
                                                                data += "&";
                                                            }

                                                            if (inputs[i].getAttribute("name") == "redeployHero") {
                                                                data += inputs[i].getAttribute("name") + "=";
                                                            }
                                                            else {
                                                                data += inputs[i].getAttribute("name") + "=" + inputs[i].getAttribute("value");
                                                            }
                                                        }
                                                        data += "&s1=ok";

                                                        setTimeout(function () {
                                                            GM.xmlHttpRequest({
                                                                method: 'POST',
                                                                url: requestlink3,
                                                                data: data,
                                                                headers: {
                                                                    "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                                                    "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
                                                                },
                                                                onload: function (responseDetails) {
                                                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroopssuccesul + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');
                                                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.sendingtroopssuccesul + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));
                                                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).FARMNUMBER = task.tasknumber;
                                                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).UpdateFarmDisplay();

                                                                    if (unsafeWindow.Stopped) {
                                                                        unsafeWindow.SpremeniStatus("Stopped");
                                                                        return;
                                                                    }

                                                                    setTimeout(function () {
                                                                        unsafeWindow.Start();
                                                                    }, RandomXtoY(1000, 5000));

                                                                },
                                                                onerror: function (responseDetails) {

                                                                    setTimeout(function () {

                                                                        if (unsafeWindow.Stopped == false) {
                                                                            unsafeWindow.StartEvent();
                                                                        }
                                                                    }, 60000);
                                                                },
                                                                ontimeout: function (responseDetails) {

                                                                    setTimeout(function () {

                                                                        if (unsafeWindow.Stopped == false) {
                                                                            unsafeWindow.StartEvent();
                                                                        }
                                                                    }, 60000);
                                                                },
                                                                onabort: function (responseDetails) {

                                                                    setTimeout(function () {

                                                                        if (unsafeWindow.Stopped == false) {
                                                                            unsafeWindow.StartEvent();
                                                                        }
                                                                    }, 60000);
                                                                }
                                                            });

                                                        }, RandomXtoY(1000, 5000))

                                                    },
                                                    onerror: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    },
                                                    ontimeout: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    },
                                                    onabort: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    }
                                                });

                                            }, RandomXtoY(1000, 5000))

                                        },
                                        onerror: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        ontimeout: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        onabort: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        }
                                    });

                                }, RandomXtoY(1000, 5000))


                            }
                            else {
                                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.deletedfarm + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');
                                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.deletedfarm + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));
                                try {
                                    var OnemogocenaFarma = document.evaluate(".//input[@type='checkbox'][@villageid='" + task.villageid + "'][@tasknumberfarm='" + task.tasknumber + "']", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                                    OnemogocenaFarma.snapshotItem(0).checked = false;
                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).DisableFarm(cloneInto(task.tasknumber, unsafeWindow));
                                }
                                catch (err) {
                                }


                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).FARMNUMBER = task.tasknumber;
                                unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).UpdateFarmDisplay();
                                setTimeout(function () {
                                    unsafeWindow.Start();
                                }, RandomXtoY(1000, 5000));
                            }

                        },
                        onerror: function (responseDetails) {

                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        },
                        ontimeout: function (responseDetails) {

                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        },
                        onabort: function (responseDetails) {

                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        }
                    });

                }, RandomXtoY(1000, 5000));


            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));

}


function PosljiEnoteT4(task) {
    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="0" max="100">0%</progress>');
    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }
    setTimeout(function () {
        var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/position_details.php?x=" + unsafeWindow.PLAYER.getXfromCoord(cloneInto(task.link, unsafeWindow)) + "&y=" + unsafeWindow.PLAYER.getYfromCoord(cloneInto(task.link, unsafeWindow)) + "&newdid=" + task.villageid;
        console.log(requestlink)
        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            headers: {},
            onload: function (responseDetails) {

                if (unsafeWindow.Stopped) {
                    unsafeWindow.SpremeniStatus("Stopped");
                    return;
                }
                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="25" max="100">25%</progress>');

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;


                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }

                console.log(task.link)
                var TestServera = PravilnoNaselje(doc, task.link);

                if (TestServera != false) {
                    var requestlink2 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/" + TestServera;
                    var Stari = false;
                    if (TestServera.indexOf("a2b.php") > -1) {
                        Stari = true;
                    }

                    setTimeout(function () {
                        GM.xmlHttpRequest({
                            method: 'GET',
                            url: requestlink2,
                            headers: {
                                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                Referer: requestlink
                            },
                            onload: function (responseDetails) {

                                if (unsafeWindow.Stopped) {
                                    unsafeWindow.SpremeniStatus("Stopped");
                                    return;
                                }

                                var doc = document.implementation.createHTMLDocument('My title');
                                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                doc.documentElement.appendChild(body);
                                doc.body.innerHTML = responseDetails.responseText;
                                unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="50" max="100">50%</progress>');
                                var inputs = doc.getElementsByTagName("form")[0].getElementsByTagName("input");
                                var data = "";
                                var AnalysedC = false;
                                var AnalysedT11 = false;
                                for (var i = 0; i < inputs.length; i++) {
                                    //timestamp=1333661360&timestamp_checksum=4888b4&b=1&t1=1&t4=&t7=&t9=&t2=&t5=&t8=&t10=&t3=&t6=&dname=&x=-192&y=149&c=2&s1=ok
                                    if (i > 0 && inputs[i].getAttribute("name") != "c") {
                                        data += "&";
                                    }
                                    if (inputs[i].getAttribute("name") == "t11") {
                                        AnalysedT11 = true;
                                    }

                                    if (inputs[i].getAttribute("name").indexOf("t") > -1 && inputs[i].getAttribute("name").match(/[\d\.]+/g) != null) {
                                        var troop = inputs[i].getAttribute("name").match(/[\d\.]+/g)[0] * 1 - 1;
                                        var maxtroop = 0;

                                        if (inputs[i].getAttribute("class").indexOf("disabled") == -1) {
                                            maxtroop = inputs[i].nextSibling.nextSibling.getAttribute("onclick").split(inputs[i].getAttribute("name"))[1].split(".").join("").match(/[\d\.]+/g)[0] * 1;
                                        }
                                        if (task.troops[troop] * 1 <= maxtroop) {
                                            data += inputs[i].getAttribute("name") + "=" + task.troops[troop];
                                        }
                                        else {
                                            /*unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');
                                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));
                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).STARTFARM = -1;

                                            unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajZbiralisceInZacni();*/



                                            var vill = unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow))
                                            unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');
                                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));
                                            vill.STARTFARM = -1;
                                            var datenoww = new Date()
                                            vill.CASANALIZEENOT = datenoww.getTime() + randomXToY(vill.CASANALIZEENOTintervalMIN * 60000, vill.CASANALIZEENOTintervalMAX * 60000);
                                            vill.UpdateCasAnalizeEnot();
                                            setTimeout(function () {
                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, RandomXtoY(500, 2000));
                                            return
                                            vill.AnalizirajZbiralisceInZacni();
                                            return;
                                        }
                                    }
                                    else if (inputs[i].getAttribute("name") == "c") {

                                        if (!AnalysedC) {
                                            if (i > 0) {
                                                data += "&";
                                            }
                                            data += inputs[i].getAttribute("name") + "=" + task.att;
                                            AnalysedC = true;
                                        }
                                    }
                                    else if (inputs[i].getAttribute("name") == "redeployHero") {
                                        data += inputs[i].getAttribute("name") + "=";
                                    }
                                    else {
                                        data += inputs[i].getAttribute("name") + "=" + inputs[i].getAttribute("value");
                                    }


                                }
                                data += "&s1=ok";
                                if (task.troops[10] != 0 && !AnalysedT11) {

                                    var vill = unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow))
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');
                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));
                                    vill.STARTFARM = -1;
                                    var datenoww = new Date()
                                    vill.CASANALIZEENOT = datenoww.getTime() + randomXToY(vill.CASANALIZEENOTintervalMIN * 60000, vill.CASANALIZEENOTintervalMAX * 60000);
                                    vill.UpdateCasAnalizeEnot();
                                    setTimeout(function () {
                                        if (unsafeWindow.Stopped == false) {
                                            unsafeWindow.StartEvent();
                                        }
                                    }, RandomXtoY(500, 2000));
                                    return
                                    vill.AnalizirajZbiralisceInZacni();
                                    return
                                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');


                                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.farminunsuccesful + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));

                                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).AnalizirajZbiralisceInZacni();
                                    return;
                                }

                                var requestlink3 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?id=39&tt=2";
                                if (Stari) {
                                    requestlink3 = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/a2b.php";
                                }

                                setTimeout(function () {
                                    GM.xmlHttpRequest({
                                        method: 'POST',
                                        url: requestlink3,
                                        data: data,
                                        headers: {
                                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                            Referer: requestlink
                                        },
                                        onload: function (responseDetails) {

                                            if (unsafeWindow.Stopped) {
                                                unsafeWindow.SpremeniStatus("Stopped");
                                                return;
                                            }

                                            unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroops + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="75" max="100">75%</progress>');

                                            var doc = document.implementation.createHTMLDocument('My title');
                                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                            doc.documentElement.appendChild(body);
                                            doc.body.innerHTML = responseDetails.responseText;

                                            var test124 = PreveriLoginTask(doc,requestlink3);
                                            if (unsafeWindow.Stopped || !test124) {
                                                return;
                                            }

                                            var inputs = doc.getElementsByTagName("form")[0].getElementsByTagName("input");
                                            var data = "";
                                            var Analysedspy = false;
                                            for (var i = 0; i < inputs.length; i++) {
                                                if (i > 0) {
                                                    data += "&";
                                                }

                                                if (inputs[i].getAttribute("name") == "redeployHero") {
                                                    data += inputs[i].getAttribute("name") + "=";
                                                }
                                                else if (inputs[i].getAttribute("name") == "spy") {
                                                    if (!Analysedspy) {
                                                        if (i > 0) {
                                                            data += "&";
                                                        }
                                                        if (task.att == 4) {
                                                            data += inputs[i].getAttribute("name") + "=1";
                                                        }
                                                        else if (task.att == 3) {
                                                            data += inputs[i].getAttribute("name") + "=2";
                                                        }
                                                        Analysedspy = true;
                                                    }
                                                }
                                                else {
                                                    data += inputs[i].getAttribute("name") + "=" + inputs[i].getAttribute("value");
                                                }
                                            }
                                            data += "&s1=ok";


                                            setTimeout(function () {
                                                GM.xmlHttpRequest({
                                                    method: 'POST',
                                                    url: requestlink3,
                                                    data: data,
                                                    headers: {
                                                        "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                                        "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                                        Referer: requestlink
                                                    },
                                                    onload: function (responseDetails) {

                                                        var doc = document.implementation.createHTMLDocument('My title');
                                                        var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                                        doc.documentElement.appendChild(body);
                                                        doc.body.innerHTML = responseDetails.responseText;

                                                        var test124 = PreveriLoginTask(doc,requestlink3);
                                                        if (unsafeWindow.Stopped || !test124) {
                                                            return;
                                                        }
                                                        unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.sendingtroopssuccesul + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');
                                                        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.sendingtroopssuccesul + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));
                                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).FARMNUMBER = task.tasknumber;
                                                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).UpdateFarmDisplay();

                                                        if (unsafeWindow.Stopped) {
                                                            unsafeWindow.SpremeniStatus("Stopped");
                                                            return;
                                                        }

                                                        setTimeout(function () {
                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, RandomXtoY(500, 2000));
                                                        return

                                                    },
                                                    onerror: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    },
                                                    ontimeout: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    },
                                                    onabort: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    }
                                                });

                                            }, RandomXtoY(1000, 5000))

                                        },
                                        onerror: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        ontimeout: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        onabort: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        }
                                    });

                                }, RandomXtoY(1000, 5000))

                            },
                            onerror: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            ontimeout: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            },
                            onabort: function (responseDetails) {

                                setTimeout(function () {

                                    if (unsafeWindow.Stopped == false) {
                                        unsafeWindow.StartEvent();
                                    }
                                }, 60000);
                            }
                        });

                    }, RandomXtoY(1000, 5000))


                }
                else {
                    unsafeWindow.SpremeniStatus(unsafeWindow.prevodi.deletedfarm + " [" + task.troops + "] " + prevodi.to + ": " + task.name + '<progress value="100" max="100">100%</progress>');
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(unsafeWindow.prevodi.deletedfarm + " [" + task.troops + "] " + prevodi.to + ": " + task.name, "Send troops", cloneInto(task.villageid, unsafeWindow)));
                    try {
                        var OnemogocenaFarma = document.evaluate(".//input[@type='checkbox'][@villageid='" + task.villageid + "'][@tasknumberfarm='" + task.tasknumber + "']", document, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                        OnemogocenaFarma.snapshotItem(0).checked = false;
                        unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).DisableFarm(cloneInto(task.tasknumber, unsafeWindow));
                        //                    if (OnemogocenaFarma.snapshotItem(0).checked == true || OnemogocenaFarma.snapshotItem(0).checked == "true" || OnemogocenaFarma.snapshotItem(0).checked == "checked") {
                        //                        OnemogocenaFarma.snapshotItem(0).click();
                        //                    }
                    }
                    catch (err) {
                    }


                    unsafeWindow.PLAYER.getVillage(cloneInto(task.villageid, unsafeWindow)).FARMNUMBER = task.tasknumber;
                    setTimeout(function () {
                        if (unsafeWindow.Stopped == false) {
                            unsafeWindow.StartEvent();
                        }
                    }, RandomXtoY(500, 2000));
                    return
                }

            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));


}

function FarmajGoldClub2(stevilkafarme, repeat,naselje2) {

    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }
    var Farmlista = unsafeWindow.PLAYER.FARMLISTE[stevilkafarme];
    var lid = Farmlista.lid;
    var lastfarm = Farmlista.farmnumber;
    var naselje = Farmlista.villageid;
    if(naselje2)
        naselje = naselje2;
    var EnoteDoma22 = Farmlista.troopshome;

    unsafeWindow.SpremeniStatus("sending to farmlist " + Farmlista.ime + " <progress value='50' max='100'></progress>");
    try {
        var link = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK;
    }
    catch (err) {
        return;
    }
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: "GET",
            url: link + "/build.php?newdid=" + naselje + "&id=39&tt=99&gid=16",
            headers: {},
            onload: function (response1) {
  
                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = response1.responseText;

                var test124 = PreveriLoginTask(doc,link + "/build.php?newdid=" + naselje + "&id=39&tt=99&gid=16");

                if (unsafeWindow.Stopped || !test124) {
                    return;
                }

                var obmocjefarmlista = doc.getElementById("list" + lid);
                if (obmocjefarmlista) {
                    if (obmocjefarmlista.getElementsByClassName("listContent hide").length > 0) {
                        var drugoobmocje = obmocjefarmlista;
                        var maxstetje = 0;
                        var maxstetje2 = 0;
                        while (drugoobmocje.getElementsByTagName("a").length == 0 && maxstetje <= 100) {
                            drugoobmocje = drugoobmocje.previousSibling;
                            while (drugoobmocje.nodeName == "#text" && maxstetje2 <= 100) {
                                drugoobmocje = drugoobmocje.previousSibling;
                                maxstetje2++;
                            }
                            if (drugoobmocje.nodeName == "#text") {
                                break;
                            }
                            maxstetje++;
                        }
                        try {
                            var novonas = drugoobmocje.getElementsByTagName("a")[0].getAttribute("name").match(/[\d\.]+/g)[0] * 1;
                        }
                        catch (err)
                        {  }
                        if (naselje2 || !novonas) {
                            unsafeWindow.SpremeniStatus("Failed to send to farmlist " + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + ". Farmlist probably removed from travian. Remove it from TT and add it again. <progress value='100' max='100'></progress>");
                            var cas = new Date();
                            cas = cas.getTime();
                            unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Failed to send to farmlist " + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + ". You probably dont have rally point in farming village.", 'Farmlist', 0));
                            //dodaj log
                            setTimeout(function () { unsafeWindow.Start(); }, 2000);
                            return;
                        }
                        else {
                            //ponovno frmaj
                            FarmajGoldClub2(stevilkafarme, repeat, novonas);
                        }
                    }
                    else {
                        // ok





                        var vrsticefarm = obmocjefarmlista.getElementsByClassName("slotRow");

                        var EnoteDoma = new Array()
                        var konec = false;
                        var SlotiZaPosiljanje = new Array();
                        var pravi = false;
                        var stnepravilnih = 0;
                        var PrviSlot = 0;
                        var ZadniSlot = 0;
                        var countt = 0;
                        var doslota1 = false;
                        var casZdaj = new Date();

                        if (casZdaj.getTime() - Farmlista.completedtime < 300000) {
                            doslota1 = true;
                        }

                        var zacetek = doc.body.innerHTML.indexOf("Travian.Game.RaidList.setData(") + "Travian.Game.RaidList.setData(".length;
                        var konec222 = doc.body.innerHTML.indexOf("\n", zacetek) - 2;
                        var objektstring = doc.body.innerHTML.substring(zacetek, konec222);
                        var objekt = eval("(" + objektstring + ")");

                        if (!objekt[lid]) {
                            unsafeWindow.SpremeniStatus("Failed to send to farmlist " + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + ". Farmlist probably removed from travian. Remove it from TT and add it again. <progress value='100' max='100'></progress>");
                            var cas = new Date();
                            cas = cas.getTime();
                            unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Failed to send to farmlist " + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + ". Unknown error.", 'Farmlist', 0));
                            //dodaj log
                            setTimeout(function () { unsafeWindow.Start(); }, 2000);
                            return;

                            return;
                        }

                        var enote = objekt[lid].troops;
                        var sloti2 = objekt[lid].slots;







                        var doSlota = Farmlista.lastfarm

                        for (var StevilkaSlota in sloti2) {
                            if (StevilkaSlota == "toType") {
                                continue;
                            }
                            countt++;
                            if (countt == 1) {
                                PrviSlot = StevilkaSlota;
                            }


                            if (doslota1) {
                                pravi = true;
                            }

                            if (StevilkaSlota == lastfarm & !doslota1) {
                                pravi = true;
                                continue;
                            }
                            else if (pravi) {

                                var slott = doc.getElementById("slot" + StevilkaSlota).parentNode.parentNode;

                                try {
                                    var tipreporta = slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                                    var linkreporta = link + "/" + slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("a")[0].getAttribute("href");
                                    Farmlista.Slots.pridobiSlot(StevilkaSlota).nastaviZadnjiReport(linkreporta, tipreporta);
                                }
                                catch (err) {
                                    //         napaka repo
                                }

                                var ex = ".//td[@class='lastRaid']";
                                var Meni = doc.evaluate(ex, slott, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                                if (Meni.snapshotLength) {
                                    try {
                                        var pravilenreportt = false;
                                        try {

                                            if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 2) {
                                                //rumen report
                                                var tareporttTest1 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportIzgubeMajnseOdPlena(linkreporta);
                                                var tareporttTest2 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportSkupneIzgubeMajnseOdPlena(linkreporta);
                                                if ((tareporttTest1 && Farmlista.analysereportsbeforesending && Farmlista.zadnjireportpozidivnidonos) || (tareporttTest2 && Farmlista.analysereportsbeforesending && Farmlista.zadnji5reportpozidivnidonos)) {
                                                    pravilenreportt = true;
                                                    //pravi

                                                }


                                            }
                                        } catch (err) { }

                                        if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 1 || pravilenreportt) {

                                            for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                                var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;

                                                if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                    konec = true;
                                                    break;
                                                }
                                                enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                            }

                                            if (konec) {
                                                break;
                                            }
                                            else {
                                                SlotiZaPosiljanje.push(StevilkaSlota);
                                                ZadniSlot = StevilkaSlota;
                                            }
                                        }
                                        else {
                                            stnepravilnih++;
                                            ZadniSlot = StevilkaSlota;
                                        }
                                    }
                                    catch (err) {

                                        for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                            var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;
                                            if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                konec = true;
                                                break;
                                            }
                                            enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                        }

                                        if (konec) {
                                            break;
                                        }
                                        else {
                                            SlotiZaPosiljanje.push(StevilkaSlota);
                                            ZadniSlot = StevilkaSlota;
                                        }
                                    }
                                }
                                if (StevilkaSlota == doSlota & doslota1) {
                                    konec = true;
                                    break;
                                }


                            }

                        }



                        var dovoljenoponovno = false;

                        if (SlotiZaPosiljanje.length == 0 & stnepravilnih == 0) {
                            dovoljenoponovno = true;
                        }

                        if (!konec && repeat == "true" || dovoljenoponovno) {//od zacetka
                            for (var StevilkaSlota in sloti2) {

                                if (konec) {
                                    break;
                                }
                                else {
                                    if (StevilkaSlota == "toType") {
                                        continue;
                                    }
                                    var slott = doc.getElementById("slot" + StevilkaSlota).parentNode.parentNode;

                                    try {
                                        var tipreporta = slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                                        var linkreporta = link + "/" + slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("a")[0].getAttribute("href");
                                        Farmlista.Slots.pridobiSlot(StevilkaSlota).nastaviZadnjiReport(linkreporta, tipreporta);
                                    }
                                    catch (err) {
                                        //                                        ("napaka repo");
                                    }
                                    var ex = ".//td[@class='lastRaid']";
                                    var Meni = doc.evaluate(ex, slott, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                                    if (Meni.snapshotLength) {
                                        try {
                                            var pravilenreportt = false;
                                            try {
                                                if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 2) {
                                                    //("rumen report");
                                                    var tareporttTest1 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportIzgubeMajnseOdPlena(linkreporta);
                                                    var tareporttTest2 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportSkupneIzgubeMajnseOdPlena(linkreporta);
                                                    if ((tareporttTest1 && Farmlista.analysereportsbeforesending && Farmlista.zadnjireportpozidivnidonos) || (tareporttTest2 && Farmlista.analysereportsbeforesending && Farmlista.zadnji5reportpozidivnidonos)) {
                                                        pravilenreportt = true;
                                                        //("tareporttTest1:" + tareporttTest1);
                                                        //("tareporttTest2:" + tareporttTest2);
                                                        //(Farmlista.Slots.pridobiSlot(StevilkaSlota));
                                                    }

                                                }
                                            } catch (err) { }

                                            if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 1 || pravilenreportt) {
                                                for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                                    var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;
                                                    (enote[StevilkaEnote] + " - " + EnoteDoma22[StevilkaEnote - 1] + " < " + sloti2[StevilkaSlota]["troops"][StevilkaEnote])
                                                    if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                        konec = true;
                                                        break;
                                                    }
                                                    enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                                }
                                                if (konec) {
                                                    break;
                                                }
                                                else {
                                                    SlotiZaPosiljanje.push(StevilkaSlota);
                                                    ZadniSlot = StevilkaSlota;
                                                }
                                            }

                                            else {
                                                stnepravilnih++;
                                                ZadniSlot = StevilkaSlota;
                                            }
                                        }
                                        catch (err) {
                                            for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                                var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;

                                                if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                    konec = true;
                                                    break;
                                                }
                                                enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                            }
                                            if (konec) {
                                                break;
                                            }
                                            else {
                                                SlotiZaPosiljanje.push(StevilkaSlota);
                                                ZadniSlot = StevilkaSlota;
                                            }
                                        }
                                    }
                                }

                                if (StevilkaSlota == lastfarm) {
                                    break;
                                }

                            }
                        }


                        var trenutencas = new Date();
                        var repanaliz = Farmlista.Slots.preveriAnalizoReportov();

                        try {
                            //(repanaliz.reports.length);
                            //(Farmlista.reportsanalysed < trenutencas.getTime() + 300000);
                            if (Farmlista.reportsanalysed < trenutencas.getTime() + 300000 && repanaliz.reports.length > 0) {
                                if (!unsafeWindow.Stopped) {
                                    unsafeWindow.SpremeniStatus("Analysing reports of goldclub farmlist");
                                    document.getElementById("izvediTask").setAttribute("task", JSON.stringify(repanaliz));
                                    document.getElementById("izvediTask").click();
                                }
                                return;
                            }
                        }
                        catch (err)
                        { }
                        //                        (SlotiZaPosiljanje);



                        //                        return;

                        if (SlotiZaPosiljanje.length > 0) {
                            if (Farmlista.farmnumber == 0) {
                                Farmlista.farmnumber = SlotiZaPosiljanje[0];
                                Farmlista.lastfarm = SlotiZaPosiljanje[0];
                            }
                            //                            setTimeout(function () {
                            //                                GM.xmlHttpRequest({
                            //                                    method: "GET",
                            //                                    url: link + "/build.php?gid=16&tt=99&newdid=" + naselje,
                            //                                    headers: {
                            //                                        Referer: link + "/build.php?id=39&tt=99"

                            //                                    },
                            //                                    onload: function (response2) {
                            //                                        if (unsafeWindow.Stopped) {
                            //                                            unsafeWindow.SpremeniStatus("Stopped");
                            //                                            return;
                            //                                        }
                            unsafeWindow.SpremeniStatus("sending to farmlist " + Farmlista.ime + " <progress value='67' max='100'></progress>");

                            //                                        var doc = document.implementation.createHTMLDocument('My title');
                            //                                        var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                            //                                        doc.documentElement.appendChild(body);
                            //                                        doc.body.innerHTML = response2.responseText;

                            //                                        var test124 = PreveriLoginTask(doc);
                            //                                        if (unsafeWindow.Stopped || !test124) {
                            //                                            return;
                            //                                        }


                            var a = doc.getElementsByName("a")[0].value;


                            var data = "action=startRaid&a=" + a + "&sort=distance&direction=asc&lid=" + lid;
                            for (var slot = 0; slot < SlotiZaPosiljanje.length; slot++) {
                                data += "&slot%5B" + SlotiZaPosiljanje[slot] + "%5D=on";
                            }

                            //"&slot%5B12798%5D=on&slot%5B12799%5D=on
                            setTimeout(function () {
                                GM.xmlHttpRequest({
                                    method: "POST",
                                    url: link + "/build.php?gid=16&tt=99",
                                    data: data,
                                    headers: {
                                        "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                        "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                        Referer: link + "/build.php?id=39&tt=99",
                                        "X-Requested-With": "XMLHttpRequest",
                                        "X-Request": "JSON"

                                    },
                                    onload: function (response3) {
                                        if (unsafeWindow.Stopped) {
                                            unsafeWindow.SpremeniStatus("Stopped");
                                            return;
                                        }
                                        var doc = document.implementation.createHTMLDocument('My title');
                                        var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                        doc.documentElement.appendChild(body);
                                        doc.body.innerHTML = response3.responseText;

                                        var test124 = PreveriLoginTask(doc,link + "/build.php?gid=16&tt=99");
                                        if (unsafeWindow.Stopped || !test124) {
                                            return;
                                        }

                                        unsafeWindow.SpremeniStatus("sending to farmlist " + Farmlista.ime + " <progress value='100' max='100'></progress>");
                                        var cas = new Date();
                                        cas = cas.getTime();
                                        if (unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber == ZadniSlot || unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber == 0 || unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber + "" == "undefined") {
                                            unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm = PrviSlot;
                                        }
                                        else {
                                            unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm = unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber;
                                        }
                                        unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber = ZadniSlot;

                                        if (repeat == "true") {

                                            unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                                        }
                                        else {
                                            if (!konec) {
                                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completed = true;
                                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completedtime = cas;
                                            }
                                            else {
                                                while (stevilkafarme > 0 & unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].joinwithprevious) {//nastavi prvi farmlisti (ki nima join) cas
                                                    stevilkafarme = stevilkafarme - 1;
                                                }
                                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                                            }

                                        }
                                        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData('Troops sent to farmlist ' + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + "; sent to " + SlotiZaPosiljanje.length + " farms:" + SlotiZaPosiljanje, 'Farmlist', 0));
                                        //dodaj log
                                        setTimeout(function () { unsafeWindow.Start(); }, RandomXtoY(1000, 5000));
                                        return;

                                    },
                                    onerror: function (responseDetails) {

                                        setTimeout(function () {

                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    },
                                    ontimeout: function (responseDetails) {

                                        setTimeout(function () {

                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    },
                                    onabort: function (responseDetails) {

                                        setTimeout(function () {

                                            if (unsafeWindow.Stopped == false) {
                                                unsafeWindow.StartEvent();
                                            }
                                        }, 60000);
                                    }
                                });
                            }, RandomXtoY(1000, 5000));





                            //                                    },
                            //                                    onerror: function (responseDetails) {

                            //                                        setTimeout(function () {

                            //                                            if (unsafeWindow.Stopped == false) {
                            //                                                unsafeWindow.StartEvent();
                            //                                            }
                            //                                        }, 60000);
                            //                                    },
                            //                                    ontimeout: function (responseDetails) {

                            //                                        setTimeout(function () {

                            //                                            if (unsafeWindow.Stopped == false) {
                            //                                                unsafeWindow.StartEvent();
                            //                                            }
                            //                                        }, 60000);
                            //                                    },
                            //                                    onabort: function (responseDetails) {

                            //                                        setTimeout(function () {

                            //                                            if (unsafeWindow.Stopped == false) {
                            //                                                unsafeWindow.StartEvent();
                            //                                            }
                            //                                        }, 60000);
                            //                                    }
                            //                                });

                            //                            }, RandomXtoY(500, 2000));

                        }
                        else {


                            var cas = new Date();
                            cas = cas.getTime();
                            if (ZadniSlot != 0) {
                                if (unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber == ZadniSlot || unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber == 0 || unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber + "" == "undefined") {
                                    unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm = PrviSlot;
                                }
                                else {
                                    unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm = unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber;
                                }
                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber = ZadniSlot;
                            }
                            if (repeat == "true") {

                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                            }
                            else {
                                if (!konec) {
                                    unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completed = true;
                                    unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completedtime = cas;
                                }
                                else {
                                    while (stevilkafarme > 0 & unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].joinwithprevious) {//nastavi prvi farmlisti (ki nima join) cas
                                        stevilkafarme = stevilkafarme - 1;
                                    }
                                    unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                                }

                            }
                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData('Couldnt send any troops to farmlist ' + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime, 'Farmlist', 0));
                            setTimeout(function () { unsafeWindow.Start(); });
                            return;
                        }







                        return;

                        for (var i = 0; i < vrsticefarm.length; i++) {// StevilkaSlota in sloti2
                            var StevilkaSlota = vrsticefarm[i].getElementsByTagName("input")[0].getAttribute("id").match(/[\d\.]+/g)[0] * 1;
                            countt++;
                            if (countt == 1) {
                                PrviSlot = StevilkaSlota;
                            }

                            if (doslota1) {
                                pravi = true;
                            }

                            if (StevilkaSlota == lastfarm & !doslota1) {
                                pravi = true;
                                continue;
                            }
                            else if (pravi) {

                                var slott = vrsticefarm[i];
                                /*
                                ("StevilkaSlota:" + StevilkaSlota);
                                (sloti2);
                                (slott);*/
                                try {
                                    var tipreporta = slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                                    var linkreporta = link + "/" + slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("a")[0].getAttribute("href");
                                    Farmlista.Slots.pridobiSlot(StevilkaSlota).nastaviZadnjiReport(linkreporta, tipreporta);
                                }
                                catch (err) {
                                    //("napaka repo");
                                }

                                var ex = ".//td[@class='lastRaid']";
                                var Meni = doc.evaluate(ex, slott, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                                if (Meni.snapshotLength) {
                                    try {
                                        var pravilenreportt = false;
                                        try {

                                            if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 2) {
                                                //("rumen report");
                                                var tareporttTest1 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportIzgubeMajnseOdPlena(linkreporta);
                                                var tareporttTest2 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportSkupneIzgubeMajnseOdPlena(linkreporta);
                                                if ((tareporttTest1 && Farmlista.analysereportsbeforesending && Farmlista.zadnjireportpozidivnidonos) || (tareporttTest2 && Farmlista.analysereportsbeforesending && Farmlista.zadnji5reportpozidivnidonos)) {
                                                    pravilenreportt = true;

                                                }
                                                //("tareporttTest1:" + tareporttTest1);
                                                //("tareporttTest2:" + tareporttTest2);
                                                //(Farmlista.Slots.pridobiSlot(StevilkaSlota));

                                            }
                                        } catch (err) { }

                                        if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 1 || pravilenreportt) {

                                            for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                                var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;

                                                if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                    konec = true;
                                                    break;
                                                }
                                                enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                            }

                                            if (konec) {
                                                break;
                                            }
                                            else {
                                                SlotiZaPosiljanje.push(StevilkaSlota);
                                                ZadniSlot = StevilkaSlota;
                                            }
                                        }
                                        else {
                                            stnepravilnih++;
                                            ZadniSlot = StevilkaSlota;
                                        }
                                    }
                                    catch (err) {

                                        for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                            var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;
                                            if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                konec = true;
                                                break;
                                            }
                                            enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                        }

                                        if (konec) {
                                            break;
                                        }
                                        else {
                                            SlotiZaPosiljanje.push(StevilkaSlota);
                                            ZadniSlot = StevilkaSlota;
                                        }
                                    }
                                }
                                if (StevilkaSlota == doSlota & doslota1) {
                                    konec = true;
                                    break;
                                }


                            }

                        }




















                    }
                }
                else {
                    //                    ("ni farmlsite");
                    unsafeWindow.SpremeniStatus("Failed to send to farmlist " + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + ". Farmlist probably removed from travian. Remove it from TT and add it again. <progress value='100' max='100'></progress>");
                    var cas = new Date();
                    cas = cas.getTime();
                    unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Failed to send to farmlist " + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + ". Farmlist probably removed from travian. Remove it from TT and add it again.", 'Farmlist', 0));
                    //dodaj log
                    setTimeout(function () { unsafeWindow.Start(); }, 2000);
                    return;
                }

               
            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));
}

function FarmajGoldClub(stevilkafarme, repeat) {
    //FarmajGoldClub2(stevilkafarme, repeat);
    //return;
    if (unsafeWindow.Stopped) {
        unsafeWindow.SpremeniStatus("Stopped");
        return;
    }
    var Farmlista = unsafeWindow.PLAYER.FARMLISTE[stevilkafarme];
    var lid = Farmlista.lid;
    var lastfarm = Farmlista.farmnumber;
    var naselje = Farmlista.villageid;
    var EnoteDoma22 = Farmlista.troopshome;
    unsafeWindow.SpremeniStatus("sending to farmlist " + Farmlista.ime + " <progress value='0' max='100'></progress>");
    try {
        var link = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK;
    }
    catch (err) {
        return;
    }
    setTimeout(function () {
        GM.xmlHttpRequest({
            method: "GET",
            url: link + "/dorf1.php",
            headers: {},
            onload: function (response1) {
                if (unsafeWindow.Stopped) {
                    unsafeWindow.SpremeniStatus("Stopped");
                    return;
                }
                var dodd = "";
                if (true) {
                    dodd = "&ajaxToken=" + getAjaxToken(responseDetails.responseText)
                }


                setTimeout(function () {
                    GM.xmlHttpRequest({
                        method: "POST",
                        url: link + "/ajax.php?cmd=raidListSlots",
                        data: "cmd=raidListSlots&lid=" + lid + dodd,
                        headers: {
                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                            Referer: link + "/build.php?id=39&tt=99",
                            "X-Requested-With": "XMLHttpRequest",
                            "X-Request": "JSON"

                        },
                        onload: function (response1) {
                            if (response1.responseText == "") {
                                setTimeout(function () {
                                    FarmajGoldClub2(stevilkafarme, repeat);
                                }, RandomXtoY(1000, 5000));
                            }
                            if (unsafeWindow.Stopped) {
                                unsafeWindow.SpremeniStatus("Stopped");
                                return;
                            }
                            unsafeWindow.SpremeniStatus("sending to farmlist " + Farmlista.ime + " <progress value='33' max='100'></progress>");
                            var podatkiFarmlist = eval("(" + response1.responseText + ")");
                            testlog(podatkiFarmlist)
                            if (podatkiFarmlist.response) {
                                podatkiFarmlist = podatkiFarmlist.response;
                            }
                            if (podatkiFarmlist.error) {
                                unsafeWindow.SpremeniStatus("Failed to send to farmlist " + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + ". Farmlist probably removed from travian. Remove it from TT and add it again. <progress value='100' max='100'></progress>");
                                var cas = new Date();
                                cas = cas.getTime();
                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("Failed to send to farmlist " + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + ". Farmlist probably removed from travian. Remove it from TT and add it again.", 'Farmlist', 0));
                                //dodaj log
                                setTimeout(function () { unsafeWindow.Start(); }, 2000);
                                return;
                            }

                            var enote = podatkiFarmlist.data.list.troops;
                            var sloti2 = podatkiFarmlist.data.list.slots;

                            var doc2 = document.implementation.createHTMLDocument('My title');
                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                            doc2.documentElement.appendChild(body);
                            doc2.body.innerHTML = podatkiFarmlist.data.html;
                            
                            //var test124 = PreveriLoginTask(doc2);
                            if (unsafeWindow.Stopped) {
                                return;
                            }


                            var EnoteDoma = new Array()
                            var konec = false;
                            var SlotiZaPosiljanje = new Array();
                            var pravi = false;
                            var stnepravilnih = 0;
                            var PrviSlot = 0;
                            var ZadniSlot = 0;
                            var countt = 0;
                            var doslota1 = false;
                            var casZdaj = new Date();

                            if (casZdaj.getTime() - unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completedtime < 300000) {
                                doslota1 = true;
                            }

                            var doSlota = unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm

                            for (var StevilkaSlota in sloti2) {
                                if (StevilkaSlota == "toType") {
                                    continue;
                                }
                                countt++;
                                if (countt == 1) {
                                    PrviSlot = StevilkaSlota;
                                }
                                if (doslota1) {
                                    pravi = true;
                                }

                                if (StevilkaSlota == lastfarm & !doslota1) {
                                    pravi = true;
                                    continue;
                                }
                                else if (pravi) {

                                    var slott = doc2.getElementById("slot" + StevilkaSlota).parentNode.parentNode;
                                    /*
                                    ("StevilkaSlota:" + StevilkaSlota);
                                    (sloti2);
                                    (slott);*/
                                    try {
                                        var tipreporta = slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                                        var linkreporta = link + "/" + slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("a")[0].getAttribute("href");
                                        Farmlista.Slots.pridobiSlot(StevilkaSlota).nastaviZadnjiReport(linkreporta, tipreporta);
                                    }
                                    catch (err) {
                                        //("napaka repo");
                                    }

                                    var ex = ".//td[@class='lastRaid']";
                                    var Meni = doc2.evaluate(ex, slott, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

                                    if (Meni.snapshotLength) {
                                        try {
                                            var pravilenreportt = false;
                                            try {

                                                if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 2) {
                                                    //("rumen report");
                                                    var tareporttTest1 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportIzgubeMajnseOdPlena(linkreporta);
                                                    var tareporttTest2 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportSkupneIzgubeMajnseOdPlena(linkreporta);
                                                    if ((tareporttTest1 && Farmlista.analysereportsbeforesending && Farmlista.zadnjireportpozidivnidonos) || (tareporttTest2 && Farmlista.analysereportsbeforesending && Farmlista.zadnji5reportpozidivnidonos)) {
                                                        pravilenreportt = true;
                                               

                                                    }
                                                    //("tareporttTest1:" + tareporttTest1);
                                                    //("tareporttTest2:" + tareporttTest2);
                                                    //(Farmlista.Slots.pridobiSlot(StevilkaSlota));

                                                }
                                            } catch (err) { }

                                            if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 1 || pravilenreportt) {

                                                for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                                    var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;

                                                    if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                        konec = true;
                                                        break;
                                                    }
                                                    enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                                }

                                                if (konec) {
                                                    break;
                                                }
                                                else {
                                                    SlotiZaPosiljanje.push(StevilkaSlota);
                                                    ZadniSlot = StevilkaSlota;
                                                }
                                            }
                                            else {
                                                stnepravilnih++;
                                                ZadniSlot = StevilkaSlota;
                                            }
                                        }
                                        catch (err) {

                                            for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                                var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;
                                                if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                    konec = true;
                                                    break;
                                                }
                                                enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                            }

                                            if (konec) {
                                                break;
                                            }
                                            else {
                                                SlotiZaPosiljanje.push(StevilkaSlota);
                                                ZadniSlot = StevilkaSlota;
                                            }
                                        }
                                    }
                                    if (StevilkaSlota == doSlota & doslota1) {
                                        konec = true;
                                        break;
                                    }


                                }

                            }



                            var dovoljenoponovno = false;

                            if (SlotiZaPosiljanje.length == 0 & stnepravilnih == 0) {
                                dovoljenoponovno = true;
                            }

                            if (!konec && repeat == "true" || dovoljenoponovno) {//od zacetka
                                for (var StevilkaSlota in sloti2) {

                                    if (konec) {
                                        break;
                                    }
                                    else {
                                        if (StevilkaSlota == "toType") {
                                            continue;
                                        }

                                        var slott = doc2.getElementById("slot" + StevilkaSlota).parentNode.parentNode;
                                        /*("StevilkaSlota2:" + StevilkaSlota);
                                        (sloti2);
                                        (slott);*/
                                        try {
                                            var tipreporta = slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1;
                                            var linkreporta = link + "/" + slott.getElementsByClassName("lastRaid")[0].getElementsByTagName("a")[0].getAttribute("href");
                                            Farmlista.Slots.pridobiSlot(StevilkaSlota).nastaviZadnjiReport(linkreporta, tipreporta);
                                        }
                                        catch (err) {
                                            //("napaka repo");
                                        }
                                        var ex = ".//td[@class='lastRaid']";
                                        var Meni = doc2.evaluate(ex, slott, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);


                                        if (Meni.snapshotLength) {
                                            try {
                                                var pravilenreportt = false;
                                                try {

                                                    if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 2) {
                                                        //("rumen report");
                                                        var tareporttTest1 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportIzgubeMajnseOdPlena(linkreporta);
                                                        var tareporttTest2 = Farmlista.Slots.pridobiSlot(StevilkaSlota).reportSkupneIzgubeMajnseOdPlena(linkreporta);
                                                        if ((tareporttTest1 && Farmlista.analysereportsbeforesending && Farmlista.zadnjireportpozidivnidonos) || (tareporttTest2 && Farmlista.analysereportsbeforesending && Farmlista.zadnji5reportpozidivnidonos)) {
                                                            pravilenreportt = true;

                                                            //("tareporttTest1:" + tareporttTest1);
                                                            //("tareporttTest2:" + tareporttTest2);
                                                            //(Farmlista.Slots.pridobiSlot(StevilkaSlota));
                                                        }

                                                    }
                                                } catch (err) { }

                                                if (Meni.snapshotItem(0).getElementsByTagName("img")[0].getAttribute("class").match(/[\d\.]+/g)[0] * 1 == 1 || pravilenreportt) {
                                                    for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                                        var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;

                                                        if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                            konec = true;
                                                            break;
                                                        }
                                                        enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                                    }
                                                    if (konec) {
                                                        break;
                                                    }
                                                    else {
                                                        SlotiZaPosiljanje.push(StevilkaSlota);
                                                        ZadniSlot = StevilkaSlota;
                                                    }
                                                }

                                                else {
                                                    stnepravilnih++;
                                                    ZadniSlot = StevilkaSlota;
                                                }
                                            }
                                            catch (err) {
                                                for (var StevilkaEnote in sloti2[StevilkaSlota]["troops"]) {
                                                    var skupaj = enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1;

                                                    if (enote[StevilkaEnote] * 1 - EnoteDoma22[StevilkaEnote - 1] * 1 < sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1) {
                                                        konec = true;
                                                        break;
                                                    }
                                                    enote[StevilkaEnote] = enote[StevilkaEnote] * 1 - sloti2[StevilkaSlota]["troops"][StevilkaEnote] * 1
                                                }
                                                if (konec) {
                                                    break;
                                                }
                                                else {
                                                    SlotiZaPosiljanje.push(StevilkaSlota);
                                                    ZadniSlot = StevilkaSlota;
                                                }
                                            }
                                        }
                                    }

                                    if (StevilkaSlota == lastfarm) {
                                        break;
                                    }

                                }
                            }


                            var trenutencas = new Date();
                            var repanaliz = Farmlista.Slots.preveriAnalizoReportov();
                            try {
                                //(repanaliz.reports.length);
                                //(Farmlista.reportsanalysed < trenutencas.getTime() + 300000);
                                if (Farmlista.analysereportsbeforesending&&Farmlista.reportsanalysed < trenutencas.getTime() + 300000 && repanaliz.reports.length > 0) {
                                    if (!unsafeWindow.Stopped) {
                                        unsafeWindow.SpremeniStatus("Analysing reports of goldclub farmlist");
                                        document.getElementById("izvediTask").setAttribute("task", JSON.stringify(repanaliz));
                                        document.getElementById("izvediTask").click();
                                    }
                                    return;
                                }
                            }
                            catch (err)
                            { }
                            //("lahko posljem na farmlisto")
                            //return;
                            		

                            //return;
                            testlog(SlotiZaPosiljanje)
                            if (SlotiZaPosiljanje.length > 0) {
                                if (Farmlista.farmnumber == 0) {
                                    Farmlista.farmnumber = SlotiZaPosiljanje[0];
                                    Farmlista.lastfarm = SlotiZaPosiljanje[0];
                                }
                                setTimeout(function () {
                                    GM.xmlHttpRequest({
                                        method: "GET",
                                        url: link + "/build.php?gid=16&tt=99&newdid=" + naselje,
                                        headers: {
                                            Referer: link + "/build.php?id=39&tt=99"

                                        },
                                        onload: function (response2) {
                                            if (unsafeWindow.Stopped) {
                                                unsafeWindow.SpremeniStatus("Stopped");
                                                return;
                                            }
                                            unsafeWindow.SpremeniStatus("sending to farmlist " + Farmlista.ime + " <progress value='67' max='100'></progress>");

                                            var doc = document.implementation.createHTMLDocument('My title');
                                            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                            doc.documentElement.appendChild(body);
                                            doc.body.innerHTML = response2.responseText;

                                            var test124 = PreveriLoginTask(doc,link + "/build.php?gid=16&tt=99&newdid=" + naselje);
                                            if (unsafeWindow.Stopped || !test124) {
                                                return;
                                            }

                                            var nekdiv = document.createElement("div");
                                            nekdiv.innerHTML = podatkiFarmlist.data.html;
                                            var a = doc.getElementsByName("a")[0].value;


                                            var data = "action=startRaid&a=" + a + "&sort=distance&direction=asc&lid=" + lid;
                                            for (var slot = 0; slot < SlotiZaPosiljanje.length; slot++) {
                                                data += "&slot%5B" + SlotiZaPosiljanje[slot] + "%5D=on";
                                            }

                                            //"&slot%5B12798%5D=on&slot%5B12799%5D=on
                                            setTimeout(function () {
                                                GM.xmlHttpRequest({
                                                    method: "POST",
                                                    url: link + "/build.php?gid=16&tt=99",
                                                    data: data,
                                                    headers: {
                                                        "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                                                        "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                                                        Referer: link + "/build.php?id=39&tt=99",
                                                        "X-Requested-With": "XMLHttpRequest",
                                                        "X-Request": "JSON"

                                                    },
                                                    onload: function (response3) {
                                                        if (unsafeWindow.Stopped) {
                                                            unsafeWindow.SpremeniStatus("Stopped");
                                                            return;
                                                        }
                                                        var doc = document.implementation.createHTMLDocument('My title');
                                                        var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                                                        doc.documentElement.appendChild(body);
                                                        doc.body.innerHTML = response3.responseText;
                                                        testlog(response3.responseText)
                                                        var test124 = PreveriLoginTask(doc,link + "/build.php?gid=16&tt=99");
                                                        if (unsafeWindow.Stopped || !test124) {
                                                            return;
                                                        }

                                                        unsafeWindow.SpremeniStatus("sending to farmlist " + Farmlista.ime + " <progress value='100' max='100'></progress>");
                                                        /*var cas = new Date();
                                                        cas = cas.getTime();
                                                        if (unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber == ZadniSlot || unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber == 0 || unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber + "" == "undefined") {
                                                        unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm = PrviSlot;
                                                        }
                                                        else {
                                                        unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm = unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber;
                                                        }
                                                        unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber = ZadniSlot;

                                                        if (repeat == "true") {

                                                        unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                                                        }
                                                        else {
                                                        if (!konec) {
                                                        unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completed = true;
                                                        unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completedtime = cas;
                                                        }
                                                        else {
                                                        while (stevilkafarme > 0 & unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].joinwithprevious) {//nastavi prvi farmlisti (ki nima join) cas
                                                        stevilkafarme = stevilkafarme - 1;
                                                        }
                                                        unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                                                        }
                                                        
                                                        }*/
                                                        unsafeWindow.PLAYER.povecajCasFarmliste2(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].tasknumber,cloneInto(PrviSlot, unsafeWindow) , cloneInto(ZadniSlot, unsafeWindow), cloneInto(konec, unsafeWindow));
                                                        unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData('Troops sent to farmlist ' + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime + "; sent to " + SlotiZaPosiljanje.length + " farms:" + SlotiZaPosiljanje, 'Farmlist', 0));
                                                        //dodaj log

                                                        setTimeout(function () { unsafeWindow.Start(); }, RandomXtoY(1000, 5000));
                                                        return;

                                                    },
                                                    onerror: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    },
                                                    ontimeout: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    },
                                                    onabort: function (responseDetails) {

                                                        setTimeout(function () {

                                                            if (unsafeWindow.Stopped == false) {
                                                                unsafeWindow.StartEvent();
                                                            }
                                                        }, 60000);
                                                    }
                                                });
                                            }, RandomXtoY(1000, 5000));





                                        },
                                        onerror: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        ontimeout: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        },
                                        onabort: function (responseDetails) {

                                            setTimeout(function () {

                                                if (unsafeWindow.Stopped == false) {
                                                    unsafeWindow.StartEvent();
                                                }
                                            }, 60000);
                                        }
                                    });

                                }, RandomXtoY(1000, 5000));

                            }
                            else {


                                //farmlista-json
                                //PrviSlot: slotid(od traviana) prvega slota na farmlisti
                                //ZadniSlot: slotid(od traviana) slota do katerega je bilo poslano
                                //konec: true ce ni moglo poslat do konca farmliste zaradi premalo enot, false ce je prislo do konca cele farmliste.
                                //unsafeWindow.PLAYER.povecajCasFarmliste2(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].tasknumber, PrviSlot, ZadniSlot, konec);
                                unsafeWindow.PLAYER.povecajCasFarmliste2(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].tasknumber, cloneInto(PrviSlot, unsafeWindow), cloneInto(ZadniSlot, unsafeWindow), cloneInto(konec, unsafeWindow));

                                /*var cas = new Date();
                                cas = cas.getTime();
                                if (ZadniSlot != 0) {
                                if (unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber == ZadniSlot || unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber == 0 || unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber + "" == "undefined") {
                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm = PrviSlot;
                                }
                                else {
                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].lastfarm = unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber;
                                }
                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].farmnumber = ZadniSlot;
                                }
                                if (repeat == "true") {

                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                                }
                                else {
                                if (!konec) {
                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completed = true;
                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].completedtime = cas;
                                }
                                else {
                                while (stevilkafarme > 0 & unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].joinwithprevious) {//nastavi prvi farmlisti (ki nima join) cas
                                stevilkafarme = stevilkafarme - 1;
                                }
                                unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].date = cas + RandomXtoY(unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmin * 60000, unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].intervalmax * 60000);
                                }

                                }*/
                                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData('Couldnt send any troops to farmlist ' + unsafeWindow.PLAYER.FARMLISTE[stevilkafarme].ime, 'Farmlist', 0));
                                setTimeout(function () { unsafeWindow.Start(); }, RandomXtoY(1000, 5000));
                                return;
                            }


                        },
                        onerror: function (responseDetails) {
                            //alert("error1");
                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        },
                        ontimeout: function (responseDetails) {

                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        },
                        onabort: function (responseDetails) {

                            setTimeout(function () {

                                if (unsafeWindow.Stopped == false) {
                                    unsafeWindow.StartEvent();
                                }
                            }, 60000);
                        }
                    });

                }, RandomXtoY(1000, 5000));
            },
            onerror: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            ontimeout: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            },
            onabort: function (responseDetails) {

                setTimeout(function () {

                    if (unsafeWindow.Stopped == false) {
                        unsafeWindow.StartEvent();
                    }
                }, 60000);
            }
        });

    }, RandomXtoY(1000, 5000));
}

function MenjajSurovineNPC() {
    return;
    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("zacenjam", "NPC", 29925));

    var Menjava = {
        whenwood: 0,
        whenclay: 0,
        wheniron: 0,
        whengrain: 0.95,
        wood: 0.3,
        clay: 0.4,
        iron: 0.3,
        grain: 0,
        maxwood: 0.995,
        maxclay: 0.995,
        maxiron: 0.995,
        maxgrain: 0.8,
        pogoj1: true,
        interval: 1440,
        time: new Date()
    }
    //pogoj 1: ce so polna skladisca preostale surovine daj na menjavano surovino
    var requestlink = unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/build.php?t=3&gid=17&newdid=29925";

    setTimeout(function () {
        GM.xmlHttpRequest({
            method: 'GET',
            url: requestlink,
            // data:data,
            headers: {
                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                Referer: requestlink
            },
            onload: function (responseDetails) {

                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = responseDetails.responseText;

                var test124 = PreveriLoginTask(doc,requestlink);
                if (unsafeWindow.Stopped || !test124) {
                    return;
                }

                var les = doc.getElementById("l1").innerHTML.split("/");
                var glina = doc.getElementById("l2").innerHTML.split("/");
                var zelezo = doc.getElementById("l3").innerHTML.split("/");
                var zito = doc.getElementById("l4").innerHTML.split("/");
                unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(les[0] + "|" + glina[0] + "|" + zelezo[0] + "|" + zito[0], "NPC", 29925));
                /*test
                les=[350000,400000];
                glina=[350000,400000];
                zelezo=[350000,400000];
                zito=[590000,590100];
                */
                var vsota = les[0] * 1 + glina[0] * 1 + zelezo[0] * 1 + zito[0] * 1;

                if (!(les[0] / les[1] >= Menjava.whenwood * 1 && glina[0] / glina[1] >= Menjava.whenclay * 1 && zelezo[0] / zelezo[1] >= Menjava.wheniron * 1 && zito[0] / zito[1] >= Menjava.whengrain * 1)) {
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("conditions not met", "NPC", 29925));
                    return;
                }
                var novles = Math.floor(vsota * Menjava.wood);
                var novles1 = Math.min(novles, Math.floor(les[1] * Menjava.maxwood));
                var novglina = Math.floor(vsota * Menjava.clay);
                var novglina1 = Math.min(novglina, Math.floor(glina[1] * Menjava.maxclay));
                var novzelezo = Math.floor(vsota * Menjava.iron);
                var novzelezo1 = Math.min(novzelezo, Math.floor(zelezo[1] * Menjava.maxiron));
                var novzito = Math.floor(vsota * Menjava.grain);
                var novzito1 = Math.min(novzito, Math.floor(zito[1] * Menjava.maxgrain));
                var novvsota = novles1 + novglina1 + novzelezo1 + novzito1;
                var lespoln = false;
                var glinapoln = false;
                var zelezopoln = false;
                var zitopoln = false;

                for (var i = 0; i < 6; i++) {
                    if (novvsota + 4 >= vsota) {//skladisca niso polna preko meje
                        while (novvsota < vsota) {
                            novzito1 = novzito1 + 1;
                            novvsota = novles1 + novglina1 + novzelezo1 + novzito1;
                        }
                        break;
                    }
                    else {


                        if (novles > novles1 || lespoln) {
                            lespoln = true;
                        }
                        if (novglina > novglina1 || glinapoln) {
                            glinapoln = true;
                        }
                        if (novzelezo > novzelezo1 || zelezopoln) {
                            zelezopoln = true;
                        }
                        if (novzito > novzito1 || zitopoln) {
                            zitopoln = true;
                        }

                        var vsotakoef = 0;
                        var stevilonepolnih = 0;
                        if (!lespoln) {
                            vsotakoef += Menjava.wood;
                            stevilonepolnih++;
                        }
                        if (!glinapoln) {
                            vsotakoef += Menjava.clay;
                            stevilonepolnih++;
                        }
                        if (!zelezopoln) {
                            vsotakoef += Menjava.iron;
                            stevilonepolnih++;
                        }
                        if (!zitopoln) {
                            vsotakoef += Menjava.grain;
                            stevilonepolnih++;
                        }
                        var koefwood = 0;
                        var koefclay = 0;
                        var koefiron = 0;
                        var koefgrain = 0;
                        if (vsotakoef == 0) {
                            if (Menjava.pogoj1) {
                                if (!lespoln) {
                                    koefwood = 1 / stevilonepolnih;
                                }
                                if (!glinapoln) {
                                    koefclay = 1 / stevilonepolnih;
                                }
                                if (!zelezopoln) {
                                    koefiron = 1 / stevilonepolnih;
                                }
                                if (!zitopoln) {
                                    koefgrain = 1 / stevilonepolnih;
                                }
                            }
                            else {
                                break;
                            }
                        }
                        else {
                            if (!lespoln) {
                                koefwood = Menjava.wood / vsotakoef;
                            }
                            if (!glinapoln) {
                                koefclay = Menjava.clay / vsotakoef;
                            }
                            if (!zelezopoln) {
                                koefiron = Menjava.iron / vsotakoef;
                            }
                            if (!zitopoln) {
                                koefgrain = Menjava.grain / vsotakoef;
                            }
                        }
                        var ostaneksurovin = vsota - novvsota;

                        novles = novles1 + Math.floor(ostaneksurovin * koefwood);
                        novles1 = Math.min(novles, Math.floor(les[1] * Menjava.maxwood));
                        novglina = novglina1 + Math.floor(ostaneksurovin * koefclay);
                        novglina1 = Math.min(novglina, Math.floor(glina[1] * Menjava.maxclay));
                        novzelezo = novzelezo1 + Math.floor(ostaneksurovin * koefiron);
                        novzelezo1 = Math.min(novzelezo, Math.floor(zelezo[1] * Menjava.maxiron));
                        novzito = novzito1 + Math.floor(ostaneksurovin * koefgrain);
                        novzito1 = Math.min(novzito, Math.floor(zito[1] * Menjava.maxgrain));
                        novvsota = novles1 + novglina1 + novzelezo1 + novzito1;

                    }
                }

                if (vsota == novvsota) {
                    var data = "id=" + doc.getElementsByName("id")[0].value + "&t=3&a=6&c=" + doc.getElementsByName("c")[0].value + "&m2%5B%5D=" + novles1 + "&m1%5B%5D=" + les[0] + "&m2%5B%5D=" + novglina1 + "&m1%5B%5D=" + glina[0] + "&m2%5B%5D=" + novzelezo1 + "&m1%5B%5D=" + zelezo[0] + "&m2%5B%5D=" + novzito1 + "&m1%5B%5D=" + zito[0];
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData(data, "NPC", 29925));
                }
                else {
                    unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("error in resorces", "NPC", 29925));
                    return;
                }

                requestlink = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/build.php";

                setTimeout(function () {
                    GM.xmlHttpRequest({
                        method: 'POST',
                        url: requestlink,
                        data: data,
                        headers: {
                            "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                            "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                            Referer: requestlink
                        },
                        onload: function (responseDetails) {
                            unsafeWindow.PLAYER.logs.push(new unsafeWindow.LogData("menjano", "NPC", 29925));
                        },
                        onerror: function (responseDetails) {
                        }
                    });

                }, 2000);


            },
            onerror: function (responseDetails) {
            }
        });

    }, 2000);
}



function DodajFarmeNaFarmlist(farme, lid, skupajnalog) {
    if (farme.length == 0) {
        document.getElementById("copyProgress").innerHTML = "Progres: 100%.<progress value='100' max='100'></progress>";
        alert("All farms have been add");
        return;
    }
    if (farme.skopiranih == 100) {
        farme.dodatek = farme.dodatek + 1;
        farme.skopiranih = 0;
        UstvariFarmlist(farme.name + " (" + farme.dodatek + ")", farme.villageid, farme);
        return;
    }

    try {
        var link = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK;
    }
    catch (err) {
        return;
    }

    GM.xmlHttpRequest({
        method: "GET",
        url: link + "/build.php?gid=16&tt=99&action=showSlot&lid=" + lid + "&sort=distance&direction=asc",
        headers: {
            Referer: link + "/build.php?id=39&tt=99"
        },
        onload: function (response2) {
            //var doctype2 = document.implementation.createDocumentType('html', "-//W3C//DTD HTML 4.01 Transitional//EN", "http://www.w3.org/TR/html4/loose.dtd");
            //var doc2 = document.implementation.createDocument('http://www.w3.org/1999/xhtml', 'html', doctype2);
            //var html = doc2.createElement('body');
            //html.innerHTML = response2.responseText;
            //doc2.documentElement.appendChild(html);

            var doc2 = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc2.documentElement.appendChild(body);
            doc2.body.innerHTML = response2.responseText;

            

            
            var a = doc2.getElementsByName("a")[0].value;
            var vsipodatki = ["&x=", "&y=", "&t1=", "&t2=", "&t3=", "&t4=", "&t5=", "&t6=", "&t7=", "&t8=", "&t9=", "&t10="]
            var podatkiFarme = [unsafeWindow.PLAYER.getXfromCoord(cloneInto(farme[0].link, unsafeWindow)), unsafeWindow.PLAYER.getYfromCoord(cloneInto(farme[0].link, unsafeWindow)), farme[0].troops[0], farme[0].troops[1], farme[0].troops[2], farme[0].troops[3], farme[0].troops[4], farme[0].troops[5], farme[0].troops[6], farme[0].troops[7], farme[0].troops[8], farme[0].troops[9]];
            var data = "a=" + a + "&sort=distance&direction=asc&lid=" + lid;

            for (var asd = 0; asd < vsipodatki.length; asd++) {
                data += vsipodatki[asd] + podatkiFarme[asd];
            }

            data += "&target_id=&action=addSlot&save=Shrani";

            GM.xmlHttpRequest({
                method: "POST",
                url: link + "/build.php?gid=16&tt=99",
                data: data,
                headers: {
                    "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                    "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                    Referer: link + "/build.php?id=39&tt=99&action=addList"
                },
                onload: function (response1) {
                    var progress = Math.round((skupajnalog - farme.length) / skupajnalog * 100);
                    var TrenutniCopyTime = new Date();
                    TrenutniCopyTime = TrenutniCopyTime.getTime();
                    var TrajanjeCopy = Math.round((TrenutniCopyTime - StartCopyTime) / 1000);
                    var preostaliCas = Math.round((100 - progress) * TrajanjeCopy / (progress));

                    farme.splice(0, 1);
                    farme.skopiranih = farme.skopiranih + 1;
                    var timeleft = Math.round(2.5 * farme.length);
                    if (TrajanjeCopy > 60) {
                        timeleft = preostaliCas;
                    }
                    if (timeleft < 60) {
                        var stringtimeleft = " Time left aprox: " + timeleft + " seconds";
                    }
                    else {
                        var minutes = Math.floor(timeleft / 60);
                        var seconds = timeleft - minutes * 60;
                        var stringtimeleft = " Time left aprox: " + minutes + " minutes " + seconds + " seconds";
                    }

                    document.getElementById("copyProgress").innerHTML = "Progres: " + progress + "%.<progress value='" + progress + "' max='100'></progress>" + stringtimeleft;
                    setTimeout(function () { DodajFarmeNaFarmlist(farme, lid, skupajnalog) }, RandomXtoY(1000, 3000));


                },
                onerror: function errorhand() {
                }
            });
        },
        onerror: function errorhand() {
        }
    });

}

var StartCopyTime;

function UstvariFarmlist(name, villageid, farme2) {
    setTimeout(function () {
        try {
            var link = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK;

        }
        catch (err) {
            return;
        }
        var farme = new Array;
        if (farme2) {
            farme = farme2;
            var skupajnalog = farme.skupajnalog;
        }
        else {
            for (var ll = 0; ll < unsafeWindow.PLAYER.getVillage(cloneInto(villageid, unsafeWindow)).FARME.length; ll++) {
                if (unsafeWindow.PLAYER.getVillage(cloneInto(villageid, unsafeWindow)).FARME[ll].work + "" == "true") {
                    farme.push(unsafeWindow.PLAYER.getVillage(cloneInto(villageid, unsafeWindow)).FARME[ll]);
                }
            }
            farme.skopiranih = 0;
            farme.dodatek = 1;
            farme.name = name;
            farme.villageid = villageid;
            var skupajnalog = farme.length + 1;
            farme.skupajnalog = skupajnalog;
        }

        var data = "action=addList&name=" + name + "&did=" + villageid;

        GM.xmlHttpRequest({
            method: "POST",
            url: link + "/build.php?gid=16&tt=99",
            data: data,
            headers: {
                "Accept": "text/javascript, text/html, application/xml, text/xml, */*",
                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8",
                Referer: link + "/build.php?id=39&tt=99&action=addList"
            },
            onload: function (response1) {
                var doc = document.implementation.createHTMLDocument('My title');
                var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                doc.documentElement.appendChild(body);
                doc.body.innerHTML = response1.responseText;

                var timeleft = Math.round(2.5 * farme.length);
                if (timeleft < 60) {
                    var stringtimeleft = " Time left aprox: " + timeleft + " seconds";
                }
                else {
                    var minutes = Math.floor(timeleft / 60);
                    var seconds = timeleft - minutes * 60;
                    var stringtimeleft = " Time left aprox: " + minutes + " minutes " + seconds + " seconds";
                }
                StartCopyTime = new Date();
                StartCopyTime = StartCopyTime.getTime();

                var progress = Math.round(1 / skupajnalog * 100);
                document.getElementById("copyProgress").innerHTML = "Progres: " + progress + "%.<progress value='" + progress + "' max='100'></progress>" + stringtimeleft;

                var slot = doc.evaluate("//div[contains(@id, 'list')]", doc, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                var maxslot = 0;
                var polozaj = 0;
                for (var abc = 0; abc < slot.snapshotLength; abc++) {
                    try {
                        if (slot.snapshotItem(abc).getAttribute("id").match(/[\d\.]+/g)[0] * 1 > maxslot) {
                            maxslot = slot.snapshotItem(abc).getAttribute("id").match(/[\d\.]+/g)[0] * 1;
                            polozaj = abc;
                        }
                    }
                    catch (err) {
                        continue;
                    }
                }
                setTimeout(function () { DodajFarmeNaFarmlist(farme, maxslot, skupajnalog) }, RandomXtoY(1000, 3000));

            },
            onerror: function errorhand() {

            }
        }
    );
    }, 0);

}


///podatki

var TravianServer = 4;

var TipiPokarajin = new Array();
TipiPokarajin[0] = null;
TipiPokarajin[1] = [null, 4, 4, 1, 4, 4, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[2] = [null, 3, 4, 1, 3, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[3] = [null, 1, 4, 1, 3, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[4] = [null, 1, 4, 1, 2, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[5] = [null, 1, 4, 1, 3, 1, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[6] = [null, 4, 4, 1, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 4, 4];
TipiPokarajin[7] = [null, 1, 4, 4, 1, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[8] = [null, 3, 4, 4, 1, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[9] = [null, 3, 4, 4, 1, 1, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[10] = [null, 3, 4, 1, 2, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];
TipiPokarajin[11] = [null, 3, 1, 1, 3, 1, 4, 4, 3, 3, 2, 2, 3, 1, 4, 4, 2, 4, 4];
TipiPokarajin[12] = [null, 1, 4, 1, 1, 2, 2, 3, 4, 4, 3, 3, 4, 4, 1, 4, 2, 1, 2];

var Stavbe = [//dummy
[//lumberCost gid = 1
["zazidljiva parcela"]
],
[//lumberCost gid = 1
["Gozdar"], [40, 100, 50, 60, 2, 1, 260], [65, 165, 85, 100, 1, 1, 620], [110, 280, 140, 165, 1, 2, 1190], [185, 465, 235, 280, 1, 2, 2100], [310, 780, 390, 465, 1, 2, 3560], [520, 1300, 650, 780, 2, 3, 5890], [870, 2170, 1085, 1300, 2, 4, 9620], [1450, 3625, 1810, 2175, 2, 4, 15590], [2420, 6050, 3025, 3630, 2, 5, 25150], [4040, 10105, 5050, 6060, 2, 6, 40440], [6750, 16870, 8435, 10125, 2, 7, 64900], [11270, 28175, 14090, 16905, 2, 9, 104050], [18820, 47055, 23525, 28230, 2, 11, 166680], [31430, 78580, 39290, 47150, 2, 13, 266880], [52490, 131230, 65615, 78740, 2, 15, 427210], [87660, 219155, 109575, 131490, 3, 18, 683730], [146395, 365985, 182995, 219590, 3, 22, 1094170], [244480, 611195, 305600, 366715, 3, 27, 1750880], [408280, 1020695, 510350, 612420, 3, 32, 2801600], [681825, 1704565, 852280, 1022740, 3, 38, 4482770]
],
[//clayCost gid = 2
["Glinokop"], [80, 40, 80, 50, 2, 1, 220], [135, 65, 135, 85, 1, 1, 550], [225, 110, 225, 140, 1, 2, 1080], [375, 185, 375, 235, 1, 2, 1930], [620, 310, 620, 390, 1, 2, 3290], [1040, 520, 1040, 650, 2, 3, 5470], [1735, 870, 1735, 1085, 2, 4, 8950], [2900, 1450, 2900, 1810, 2, 4, 14520], [4840, 2420, 4840, 3025, 2, 5, 23430], [8080, 4040, 8080, 5050, 2, 6, 37690], [13500, 6750, 13500, 8435, 2, 7, 60510], [22540, 11270, 22540, 14090, 2, 9, 97010], [37645, 18820, 37645, 23525, 2, 11, 155420], [62865, 31430, 62865, 39290, 2, 13, 248870], [104985, 52490, 104985, 65615, 2, 15, 398390], [175320, 87660, 175320, 109575, 3, 18, 637620], [292790, 146395, 292790, 182995, 3, 22, 1020390], [488955, 244480, 488955, 305600, 3, 27, 1632820], [816555, 408280, 816555, 510350, 3, 32, 2612710], [1363650, 681825, 1363650, 852280, 3, 38, 4180540]
],
[//ironCost gid = 3
["Rudnik železa"], [100, 80, 30, 60, 3, 1, 450], [165, 135, 50, 100, 2, 1, 920], [280, 225, 85, 165, 2, 2, 1670], [465, 375, 140, 280, 2, 2, 2880], [780, 620, 235, 465, 2, 2, 4800], [1300, 1040, 390, 780, 2, 3, 7880], [2170, 1735, 650, 1300, 2, 4, 12810], [3625, 2900, 1085, 2175, 2, 4, 20690], [6050, 4840, 1815, 3630, 2, 5, 33310], [10105, 8080, 3030, 6060, 2, 6, 53500], [16870, 13500, 5060, 10125, 3, 7, 85800], [28175, 22540, 8455, 16905, 3, 9, 137470], [47055, 37645, 14115, 28230, 3, 11, 220160], [78580, 62865, 23575, 47150, 3, 13, 352450], [131230, 104985, 39370, 78740, 3, 15, 564120], [219155, 175320, 65745, 131490, 3, 18, 902790], [365985, 292790, 109795, 219590, 3, 22, 1444660], [611195, 488955, 183360, 366715, 3, 27, 2311660], [1020695, 816555, 306210, 612420, 3, 32, 3698850], [1704565, 1363650, 511370, 1022740, 3, 38, 5918370]
],
[//cropCost gid = 4
["Žitno polje"], [70, 90, 70, 20, 0, 1, 150], [115, 150, 115, 35, 0, 1, 440], [195, 250, 195, 55, 0, 2, 900], [325, 420, 325, 95, 0, 2, 1650], [545, 700, 545, 155, 0, 2, 2830], [910, 1170, 910, 260, 1, 3, 4730], [1520, 1950, 1520, 435, 1, 4, 7780], [2535, 3260, 2535, 725, 1, 4, 12640], [4235, 5445, 4235, 1210, 1, 5, 20430], [7070, 9095, 7070, 2020, 1, 6, 32880], [11810, 15185, 11810, 3375, 1, 7, 52810], [19725, 25360, 19725, 5635, 1, 9, 84700], [32940, 42350, 32940, 9410, 1, 11, 135710], [55005, 70720, 55005, 15715, 1, 13, 217340], [91860, 118105, 91860, 26245, 1, 15, 347950], [153405, 197240, 153405, 43830, 2, 18, 556910], [256190, 329385, 256190, 73195, 2, 22, 891260], [427835, 550075, 427835, 122240, 2, 27, 1426210], [714485, 918625, 714485, 204140, 2, 32, 2282140], [1193195, 1534105, 1193195, 340915, 2, 38, 3651630]
],
[//sawmillCost gid = 5
["Žaga"], [520, 380, 290, 90, 4, 1, 3000], [935, 685, 520, 160, 2, 1, 5700], [1685, 1230, 940, 290, 2, 2, 9750], [3035, 2215, 1690, 525, 2, 2, 15830], [5460, 3990, 3045, 945, 2, 2, 24940]
],
[//brickyardCost gid = 6
["Opekarna"], [440, 480, 320, 50, 3, 1, 2240], [790, 865, 575, 90, 2, 1, 4560], [1425, 1555, 1035, 160, 2, 2, 8040], [2565, 2800, 1865, 290, 2, 2, 13260], [4620, 5040, 3360, 525, 2, 2, 21090]
],
[//ironFoundryCost gid = 7
["Talilnica železa"], [200, 450, 510, 120, 6, 1, 4080], [360, 810, 920, 215, 3, 1, 7320], [650, 1460, 1650, 390, 3, 2, 12180], [1165, 2625, 2975, 700, 3, 2, 19470], [2100, 4725, 5355, 1260, 3, 2, 30410]
],
[//grainMillCost gid = 8
["Mlin"], [500, 440, 380, 1240, 3, 1, 1840], [900, 790, 685, 2230, 2, 1, 3960], [1620, 1425, 1230, 4020, 2, 2, 7140], [2915, 2565, 2215, 7230, 2, 2, 11910], [5250, 4620, 3990, 13015, 2, 2, 19070]
],
[//bakeryCost gid = 9
["Pekarna"], [1200, 1480, 870, 1600, 4, 1, 3680], [2160, 2665, 1565, 2880, 2, 1, 6720], [3890, 4795, 2820, 5185, 2, 2, 11280], [7000, 8630, 5075, 9330, 2, 2, 18120], [12595, 15535, 9135, 16795, 2, 2, 28380]
],
[//warehouseCost gid = 10
["Skladišče"], [130, 160, 90, 40, 1, 1, 2000], [165, 205, 115, 50, 1, 1, 2620], [215, 260, 145, 65, 1, 2, 3340], [275, 335, 190, 85, 1, 2, 4170], [350, 430, 240, 105, 1, 2, 5140], [445, 550, 310, 135, 1, 3, 6260], [570, 705, 395, 175, 1, 4, 7570], [730, 900, 505, 225, 1, 4, 9080], [935, 1155, 650, 290, 1, 5, 10830], [1200, 1475, 830, 370, 1, 6, 12860], [1535, 1890, 1065, 470, 2, 7, 15220], [1965, 2420, 1360, 605, 2, 9, 17950], [2515, 3095, 1740, 775, 2, 11, 21130], [3220, 3960, 2230, 990, 2, 13, 24810], [4120, 5070, 2850, 1270, 2, 15, 29080], [5275, 6490, 3650, 1625, 2, 18, 34030], [6750, 8310, 4675, 2075, 2, 22, 39770], [8640, 10635, 5980, 2660, 2, 27, 46440], [11060, 13610, 7655, 3405, 2, 32, 54170], [14155, 17420, 9800, 4355, 2, 38, 63130]
],
[//granaryCost gid = 11
["Žitnica"], [80, 100, 70, 20, 1, 1, 1600], [100, 130, 90, 25, 1, 1, 2160], [130, 165, 115, 35, 1, 2, 2800], [170, 210, 145, 40, 1, 2, 3550], [215, 270, 190, 55, 1, 2, 4420], [275, 345, 240, 70, 1, 3, 5420], [350, 440, 310, 90, 1, 4, 6590], [450, 565, 395, 115, 1, 4, 7950], [575, 720, 505, 145, 1, 5, 9520], [740, 920, 645, 185, 1, 6, 11340], [945, 1180, 825, 235, 2, 7, 13450], [1210, 1510, 1060, 300, 2, 9, 15910], [1545, 1935, 1355, 385, 2, 11, 18750], [1980, 2475, 1735, 495, 2, 13, 22050], [2535, 3170, 2220, 635, 2, 15, 25880], [3245, 4055, 2840, 810, 2, 18, 30320], [4155, 5190, 3635, 1040, 2, 22, 35470], [5315, 6645, 4650, 1330, 2, 27, 41450], [6805, 8505, 5955, 1700, 2, 32, 48380], [8710, 10890, 7620, 2180, 2, 38, 56420]
],
[//blacksmithCost gid = 12
["Izdelovalec orožja"], [170, 200, 380, 130, 4, 2, 2000], [220, 255, 485, 165, 2, 3, 2620], [280, 330, 625, 215, 2, 3, 3340], [355, 420, 795, 275, 2, 4, 4170], [455, 535, 1020, 350, 2, 5, 5140], [585, 685, 1305, 445, 3, 6, 6260], [750, 880, 1670, 570, 3, 7, 7570], [955, 1125, 2140, 730, 3, 9, 9080], [1225, 1440, 2740, 935, 3, 10, 10830], [1570, 1845, 3505, 1200, 3, 12, 12860], [2005, 2360, 4485, 1535, 3, 15, 15220], [2570, 3020, 5740, 1965, 3, 18, 17950], [3290, 3870, 7350, 2515, 3, 21, 21130], [4210, 4950, 9410, 3220, 3, 26, 24810], [5390, 6340, 12045, 4120, 3, 31, 29080], [6895, 8115, 15415, 5275, 4, 37, 34030], [8825, 10385, 19730, 6750, 4, 44, 39770], [11300, 13290, 25255, 8640, 4, 53, 46440], [14460, 17015, 32325, 11060, 4, 64, 54170], [18510, 21780, 41380, 14155, 4, 77, 63130]
],
[//armouryCost gid = 13
["Izdelovalec oklepov"], [130, 210, 410, 130, 4, 2, 2000], [165, 270, 525, 165, 2, 3, 2620], [215, 345, 670, 215, 2, 3, 3340], [275, 440, 860, 275, 2, 4, 4170], [350, 565, 1100, 350, 2, 5, 5140], [445, 720, 1410, 445, 3, 6, 6260], [570, 925, 1805, 570, 3, 7, 7570], [730, 1180, 2310, 730, 3, 9, 9080], [935, 1515, 2955, 935, 3, 10, 10830], [1200, 1935, 3780, 1200, 3, 12, 12860], [1535, 2480, 4840, 1535, 3, 15, 15220], [1965, 3175, 6195, 1965, 3, 18, 17950], [2515, 4060, 7930, 2515, 3, 21, 21130], [3220, 5200, 10150, 3220, 3, 26, 24810], [4120, 6655, 12995, 4120, 3, 31, 29080], [5275, 8520, 16630, 5275, 4, 37, 34030], [6750, 10905, 21290, 6750, 4, 44, 39770], [8640, 13955, 27250, 8640, 4, 53, 46440], [11060, 17865, 34880, 11060, 4, 64, 54170], [14155, 22865, 44645, 14155, 4, 77, 63130]
],
[//tournamentSquareCost gid = 14
["Vadbišče"], [1750, 2250, 1530, 240, 1, 1, 3500], [2240, 2880, 1960, 305, 1, 1, 4360], [2865, 3685, 2505, 395, 1, 2, 5360], [3670, 4720, 3210, 505, 1, 2, 6510], [4700, 6040, 4105, 645, 1, 2, 7860], [6015, 7730, 5255, 825, 1, 3, 9410], [7695, 9895, 6730, 1055, 1, 4, 11220], [9850, 12665, 8615, 1350, 1, 4, 13320], [12610, 16215, 11025, 1730, 1, 5, 15750], [16140, 20755, 14110, 2215, 1, 6, 18570], [20660, 26565, 18065, 2835, 2, 7, 21840], [26445, 34000, 23120, 3625, 2, 9, 25630], [33850, 43520, 29595, 4640, 2, 11, 30030], [43330, 55705, 37880, 5940, 2, 13, 35140], [55460, 71305, 48490, 7605, 2, 15, 41060], [70990, 91270, 62065, 9735, 2, 18, 47930], [90865, 116825, 79440, 12460, 2, 22, 55900], [116305, 149540, 101685, 15950, 2, 27, 65140], [148875, 191410, 130160, 20415, 2, 32, 75860], [190560, 245005, 166600, 26135, 2, 38, 88300]
],
[//mainBuildingCost gid = 15                                                                            CehCasi=[20000,2620,3220,3880,4610,5410,6300,7280,                                                                                      8380,9590,10940,12440,                                                                      14120,15980,18050,20370,                                                                                                                        22950,25830,29040,32630];
["Gradbeni ceh"], [70, 40, 60, 20, 2, 2, 20000], [90, 50, 75, 25, 1, 3, 2620], [115, 65, 100, 35, 1, 3, 3220], [145, 85, 125, 40, 1, 4, 3880], [190, 105, 160, 55, 1, 5, 4610], [240, 135, 205, 70, 2, 6, 5410], [310, 175, 265, 90, 2, 7, 6300], [395, 225, 340, 115, 2, 9, 7280], [505, 290, 430, 145, 2, 10, 8380], [645, 370, 555, 185, 2, 12, 9590], [825, 470, 710, 235, 2, 15, 10940], [1060, 605, 905, 300, 2, 18, 12440], [1355, 775, 1160, 385, 2, 21, 14120], [1735, 990, 1485, 495, 2, 26, 15980], [2220, 1270, 1900, 635, 2, 31, 18050], [2840, 1625, 2435, 810, 3, 37, 20370], [3635, 2075, 3115, 1040, 3, 44, 22950], [4650, 2660, 3990, 1330, 3, 53, 25830], [5955, 3405, 5105, 1700, 3, 64, 29040], [7620, 4355, 6535, 2180, 3, 77, 32630]
],
[//rallyPointCost gid = 16
["Zbirališče"], [110, 160, 90, 70, 1, 1, 2000], [140, 205, 115, 90, 1, 1, 2620], [180, 260, 145, 115, 1, 2, 3340], [230, 335, 190, 145, 1, 2, 4170], [295, 430, 240, 190, 1, 2, 5140], [380, 550, 310, 240, 1, 3, 6260], [485, 705, 395, 310, 1, 4, 7570], [620, 900, 505, 395, 1, 4, 9080], [795, 1155, 650, 505, 1, 5, 10830], [1015, 1475, 830, 645, 1, 6, 12860], [1300, 1890, 1065, 825, 2, 7, 15220], [1660, 2420, 1360, 1060, 2, 9, 17950], [2130, 3095, 1740, 1355, 2, 11, 21130], [2725, 3960, 2230, 1735, 2, 13, 24810], [3485, 5070, 2850, 2220, 2, 15, 29080], [4460, 6490, 3650, 2840, 2, 18, 34030], [5710, 8310, 4675, 3635, 2, 22, 39770], [7310, 10635, 5980, 4650, 2, 27, 46440], [9360, 13610, 7655, 5955, 2, 32, 54170], [11980, 17420, 9800, 7620, 2, 38, 63130]
],
[//marketplaceCost gid = 17
["Tržnica"], [80, 70, 120, 70, 4, 4, 1800], [100, 90, 155, 90, 2, 4, 2390], [130, 115, 195, 115, 2, 5, 3070], [170, 145, 250, 145, 2, 6, 3860], [215, 190, 320, 190, 2, 7, 4780], [275, 240, 410, 240, 3, 9, 5840], [350, 310, 530, 310, 3, 11, 7080], [450, 395, 675, 395, 3, 13, 8510], [575, 505, 865, 505, 3, 15, 10170], [740, 645, 1105, 645, 3, 19, 12100], [945, 825, 1415, 825, 3, 22, 14340], [1210, 1060, 1815, 1060, 3, 27, 16930], [1545, 1355, 2320, 1355, 3, 32, 19940], [1980, 1735, 2970, 1735, 3, 39, 23430], [2535, 2220, 3805, 2220, 3, 46, 27480], [3245, 2840, 4870, 2840, 4, 55, 32180], [4155, 3635, 6230, 3635, 4, 67, 37620], [5315, 4650, 7975, 4650, 4, 80, 43940], [6805, 5955, 10210, 5955, 4, 96, 51270], [8710, 7620, 13065, 7620, 4, 115, 59780]
],
[//embassyCost gid = 18
["Ambasada"], [180, 130, 150, 80, 3, 5, 2000], [230, 165, 190, 100, 2, 6, 2620], [295, 215, 245, 130, 2, 7, 3340], [375, 275, 315, 170, 2, 8, 4170], [485, 350, 405, 215, 2, 10, 5140], [620, 445, 515, 275, 2, 12, 6260], [790, 570, 660, 350, 2, 14, 7570], [1015, 730, 845, 450, 2, 17, 9080], [1295, 935, 1080, 575, 2, 21, 10830], [1660, 1200, 1385, 740, 2, 25, 12860], [2125, 1535, 1770, 945, 3, 30, 15220], [2720, 1965, 2265, 1210, 3, 36, 17950], [3480, 2515, 2900, 1545, 3, 43, 21130], [4455, 3220, 3715, 1980, 3, 51, 24810], [5705, 4120, 4755, 2535, 3, 62, 29080], [7300, 5275, 6085, 3245, 3, 74, 34030], [9345, 6750, 7790, 4155, 3, 89, 39770], [11965, 8640, 9970, 5315, 3, 106, 46440], [15315, 11060, 12760, 6805, 3, 128, 54170], [19600, 14155, 16335, 8710, 3, 153, 63130]
],
[//barracksCost gid = 19
["Barake"], [210, 140, 260, 120, 4, 1, 2000], [270, 180, 335, 155, 2, 1, 2620], [345, 230, 425, 195, 2, 2, 3340], [440, 295, 545, 250, 2, 2, 4170], [565, 375, 700, 320, 2, 2, 5140], [720, 480, 895, 410, 3, 3, 6260], [925, 615, 1145, 530, 3, 4, 7570], [1180, 790, 1465, 675, 3, 4, 9080], [1515, 1010, 1875, 865, 3, 5, 10830], [1935, 1290, 2400, 1105, 3, 6, 12860], [2480, 1655, 3070, 1415, 3, 7, 15220], [3175, 2115, 3930, 1815, 3, 9, 17950], [4060, 2710, 5030, 2320, 3, 11, 21130], [5200, 3465, 6435, 2970, 3, 13, 24810], [6655, 4435, 8240, 3805, 3, 15, 29080], [8520, 5680, 10545, 4870, 4, 18, 34030], [10905, 7270, 13500, 6230, 4, 22, 39770], [13955, 9305, 17280, 7975, 4, 27, 46440], [17865, 11910, 22120, 10210, 4, 32, 54170], [22865, 15245, 28310, 13065, 4, 38, 63130]
],
[//stableCost gid = 20 
["Konjušnica"], [260, 140, 220, 100, 5, 2, 2200], [335, 180, 280, 130, 3, 3, 2850], [425, 230, 360, 165, 3, 3, 3610], [545, 295, 460, 210, 3, 4, 4490], [700, 375, 590, 270, 3, 5, 5500], [895, 480, 755, 345, 3, 6, 6680], [1145, 615, 970, 440, 3, 7, 8050], [1465, 790, 1240, 565, 3, 9, 9640], [1875, 1010, 1585, 720, 3, 10, 11480], [2400, 1290, 2030, 920, 3, 12, 13620], [3070, 1655, 2595, 1180, 4, 15, 16100], [3930, 2115, 3325, 1510, 4, 18, 18980], [5030, 2710, 4255, 1935, 4, 21, 22310], [6435, 3465, 5445, 2475, 4, 26, 26180], [8240, 4435, 6970, 3170, 4, 31, 30670], [10545, 5680, 8925, 4055, 4, 37, 35880], [13500, 7270, 11425, 5190, 4, 44, 41920], [17280, 9305, 14620, 6645, 4, 53, 48930], [22120, 11910, 18715, 8505, 4, 64, 57060], [28310, 15245, 23955, 10890, 4, 77, 66490]
],
[//workshopCost gid = 21
["Izdelovalec oblegovalnih naprav"], [460, 510, 600, 320, 3, 4, 3000], [590, 655, 770, 410, 2, 4, 3780], [755, 835, 985, 525, 2, 5, 4680], [965, 1070, 1260, 670, 2, 6, 5730], [1235, 1370, 1610, 860, 2, 7, 6950], [1580, 1750, 2060, 1100, 2, 9, 8360], [2025, 2245, 2640, 1405, 2, 11, 10000], [2590, 2870, 3380, 1800, 2, 13, 11900], [3315, 3675, 4325, 2305, 2, 15, 14110], [4245, 4705, 5535, 2950, 2, 19, 16660], [5430, 6020, 7085, 3780, 3, 22, 19630], [6950, 7705, 9065, 4835, 3, 27, 23070], [8900, 9865, 11605, 6190, 3, 32, 27060], [11390, 12625, 14855, 7925, 3, 39, 31690], [14580, 16165, 19015, 10140, 3, 46, 37060], [18660, 20690, 24340, 12980, 3, 55, 43290], [23885, 26480, 31155, 16615, 3, 67, 50520], [30570, 33895, 39875, 21270, 3, 80, 58900], [39130, 43385, 51040, 27225, 3, 96, 68630], [50090, 55535, 65335, 34845, 3, 115, 79910]
],
[//academyCost gid = 22
["Akademija"], [220, 160, 90, 40, 4, 5, 2000], [280, 205, 115, 50, 2, 6, 2620], [360, 260, 145, 65, 2, 7, 3340], [460, 335, 190, 85, 2, 8, 4170], [590, 430, 240, 105, 2, 10, 5140], [755, 550, 310, 135, 3, 12, 6260], [970, 705, 395, 175, 3, 14, 7570], [1240, 900, 505, 225, 3, 17, 9080], [1585, 1155, 650, 290, 3, 21, 10830], [2030, 1475, 830, 370, 3, 25, 12860], [2595, 1890, 1065, 470, 3, 30, 15220], [3325, 2420, 1360, 605, 3, 36, 17950], [4255, 3095, 1740, 775, 3, 43, 21130], [5445, 3960, 2230, 990, 3, 51, 24810], [6970, 5070, 2850, 1270, 3, 62, 29080], [8925, 6490, 3650, 1625, 4, 74, 34030], [11425, 8310, 4675, 2075, 4, 89, 39770], [14620, 10635, 5980, 2660, 4, 106, 46440], [18715, 13610, 7655, 3405, 4, 128, 54170], [23955, 17420, 9800, 4355, 4, 153, 63130]
],
[//crannyCost gid = 23
["Špranja"], [40, 50, 30, 10, 0, 1, 750], [50, 65, 40, 15, 0, 1, 1170], [65, 80, 50, 15, 0, 2, 1660], [85, 105, 65, 20, 0, 2, 2220], [105, 135, 80, 25, 0, 2, 2880], [135, 170, 105, 35, 1, 3, 3640], [175, 220, 130, 45, 1, 4, 4520], [225, 280, 170, 55, 1, 4, 5540], [290, 360, 215, 70, 1, 5, 6730], [370, 460, 275, 90, 1, 6, 8110]
],
[//townhallCost gid = 24
["Mestna hiša"], [1250, 1110, 1260, 600, 4, 6, 12500], [1600, 1420, 1615, 770, 2, 7, 14800], [2050, 1820, 2065, 985, 2, 9, 17470], [2620, 2330, 2640, 1260, 2, 10, 20560], [3355, 2980, 3380, 1610, 2, 12, 24150], [4295, 3815, 4330, 2060, 3, 15, 28320], [5500, 4880, 5540, 2640, 3, 18, 33150], [7035, 6250, 7095, 3380, 3, 21, 38750], [9005, 8000, 9080, 4325, 3, 26, 45250], [11530, 10240, 11620, 5535, 3, 31, 52790], [14755, 13105, 14875, 7085, 3, 37, 61540], [18890, 16775, 19040, 9065, 3, 45, 71690], [24180, 21470, 24370, 11605, 3, 53, 83460], [30950, 27480, 31195, 14855, 3, 64, 97110], [39615, 35175, 39930, 19015, 3, 77, 112950], [50705, 45025, 51110, 24340, 4, 92, 131320], [64905, 57635, 65425, 31155, 4, 111, 152630], [83075, 73770, 83740, 39875, 4, 133, 177350], [106340, 94430, 107190, 51040, 4, 160, 206020], [136115, 120870, 137200, 65335, 4, 192, 239290]
],
[//residenceCost gid = 25
["Rezidenca"], [580, 460, 350, 180, 1, 2, 2000], [740, 590, 450, 230, 1, 3, 2620], [950, 755, 575, 295, 1, 3, 3340], [1215, 965, 735, 375, 1, 4, 4170], [1555, 1235, 940, 485, 1, 5, 5140], [1995, 1580, 1205, 620, 1, 6, 6260], [2550, 2025, 1540, 790, 1, 7, 7570], [3265, 2590, 1970, 1015, 1, 9, 9080], [4180, 3315, 2520, 1295, 1, 10, 10830], [5350, 4245, 3230, 1660, 1, 12, 12860], [6845, 5430, 4130, 2125, 2, 15, 15220], [8765, 6950, 5290, 2720, 2, 18, 17950], [11220, 8900, 6770, 3480, 2, 21, 21130], [14360, 11390, 8665, 4455, 2, 26, 24810], [18380, 14580, 11090, 5705, 2, 31, 29080], [23530, 18660, 14200, 7300, 2, 37, 34030], [30115, 23885, 18175, 9345, 2, 44, 39770], [38550, 30570, 23260, 11965, 2, 53, 46440], [49340, 39130, 29775, 15315, 2, 64, 54170], [63155, 50090, 38110, 19600, 2, 77, 63130]
],
[//palaceCost gid = 26
["Palača"], [550, 800, 750, 250, 1, 6, 5000], [705, 1025, 960, 320, 1, 7, 6100], [900, 1310, 1230, 410, 1, 9, 7380], [1155, 1680, 1575, 525, 1, 10, 8860], [1475, 2145, 2015, 670, 1, 12, 10570], [1890, 2750, 2575, 860, 1, 15, 12560], [2420, 3520, 3300, 1100, 1, 18, 14880], [3095, 4505, 4220, 1405, 1, 21, 17560], [3965, 5765, 5405, 1800, 1, 26, 20660], [5075, 7380, 6920, 2305, 1, 31, 24270], [6495, 9445, 8855, 2950, 2, 37, 28450], [8310, 12090, 11335, 3780, 2, 45, 33310], [10640, 15475, 14505, 4835, 2, 53, 38940], [13615, 19805, 18570, 6190, 2, 64, 45460], [17430, 25355, 23770, 7925, 2, 77, 53040], [22310, 32450, 30425, 10140, 2, 92, 61830], [28560, 41540, 38940, 12980, 2, 111, 72020], [36555, 53170, 49845, 16615, 2, 133, 83840], [46790, 68055, 63805, 21270, 2, 160, 97550], [59890, 87110, 81670, 27225, 2, 192, 113460]
],
[//treasuryCost gid = 27
["Zakladnica"], [2880, 2740, 2580, 990, 4, 7, 8000], [3630, 3450, 3250, 1245, 2, 9, 9580], [4570, 4350, 4095, 1570, 2, 10, 11410], [5760, 5480, 5160, 1980, 2, 12, 13540], [7260, 6905, 6505, 2495, 2, 15, 16010], [9145, 8700, 8195, 3145, 3, 18, 18870], [11525, 10965, 10325, 3960, 3, 21, 22180], [14520, 13815, 13010, 4990, 3, 26, 26030], [18295, 17405, 16390, 6290, 3, 31, 30500], [23055, 21930, 20650, 7925, 3, 37, 35680], [29045, 27635, 26020, 9985, 3, 45, 41690], [36600, 34820, 32785, 12580, 3, 53, 48660], [46115, 43875, 41310, 15850, 3, 64, 56740], [58105, 55280, 52050, 19975, 3, 77, 66120], [73210, 69655, 65585, 25165, 3, 92, 77000], [92245, 87760, 82640, 31710, 4, 111, 89620], [116230, 110580, 104125, 39955, 4, 133, 104260], [146450, 139330, 131195, 50340, 4, 160, 121240], [184530, 175560, 165305, 63430, 4, 192, 140940], [232505, 221205, 208285, 79925, 4, 230, 163790]
],
[//tradeOfficeCost gid = 28
["Trgovski center"], [1400, 1330, 1200, 400, 3, 4, 3000], [1790, 1700, 1535, 510, 2, 4, 3780], [2295, 2180, 1965, 655, 2, 5, 4680], [2935, 2790, 2515, 840, 2, 6, 5730], [3760, 3570, 3220, 1075, 2, 7, 6950], [4810, 4570, 4125, 1375, 2, 9, 8360], [6155, 5850, 5280, 1760, 2, 11, 10000], [7880, 7485, 6755, 2250, 2, 13, 11900], [10090, 9585, 8645, 2880, 2, 15, 14110], [12915, 12265, 11070, 3690, 2, 19, 16660], [16530, 15700, 14165, 4720, 3, 22, 19630], [21155, 20100, 18135, 6045, 3, 27, 23070], [27080, 25725, 23210, 7735, 3, 32, 27060], [34660, 32930, 29710, 9905, 3, 39, 31690], [44370, 42150, 38030, 12675, 3, 46, 37060], [56790, 53950, 48680, 16225, 3, 55, 43290], [72690, 69060, 62310, 20770, 3, 67, 50520], [93045, 88395, 79755, 26585, 3, 80, 58900], [119100, 113145, 102085, 34030, 3, 96, 68630], [152445, 144825, 130670, 43555, 3, 115, 79910]
],
[//greatBarrackCost gid = 29
["Velike barake"], [630, 420, 780, 360, 4, 1, 2000], [805, 540, 1000, 460, 2, 1, 2620], [1030, 690, 1280, 590, 2, 2, 3340], [1320, 880, 1635, 755, 2, 2, 4170], [1690, 1125, 2095, 965, 2, 2, 5140], [2165, 1445, 2680, 1235, 3, 3, 6260], [2770, 1845, 3430, 1585, 3, 4, 7570], [3545, 2365, 4390, 2025, 3, 4, 9080], [4540, 3025, 5620, 2595, 3, 5, 10830], [5810, 3875, 7195, 3320, 3, 6, 12860], [7440, 4960, 9210, 4250, 3, 7, 15220], [9520, 6345, 11785, 5440, 3, 9, 17950], [12185, 8125, 15085, 6965, 3, 11, 21130], [15600, 10400, 19310, 8915, 3, 13, 24810], [19965, 13310, 24720, 11410, 3, 15, 29080], [25555, 17035, 31640, 14605, 4, 18, 34030], [32710, 21810, 40500, 18690, 4, 22, 39770], [41870, 27915, 51840, 23925, 4, 27, 46440], [53595, 35730, 66355, 30625, 4, 32, 54170], [68600, 45735, 84935, 39200, 4, 38, 63130]
],
[//greatStableCost gid = 30
["Velika konjušnica"], [780, 420, 660, 300, 5, 2, 2200], [1000, 540, 845, 385, 3, 3, 2850], [1280, 690, 1080, 490, 3, 3, 3610], [1635, 880, 1385, 630, 3, 4, 4490], [2095, 1125, 1770, 805, 3, 5, 5500], [2680, 1445, 2270, 1030, 3, 6, 6680], [3430, 1845, 2905, 1320, 3, 7, 8050], [4390, 2365, 3715, 1690, 3, 9, 9640], [5620, 3025, 4755, 2160, 3, 10, 11480], [7195, 3875, 6085, 2765, 3, 12, 13620], [9210, 4960, 7790, 3540, 4, 15, 16100], [11785, 6345, 9975, 4535, 4, 18, 18980], [15085, 8125, 12765, 5805, 4, 21, 22310], [19310, 10400, 16340, 7430, 4, 26, 26180], [24720, 13310, 20915, 9505, 4, 31, 30670], [31640, 17035, 26775, 12170, 4, 37, 35880], [40500, 21810, 34270, 15575, 4, 44, 41920], [51840, 27915, 43865, 19940, 4, 53, 48930], [66355, 35730, 56145, 25520, 4, 64, 57060], [84935, 45735, 71870, 32665, 4, 77, 66490]
],
[//citywallCost gid = 31    ];
["Mestno obzidje"], [70, 90, 170, 70, 0, 1, 2000], [90, 115, 220, 90, 0, 1, 2620], [115, 145, 280, 115, 0, 2, 3340], [145, 190, 355, 145, 0, 2, 4170], [190, 240, 455, 190, 0, 2, 5140], [240, 310, 585, 240, 1, 3, 6260], [310, 395, 750, 310, 1, 4, 7570], [395, 505, 955, 395, 1, 4, 9080], [505, 650, 1225, 505, 1, 5, 10830], [645, 830, 1570, 645, 1, 6, 12860], [825, 1065, 2005, 825, 1, 7, 15220], [1060, 1360, 2570, 1060, 1, 9, 17950], [1355, 1740, 3290, 1355, 1, 11, 21130], [1735, 2230, 4210, 1735, 1, 13, 24810], [2220, 2850, 5390, 2220, 1, 15, 29080], [2840, 3650, 6895, 2840, 2, 18, 34030], [3635, 4675, 8825, 3635, 2, 22, 39770], [4650, 5980, 11300, 4650, 2, 27, 46440], [5955, 7655, 14460, 5955, 2, 32, 54170], [7620, 9800, 18510, 7620, 2, 38, 63130]
],
[//earthwallCost gid = 32
["Zemljen zid"], [120, 200, 0, 80, 0, 1, 2000], [155, 255, 0, 100, 0, 1, 2620], [195, 330, 0, 130, 0, 2, 3340], [250, 420, 0, 170, 0, 2, 4170], [320, 535, 0, 215, 0, 2, 5140], [410, 685, 0, 275, 1, 3, 6260], [530, 880, 0, 350, 1, 4, 7570], [675, 1125, 0, 450, 1, 4, 9080], [865, 1440, 0, 575, 1, 5, 10830], [1105, 1845, 0, 740, 1, 6, 12860], [1415, 2360, 0, 945, 1, 7, 15220], [1815, 3020, 0, 1210, 1, 9, 17950], [2320, 3870, 0, 1545, 1, 11, 21130], [2970, 4950, 0, 1980, 1, 13, 24810], [3805, 6340, 0, 2535, 1, 15, 29080], [4870, 8115, 0, 3245, 2, 18, 34030], [6230, 10385, 0, 4155, 2, 22, 39770], [7975, 13290, 0, 5315, 2, 27, 46440], [10210, 17015, 0, 6805, 2, 32, 54170], [13065, 21780, 0, 8710, 2, 38, 63130]
],
[//palisadeCost gid = 33
["Palisada"], [160, 100, 80, 60, 0, 1, 2000], [205, 130, 100, 75, 0, 1, 2620], [260, 165, 130, 100, 0, 2, 3340], [335, 210, 170, 125, 0, 2, 4170], [430, 270, 215, 160, 0, 2, 5140], [550, 345, 275, 205, 1, 3, 6260], [705, 440, 350, 265, 1, 4, 7570], [900, 565, 450, 340, 1, 4, 9080], [1155, 720, 575, 430, 1, 5, 10830], [1475, 920, 740, 555, 1, 6, 12860], [1890, 1180, 945, 710, 1, 7, 15220], [2420, 1510, 1210, 905, 1, 9, 17950], [3095, 1935, 1545, 1160, 1, 11, 21130], [3960, 2475, 1980, 1485, 1, 13, 24810], [5070, 3170, 2535, 1900, 1, 15, 29080], [6490, 4055, 3245, 2435, 2, 18, 34030], [8310, 5190, 4155, 3115, 2, 22, 39770], [10635, 6645, 5315, 3990, 2, 27, 46440], [13610, 8505, 6805, 5105, 2, 32, 54170], [17420, 10890, 8710, 6535, 2, 38, 63130]
],
[//stonemasonCost gid = 34
["Kamnosek"], [155, 130, 125, 70, 2, 1, 2200], [200, 165, 160, 90, 1, 1, 3150], [255, 215, 205, 115, 1, 2, 4260], [325, 275, 260, 145, 1, 2, 5540], [415, 350, 335, 190, 1, 2, 7020], [535, 445, 430, 240, 2, 3, 8750], [680, 570, 550, 310, 2, 4, 10750], [875, 730, 705, 395, 2, 4, 13070], [1115, 935, 900, 505, 2, 5, 15760], [1430, 1200, 1155, 645, 2, 6, 18880], [1830, 1535, 1475, 825, 2, 7, 22500], [2340, 1965, 1890, 1060, 2, 9, 26700], [3000, 2515, 2420, 1355, 2, 11, 31570], [3840, 3220, 3095, 1735, 2, 13, 37220], [4910, 4120, 3960, 2220, 2, 15, 43780], [6290, 5275, 5070, 2840, 3, 18, 51380], [8050, 6750, 6490, 3635, 3, 22, 60200], [10300, 8640, 8310, 4650, 3, 27, 70430], [13185, 11060, 10635, 5955, 3, 32, 82300], [16880, 14155, 13610, 7620, 3, 38, 96070]
],
[//breweryCost gid = 35
["Pivovarna"], [1460, 930, 1250, 1740, 6, 5, 8000], [2045, 1300, 1750, 2435, 3, 6, 9880], [2860, 1825, 2450, 3410, 3, 7, 12060], [4005, 2550, 3430, 4775, 3, 8, 14590], [5610, 3575, 4800, 6685, 3, 10, 17530], [7850, 5000, 6725, 9360, 4, 12, 20930], [10995, 7000, 9410, 13100, 4, 14, 24880], [15390, 9805, 13175, 18340, 4, 17, 29460], [21545, 13725, 18445, 25680, 4, 21, 34770], [30165, 19215, 25825, 35950, 4, 25, 40930]
],
[//trapperCost gid = 36
["Postavljalec pasti"], [100, 100, 100, 100, 4, 1, 2000], [130, 130, 130, 130, 2, 1, 2320], [165, 165, 165, 165, 2, 2, 2690], [210, 210, 210, 210, 2, 2, 3120], [270, 270, 270, 270, 2, 2, 3620], [345, 345, 345, 345, 3, 3, 4200], [440, 440, 440, 440, 3, 4, 4870], [565, 565, 565, 565, 3, 4, 5650], [720, 720, 720, 720, 3, 5, 6560], [920, 920, 920, 920, 3, 6, 7610], [1180, 1180, 1180, 1180, 3, 7, 8820], [1510, 1510, 1510, 1510, 3, 9, 10230], [1935, 1935, 1935, 1935, 3, 11, 11870], [2475, 2475, 2475, 2475, 3, 13, 13770], [3170, 3170, 3170, 3170, 3, 15, 15980], [4055, 4055, 4055, 4055, 4, 18, 18530], [5190, 5190, 5190, 5190, 4, 22, 21500], [6645, 6645, 6645, 6645, 4, 27, 24940], [8505, 8505, 8505, 8505, 4, 32, 28930], [10890, 10890, 10890, 10890, 4, 38, 33550]
],
[//herosMansionCost gid = 37
["Herojeva rezidenca"], [700, 670, 700, 240, 2, 1, 2300], [930, 890, 930, 320, 1, 1, 2670], [1240, 1185, 1240, 425, 1, 2, 3090], [1645, 1575, 1645, 565, 1, 2, 3590], [2190, 2095, 2190, 750, 1, 2, 4160], [2915, 2790, 2915, 1000, 2, 3, 4830], [3875, 3710, 3875, 1330, 2, 4, 5600], [5155, 4930, 5155, 1765, 2, 4, 6500], [6855, 6560, 6855, 2350, 2, 5, 7540], [9115, 8725, 9115, 3125, 2, 6, 8750], [12125, 11605, 12125, 4155, 2, 7, 10150], [16125, 15435, 16125, 5530, 2, 9, 11770], [21445, 20525, 21445, 7350, 2, 11, 13650], [28520, 27300, 28520, 9780, 2, 13, 15840], [37935, 36310, 37935, 13005, 2, 15, 18370], [50450, 48290, 50450, 17300, 3, 18, 21310], [67100, 64225, 67100, 23005, 3, 22, 24720], [89245, 85420, 89245, 30600, 3, 27, 28680], [118695, 113605, 118695, 40695, 3, 32, 33260], [157865, 151095, 157865, 54125, 3, 38, 38590]
],
[//greatWarehouseCost gid = 38
["Veliko skladišče"], [650, 800, 450, 200, 1, 1, 9000], [830, 1025, 575, 255, 1, 1, 10740], [1065, 1310, 735, 330, 1, 2, 12760], [1365, 1680, 945, 420, 1, 2, 15100], [1745, 2145, 1210, 535, 1, 2, 17820], [2235, 2750, 1545, 685, 1, 3, 20970], [2860, 3520, 1980, 880, 1, 4, 24620], [3660, 4505, 2535, 1125, 1, 4, 28860], [4685, 5765, 3245, 1440, 1, 5, 33780], [5995, 7380, 4150, 1845, 1, 6, 39480], [7675, 9445, 5315, 2360, 2, 7, 46100], [9825, 12090, 6800, 3020, 2, 9, 53780], [12575, 15475, 8705, 3870, 2, 11, 62680], [16095, 19805, 11140, 4950, 2, 13, 73010], [20600, 25355, 14260, 6340, 2, 15, 84990], [26365, 32450, 18255, 8115, 2, 18, 98890], [33750, 41540, 23365, 10385, 2, 22, 115010], [43200, 53170, 29910, 13290, 2, 27, 133710], [55295, 68055, 38280, 17015, 2, 32, 155400], [70780, 87110, 49000, 21780, 2, 38, 180570]
],
[//greatGranaryCost gid = 39
["Velika žitnica"], [400, 500, 350, 100, 1, 1, 7000], [510, 640, 450, 130, 1, 1, 8420], [655, 820, 575, 165, 1, 2, 10070], [840, 1050, 735, 210, 1, 2, 11980], [1075, 1340, 940, 270, 1, 2, 14190], [1375, 1720, 1205, 345, 1, 3, 16770], [1760, 2200, 1540, 440, 1, 4, 19750], [2250, 2815, 1970, 565, 1, 4, 23210], [2880, 3605, 2520, 720, 1, 5, 27220], [3690, 4610, 3230, 920, 1, 6, 31880], [4720, 5905, 4130, 1180, 2, 7, 37280], [6045, 7555, 5290, 1510, 2, 9, 43540], [7735, 9670, 6770, 1935, 2, 11, 50810], [9905, 12380, 8665, 2475, 2, 13, 59240], [12675, 15845, 11090, 3170, 2, 15, 69010], [16225, 20280, 14200, 4055, 2, 18, 80360], [20770, 25960, 18175, 5190, 2, 22, 93510], [26585, 33230, 23260, 6645, 2, 27, 108780], [34030, 42535, 29775, 8505, 2, 32, 126480], [43555, 54445, 38110, 10890, 2, 38, 147020]
],
[//WWCost gid = 40 without time
["Čudo sveta"],
[66700, 69050, 72200, 13200, 0, 1],
[68535, 70950, 74185, 13565, 0, 2],
[70420, 72900, 76225, 13935, 0, 3],
[72355, 74905, 78320, 14320, 0, 4],
[74345, 76965, 80475, 14715, 0, 5],
[76390, 79080, 82690, 15120, 0, 6],
[78490, 81255, 84965, 15535, 0, 7],
[80650, 83490, 87300, 15960, 0, 8],
[82865, 85785, 89700, 16400, 0, 9],
[85145, 88145, 92165, 16850, 0, 10], //10
[87485, 90570, 94700, 17315, 0, 12],
[89895, 93060, 97305, 17790, 0, 14],
[92365, 95620, 99980, 18280, 0, 16],
[94905, 98250, 102730, 18780, 0, 18],
[97515, 100950, 105555, 19300, 0, 20],
[100195, 103725, 108460, 19830, 0, 22],
[102950, 106580, 111440, 20375, 0, 24],
[105785, 109510, 114505, 20935, 0, 26],
[108690, 112520, 117655, 21510, 0, 28],
[111680, 115615, 120890, 22100, 0, 30], //20
[114755, 118795, 124215, 22710, 0, 33],
[117910, 122060, 127630, 23335, 0, 36],
[121150, 125420, 131140, 23975, 0, 39],
[124480, 128870, 134745, 24635, 0, 42],
[127905, 132410, 138455, 25315, 0, 45],
[131425, 136055, 142260, 26010, 0, 48],
[135035, 139795, 146170, 26725, 0, 51],
[138750, 143640, 150190, 27460, 0, 54],
[142565, 147590, 154320, 28215, 0, 57],
[146485, 151650, 158565, 28990, 0, 60], //30
[150515, 155820, 162925, 29785, 0, 64],
[154655, 160105, 167405, 30605, 0, 68],
[158910, 164505, 172010, 31450, 0, 72],
[163275, 169030, 176740, 32315, 0, 76],
[167770, 173680, 181600, 33200, 0, 80],
[172380, 178455, 186595, 34115, 0, 84],
[177120, 183360, 191725, 35055, 0, 88],
[181995, 188405, 197000, 36015, 0, 92],
[186995, 193585, 202415, 37005, 0, 96],
[192140, 198910, 207985, 38025, 0, 100], //40
[197425, 204380, 213705, 39070, 0, 105],
[202855, 210000, 219580, 40145, 0, 110],
[208430, 215775, 225620, 41250, 0, 115],
[214165, 221710, 231825, 42385, 0, 120],
[220055, 227805, 238200, 43550, 0, 125],
[226105, 234070, 244750, 44745, 0, 130],
[232320, 240505, 251480, 45975, 0, 135],
[238710, 247120, 258395, 47240, 0, 140],
[245275, 253915, 265500, 48540, 0, 145],
[252020, 260900, 272800, 49875, 0, 150], //50
[258950, 268075, 280305, 51245, 0, 156],
[266070, 275445, 288010, 52655, 0, 162],
[273390, 283020, 295930, 54105, 0, 168],
[280905, 290805, 304070, 55590, 0, 174],
[288630, 298800, 312430, 57120, 0, 180],
[296570, 307020, 321025, 58690, 0, 186],
[304725, 315460, 329850, 60305, 0, 192],
[313105, 324135, 338925, 61965, 0, 198],
[321715, 333050, 348245, 63670, 0, 204],
[330565, 342210, 357820, 65420, 0, 210], //60
[339655, 351620, 367660, 67220, 0, 217],
[348995, 361290, 377770, 69065, 0, 224],
[358590, 371225, 388160, 70965, 0, 231],
[368450, 381435, 398835, 72915, 0, 238],
[378585, 391925, 409800, 74920, 0, 245],
[388995, 402700, 421070, 76985, 0, 252],
[399695, 413775, 432650, 79100, 0, 259],
[410685, 425155, 444550, 81275, 0, 266],
[421980, 436845, 456775, 83510, 0, 273],
[433585, 448860, 469335, 85805, 0, 280], //70
[445505, 461205, 482240, 88165, 0, 288],
[457760, 473885, 495505, 90590, 0, 296],
[470345, 486920, 509130, 93080, 0, 304],
[483280, 500310, 523130, 95640, 0, 312],
[496570, 514065, 537520, 98270, 0, 320],
[510225, 528205, 552300, 100975, 0, 328],
[524260, 542730, 567490, 103750, 0, 336],
[538675, 557655, 583095, 106605, 0, 344],
[553490, 572990, 599130, 109535, 0, 352],
[568710, 588745, 615605, 112550, 0, 360], //80
[584350, 604935, 632535, 115645, 0, 369],
[600420, 621575, 649930, 118825, 0, 378],
[616930, 638665, 667800, 122090, 0, 387],
[633895, 656230, 686165, 125450, 0, 396],
[651330, 674275, 705035, 128900, 0, 405],
[669240, 692820, 724425, 132445, 0, 414],
[687645, 711870, 744345, 136085, 0, 423],
[706555, 731445, 764815, 139830, 0, 432],
[725985, 751560, 785850, 143675, 0, 441],
[745950, 772230, 807460, 147625, 0, 450], //90
[766460, 793465, 829665, 151685, 0, 460],
[787540, 815285, 852480, 155855, 0, 470],
[809195, 837705, 875920, 160140, 0, 480],
[831450, 860745, 900010, 164545, 0, 490],
[854315, 884415, 924760, 169070, 0, 500],
[877810, 908735, 950190, 173720, 0, 510],
[901950, 933725, 976320, 178495, 0, 520],
[926750, 959405, 1000000, 183405, 0, 530],
[952235, 985785, 1000000, 188450, 0, 540],
[1000000, 1000000, 1000000, 193630, 0, 550]//100
],
[//horsedtCost gid = 41
["Konjsko napajališče"], [780, 420, 660, 540, 5, 4, 2200], [1000, 540, 845, 690, 3, 4, 3150], [1280, 690, 1080, 885, 3, 5, 4260], [1635, 880, 1385, 1130, 3, 6, 5540], [2095, 1125, 1770, 1450, 3, 7, 7020], [2680, 1445, 2270, 1855, 3, 9, 8750], [3430, 1845, 2905, 2375, 3, 11, 10750], [4390, 2365, 3715, 3040, 3, 13, 13070], [5620, 3025, 4755, 3890, 3, 15, 15760], [7195, 3875, 6085, 4980, 3, 19, 18880], [9210, 4960, 7790, 6375, 4, 22, 22500], [11785, 6345, 9975, 8160, 4, 27, 26700], [15085, 8125, 12765, 10445, 4, 32, 31570], [19310, 10400, 16340, 13370, 4, 39, 37220], [24720, 13310, 20915, 17115, 4, 46, 43780], [31640, 17035, 26775, 21905, 4, 55, 51380], [40500, 21810, 34270, 28040, 4, 67, 60200], [51840, 27915, 43865, 35890, 4, 80, 70430], [66355, 35730, 56145, 45940, 4, 96, 82300], [84935, 45735, 71870, 58800, 4, 115, 96070]
]
];


var ZadnjaNaloga = "analiziranje.izvedinaloge();";
var ScriptVersion = "5.02";



try {
    replaceTimer();
    //unsafeWindow.auto_reload = 2;
    /*test(unsafeWindow.top.location.href)
    if (window.location.href == unsafeWindow.top.location.href) {
        unsafeWindow.auto_reload = 2;
        
        
    }*/
}
catch (err) {
    /*unsafeWindow.auto_reload = 2;
    replaceTimer();*/
    
}
var vrnjeno = false;
var TTserver = "traviantactics.com";//"86.58.69.167:8080"; //"78.138.117.119";

if (document.location.href.indexOf("www.travian") != -1 && document.domain.indexOf(".at") == -1 && (document.domain != "www." + TTserver && document.domain != TTserver && document.domain != "www.10minutemail.com" && document.domain != "10minutemail.com")) {
    exit();
}


Prioriteta = [[prevodi.veryhigh, 1], [prevodi.high, 2], [prevodi.normal, 3], [prevodi.low, 4], [prevodi.verylow, 5]];

var slika = "data:image/gif,GIF89a%84%00l%00%F6%001%FF%FF%FF%DE%DE%DE%9B%9B%9B~~~%F8%DFJ%A3%BB%F8%C1%C1%C1%A2%BA%F7%C2%C2%C2%B5%B5%B5%EE%D7P%BC%BC%BC%F5%E4%7F%F5%DDI%C3%C3%C3%BE%BE%BE%BF%BF%BF%9E%B5%F1%C9%C9%C9%F9%DFJ%CC%CC%CC%C0%C0%C0%E9%D5%5E%A1%B9%F5%A5%B9%E9%D8%D8%D8%E1%E1%E1%F2%F2%F2%F7%EC%AF%C8%C8%C8%A1%B6%EE%F3%DBH%DF%E5%F8%D4%DE%F7%EE%DDx%F1%D9H%C5%C5%C5%EE%DBk%EC%F1%FB%FB%F6%DD%ED%DCu%B2%C2%ED%F6%E8%97%F0%F3%FB%E1%E7%F9%E7%E7%E7%FB%F8%E3%C7%D5%F6%B9%B9%B9%EE%D9%5D%EA%D3F%EA%EA%EA%BC%CB%F5%D1%D1%D1%F4%F4%F4%AE%C0%EE%F8%F0%C4%A0%B6%F3%B4%C4%EE%F6%E1h%B0%C3%F6%F6%E0V%A8%BD%F6%EF%D7G%F9%F2%C7%B7%C7%ED%ED%DE%7F%CA%CA%CA%A6%BA%ED%C4%C4%C4%9D%B3%EF%97%AD%E6%BD%BD%BD%E6%CFD%FB%FB%FB%E8%E8%E8%B7%B7%B7%B8%C7%EF%9D%B0%E4%EF%D9Q%EF%DE%80%C6%C6%C6%A6%A6%A6%99%B0%E9%A2%B9%F6%9B%B2%EC%A8%BC%EF%F9%F3%C9%E8%D3P%B4%C4%ED%A0%B4%E9%AC%BE%ED%EA%D7e%9D%B2%E8%B3%B3%B3%EE%EE%EE%B0%C1%EB%EE%E1%8E%D5%D5%D5%C5%D1%F2%F2%DEf%F3%DDV%83%83%83%F8%F0%C7%AC%BE%EB%AE%C1%F3%F0%D8G%E4%E4%E3%ED%DAe%E6%D0K%DF%DF%DF%F7%EF%C4%A7%BD%F4%F7%F0%C4%9D%9D%9D%A9%BB%EC%EA%DAx%C0%CD%EF%F6%EF%BE%A5%BA%F1%C3%B7m%E0%CD%5B%DB%DB%DB%C8%D3%F0%A8%BA%E9%AA%BC%EA%A5%BC%F3%94%9F%BD!%F9%04%01%00%00%00%00%2C%00%00%00%00%84%00l%00%00%07%FF%80J!AYA%86%87M%89%8A%8B%8C%8D%8E%8FM%87%92%93%94%95%96%97%98%99%9A%92%85!JJ%00%2Fu!%20%A5%A6%A7%A8%A9%AA%AB%AC%AD%AE%AF%B0%B1%B2%A7!u%7B%A0A%2F%2C%26%2B%BD%BE%BF%C0%C1%C2%C3%C4%C5%C6%C7%C8%C9%CA%BE%2C%2F%60-J%60!%BB%26%D5%D6%D7%D8%D9%DA%DB%DC%DD%DE%DF%E0%E1%E2%D6%2C!%60%06%26h%7B%A5%2C%ED%EE%EF%F0%F1%F2%F3%F4%F5%F6%F7%F8%F9%F9%A8%7B%60R-s%EA%BC%08A%B0%A0%C1%83%08%13*%5C%C8%B0%A1%C3%87%10%23%1A%14%C5G%40%00%0CA%EA%8C%D9%F8%A2%A3%C7%8F%20C%8A%1CI%B2%A4%C9%93(S%8E%1C%F3b%A3%CB1u%B2%CC%B1%A8e%8B%0EE4%9A%D0%D8%C9%B3%A7%CF%9F%40%83%0A%1DJ%B4%A8%D1%A3%3Fu.2%94%02%8D%16%8BS0%CC%D9be%CB%8D4X%D3%F0%D8%CA%B5%AB%D7%AF%60%C3%8A%1DK%B6%AC%D9%B3%3C%B2%A6%D9%C2vK%9F9s%FF%B4L%81%DAE%8B%16%0Fx%EF%DC%F1%03%A7%AF%8F%BF%80%03%0B%1EL%B8%B0%E1%C3%88%13%2BF%DC%17%8E%1F%BDx%3D%D8%B5%3B%E5%88%C5%23%98%A7T%A9b%C4H%84%1C%17BS9%40%BA%B4%E9%D3%A8S%AB%5E%CD%BA%B5%EB%D7%AB%A9%84%0E%1D!%82%91%CDS*c%B6%1C%20%B3f%CE%B5A_%18M%BA%80%F1%E3%C8%93%2B_%CE%BC%B9%F3%E7%D0%A3%23%3F-%FBB%0E%DB%B7s%EF%E6%ED%7B%B3%E7%CF%A1KK%1FO%BE%BC%F9%F3%A5C_%EF%5CE%FB%EE%CBGr%7B%0F.Z%FC%F9%FB%F8%F3C%A7%AE%1E%7B%7B%DD%98%C1%17%9Fw%9E%097%1Cl%08%26%A8%E0%82%0C%1EP%1Dm%B6%E1%06%20w%99%11H%DFl%A2Q%A1%E1%86%1Cv%E8%A1%87%18%86(%E2%88%24%96h%E2%89(%5E%E7_n%13%0A(%1Fg%DF%E5%60%20%8A4%92(%E3%8D8%E6%A8%E3%8E%3C%F6%E8%E3%8F2%D6%E6%DF%7F%DBQ%18%DFo0%0A%19%1C%FF%90L%E2%A8%E4%93PF)%E5%94TVYeg%EC%11Y%A4%80Gn%06%23%96V%86%09%25%96d%96i%E6%99h%A6%A9%E6%9Aiz%F9%DF%84%01%F66E%17tva%C4%5D%91%E5%A9%E7%9E%7C%F6%E9%E7%9F%80%06*%E8%A0%7Cjqg%9DtN%E1DeP%D9%85%C1%A3DD*%A9%15%94Vj%E9%A5%98fz%A9%A4%9Cv%EA%E9%A7%A0%86*%EA%A8%A4%3Ej%EA%A3%94Y%D4%05%06%7D%A0%D1%D6%0D%B0%C6*%EB%AC%B4%D6j%EB%AD%B8%E6%AA%EB%AE%BC%CA%DA%D6%AFh%04%8BF%1F%18tA%13%1F%60%A4%90%C5%B2%3A4%EB%EC%B3%D0F%2B%ED%B4%D4Vk%ED%B5%D8f%DB%EC%B2%DCv%BBl%0A)%80%C1%87%13%16%05%C1%07%1A%C9%82%AB%EE%BA%EC%B6%EB%EE%BB%F0%C6%2B%EF%BC%F4%D6k%2F%18%F8%A2%81%C1%1F%16%05%E0%84%13%A7%06%2C%F0%C0%04%17l%F0%C1%08'%AC%F0%C2%06%3B%F1%87%19%FF%98P%81%00f%0C%60%F1%FF%C5%18g%AC%F1%C6%1Cw%EC%F1%C7%20%87%2C%F2%C8%18%9B!%80%01%D0%04P%81%14%02%B4%EC%F2%CB0%C7%2C%F3%CC4%D7l%F3%CD8%E7%AC3%CC(%83%A2%84%09%01%04-%F4%D0D%17m%F4%D1H'%AD%F4%D2L7%ED4%D1-%40%03%C0%D4TWm%F5%D5Xg%AD%F5%D6%5Cw%ED%F5%D7%60%87-%F6%D8d%97m%F6%D9h%A7%AD%F6%DAl%B7%ED%F6%DBp%C7-%F7%DCt%D7m%F7%DDx%E7%AD%F7%DE%7C%F7%ED%F7%D9Jp%20%84%08B%14%5E8%14%88'%AE%F8%E2%8C7%EE%B8%E2%86G.%F9%E4%94Wn%F9%E5%98g%5E8%E1%1C%7C%02%00%07ap%60%C7%1Bq%C4%81%C3%E9%A8%A7%AE%FA%EA%AC%B7%EE%FA%EB%B0%C7.%FB%EC%AA%97%5E%FA%1B%B8%E3n%07%E8*%80B%07%07W%9C%E0%C2%F0%C4%17o%FC%F1%C8'%AF%FC%F2%CC7%EF%FC%F3%D0%0F%7F%C2%15%1C%D0%B1%86%12(pp%C6%09%DCw%EF%FD%F7%E0%87%2F%FE%FF%F8%E4%97o%FE%F9%E8%A7%EF%3D%F5t%18%F0%05%17*%D8q%C6%19%40%D4o%FF%FD%F6_%A1%FF%FE%FC%F7%EF%BF%FE%F8%0B%A0%00%07H%C0%02%1A%F0%80%07%9C%9F%02%CF%60%07%15%94%40%0Ak%E0B%E88%40%C1%0AZ%F0%82%18%CC%A0%067%C8%C1%0Ez%F0%83%20%0C%E1%05%C3%C0%05%8BX%40%04a%08%83%0AV%C8%C2%16%BA%F0%850%8C%A1%0CgH%C3%1A%DA%F0%868Ta%0AEP%C2%00%60%A1%04%22P%1C%03%86H%C4%22%1A%F1%88HL%A2%12%97%C8%C4%26%3A%F1%89JD%9C%E1D%20%82%12%60%C1%22X%B0%00%17%D8%C0E2x%D1%8B%3B%08%A3%18%C7H%C62%9A%F1%8ChL%A3%1A%D7%C8%C66%EE%E0%8B%5E%E4%22%17%B9%C0%05%0B%B4%C1%22m%C0%02%16%14%A0%80'%C4%E0%09e%08d%19z%40%C8B%1A%F2%90%88L%A4%22%17%C9%C8F%3A%F2%91%8F%14d%20%9F%F0%04%05%ECQ%8FXH%82E%92%90%04%19x%F2%FF%07%3FP%C3%08%3E%F0%81%06%98%92%00%A8L%A5*W%C9%CAV%BA%F2%95%B0%8C%A5%2Cg%F9JS%9A%92%94%23P%C3%0F%3C%E9INj2%00%9C%E4%25(%D5%40J%5B%B2r%02%C8L%A62%97%C9Lf%D2%F2%99%D0%8C%A6%2Bm%F9%81%5C%EE%92%97%BE%DCd'%3F%19%CAb6%40%95%CD%0C%A78%C7I%CEr%9A%F3%9C%E4d%E5-%AD%C9K%19d%13%98%DB%94%C10%BD%F9%CDU%A2%B3%9C%D2%CC%A7%3EgIMvb%93%93%DA%14f(GY%CAS%EE%F3%A0%08Mh-%A9YMP%B6%F3%9D%C1%14%A6(IYP%5BZ%F4%A2%18%CD%A8F7%CA%D1%8Ez%F4%A3%20%A5%A8%3F%7B%09%D1x%CAs%A0%14%A5'HW%9A%D2%96%BA%F4%A50%8D%A9Lg*%D3%11X%F3%9A%24%05(%3C%DByR5%88%92%A04%0D*LmJ%D4%A2%1A%F5%A8HM%AAR%97%CAT%9B%FAT%97%0E%FDgIMz%D2P%3E%B5%A9X%FF-%EAS%7D%0A%CA%AEz%F5%AB%60%0D%ABX%C7J%D6%B2~%95%A7%EE%F4%E5%2F%93%90GL%F2%F1%AD%94%8C%AB%5C%E7J%D7%BA%DA%95%92o%CD%AB%5E%F7%CA%D7%BE%FA%F5%AF%80%ED%EB%251%A9%C76%B4%E1%97y%B4%80b-%10%83%C6%3A%F6%B1%90%8D%ACd'K%D9%CAZ%F6%B2%98%CD%2Ce%17%CBY%0B%60%E1%8E%3E%D4b%09FK%DA%D2%9A%F6%B4%A8M%ADjW%CB%DA%D6%BA%F6%B5%B0%E5B%09d%5B%C7%2B%06%40%8B(%40%01%15w%CB%DB%DE%FA%F6%B7%C0%0D%AEp%87K%DC%E2%1A%F7%B8%BB%A5%C3l%F3%60%910X%A0%04t%C8%ADt%A7K%DD%EAZ%F7%BA%D8%CD%AEv%B7%CB%DD%EEzw%BA%25%B0%00%1E%2C%B2%06%3C%E4%A1%B3%E8M%AFz%D7%CB%DE%F6%BA%F7%BD%F0%8D%2F%7C%F3%80%07%88%AD%E1%0B%06%A0%18%C9%F6%CB%DF%FE%FA%F7%BF!3%99%FB%94%B0%06%03%B0lg%08N%B0%82%17%CC%60%9C%19%E0z%00P%C2%FF%17%D6%F0%B4%0A%5B%F8%C2%18%CE0%D3%EE%0B%8A%BFy%F8%C3%20%0E%B1%88GL%E2%12%9B%F8%C4(N%B1%8AW%CC%E2%16%BB%F8%C5%5CSB%00(%20%01%0A%D8%F8%C68%CE%B1%8Ew%CC%E3%1E%FB%F8%C7%40%0E%B2%90%87l%E3%1A%BB%C1sz%A8A%00%D6%10%B5%26%B7%60%09P%8E%B2%94%A7L%E5*%5By%09N%CE%B2%96%B7%CC%E5.%7B%F9%CB%60%DE2%85k%90%01P%0CA%0F3%D8%80%9Am%C0%E66%BB%F9%CDp%8E%B3%9C%E7L%E7%3A%DB%F9%CEx%8E%B3%9A%F7%CC%E7%19%E8!%0A%D0%20%01%9A%F9L%E8B%1B%FA%D0%88N%B4%A2%17%CD%E8F%3B%3A%D1~%26%01%09%BE%E0%80%0C%ACa%06%98%CE%B4%A67%CD%E9N%7B%FA%D3%A0%0E%B5%A8GM%EARgz%09k%C8%40%11%20h%80%1A%E8%C1%0D%1A%88%B5%ACgM%EBZ%DB%FA%D6%B8%CE%B5%AEw%CD%EB%5E%F7%DA%0D%C0%0E%40%92%0D%20%07%0D%3C%60%085%10%83%B23%FF%C0%ECf%3B%FB%D9%D0%8E%B6%B4%A7M%EDj%5B%FB%DA%D8%9E%B6%B2%B7%AD%EC%1AH%00%02r%08%C0%02%1CP%E3%1B%D7%80%025H%B7%BA%D7%CD%EEv%BB%FB%DD%F0%8E%B7%BC%E7M%EFz%AF%1B%DD%3A%1E%82%04%1C%00%83p%C3%00%09%06p%40%11%8A%40%82(D%A1%03%08%97%80%C2%87%C0%F0%86%3B%FC%E1%10%8F8%C3%15N%F1%8A%5B%FC%E2%18%CF%B8%C67%CE%F1%8B%23%BC%03%06'%C1%C0%1D%60%00%03T%00%09L%B0H%02%60%00%83%05%20%01%09%10%A8%80%01%100%F0%9AK%FA%E68%CF%B9%CEw%CE%F3%9A%FB%7C%E0%22%FF%B9%CD%85%3Et%A2%1B%FD%E8H%AF9%02L%0E%81%97%2F%60%01%2C%87A%02T%9E%80%AA%B3%FC%E9Hx%C0%03b%5E%F2%AE%CF%1C%01%60%0F%BB%D8%C7N%F6%B0%7B%FD%EChO%BB%DA%D7%CE%F6%B6%BB%BD%02%10x%00%12%9E%CEr%26T%BD%EA%5E%A0z%02%98pu%97o%5D%E6%25%07%BB%03%06O%F8%FF%C2%1B%FE%F0%88%1F%7C%D9%17%CF%F8%C6%3B%FE%F1%8D%EF%3A%DC%E5%0Eu%18%D8%FD%EEy%0F%C0%DD%F9%DEr%BFC%A0%EB%82O%BC%E8GO%FA%D2%9B%FE%F4%A8W%BC%D9K%1E%F7%B9%D7%FD%EE%09%C8%FC%E6%FB%9Eu%AE%07%1E%01%A9%3F%3D%E4w%CF%FB%DE3%5E%F2%AD%AF%FC%E5%F1%AE%F7%95w%3E%EB%7FG%BB%EF%17%EF%F6%E6%3B%FF%F9%D0%2F%F9%E4%E7.%7C%D8%CB%FE%EEQ%C7%BA%D6!%60%FB%E8C%BF%02%E0%0F%7F%F8M.~%F1%93%BF%FC%E0%3F%3F%FA%D7%CF%FE%F6%C3%3D%EE%94%AF%BC%D4%AD_%7C%CE%3F%DD%E5%C8%DF%3A%F7%F7%CF%FF%FE%FB%FF%FF%DC%A7u%028%80%04X%80%06x%80%08%98%80%0AX%80N'%7F%C3G%7C%9A7%7B%7D%87u%2F%97%7F%0B%B8%80%15%98%81%F7%B7%81X%C7%81%1BH%7D%1E%E8r!8%82%24X%82%1C%18u%0F%18%7B%99%E7%05%B0%C7y%13h%820%18%8328%834X%83%F7%17u8%98%FF%82*%A8rL%E0%82%1FX%81%17%18%84%02%98%81%0D%18%82%20%E8%81G%C8%81Ih%835%88%83(Xu*%D7rYg~j%B7%7Cc%B7v%ED%A7~%E5%A7%85%E6%E7~%5E%F8%85%EC%A7u%1A(u%16%01%03%0F%80%7B%02Gp%3Bgpl%D8%86n%F8%86p%18%05%3C7%87tX%87vx%87vXs%86%87%00%15%F0%00%FD%26n%10%40%02%1FWq%12W%88%86x%88%1D%97%88%8A%B8%88%8C%F8q%8E%88p%24%00%01%09%10n%14%F0%00Epp%8F%98%89%9A%B8%89%9C%D8%89%9E%F8%89%A0%18%8A%A2%B8%89mX%04%0F%C02%B0%B6rrW%7B%00%D8%8A%AE%F8%8A%B0%18%8B%B28%8B%B48%80D%98u0%20%05%F6%85_%02%00%60%BE%F8%8B%C0%18%8C%19c2%0B%F0%05%04%86%04%07%D6%60%CA%B8%8C%CC%D8%8C-%23%05%0F%00a%12%B6%06n%A0a%D6x%8D%D8%98%8DA%E3%06%1C%06c%DE%F8%8D%E0%18%8E%E28%0F%8E%E4X%8E%E6x%8E%E8%98%8E%EAxb%81%00%00%3B";
var LeftGray = "data:image/gif,GIF89a%0B%000%00%F6%00%00%86%86%86%87%87%87%89%89%89%8A%8A%8A%8B%8B%8B%8C%8C%8C%8D%8D%8D%8F%8F%8F%90%90%90%91%91%91%92%92%92%93%93%93%95%95%95%96%96%96%97%97%97%98%98%98%99%99%99%9A%9A%9A%9B%9B%9B%9C%9C%9C%9D%9D%9D%9F%9F%9F%A0%A0%A0%A1%A1%A1%A2%A2%A2%A3%A3%A3%A4%A4%A4%A5%A5%A5%A6%A6%A6%A7%A7%A7%A8%A8%A8%A9%A9%A9%AA%AA%AA%AC%AC%AC%AD%AD%AD%AF%AF%AF%B0%B0%B0%B1%B1%B1%B2%B2%B2%B3%B3%B3%B5%B5%B5%B6%B6%B6%B9%B9%B9%BB%BB%BB%BC%BC%BC%BD%BD%BD%BE%BE%BE%BF%BF%BF%C0%C0%C0%C2%C2%C2%C3%C3%C3%C4%C4%C4%C5%C5%C5%C6%C6%C6%C7%C7%C7%C8%C8%C8%C9%C9%C9%CA%CA%CA%CB%CB%CB%CC%CC%CC%CD%CD%CD%CE%CE%CE%CF%CF%CF%D0%D0%D0%D1%D1%D1%D2%D2%D2%D4%D4%D4%D5%D5%D5%D6%D6%D6%D7%D7%D7%D8%D8%D8%D9%D9%D9%DA%DA%DA%DB%DB%DB%DC%DC%DC%DD%DD%DD%DE%DE%DE%DF%DF%DF%E0%E0%E0%E1%E1%E1%E2%E2%E2%E3%E3%E3%E4%E4%E4%E5%E5%E5%E6%E6%E6%E7%E7%E7%E8%E8%E8%E9%E9%E9%EA%EA%EA%EB%EB%EB%ED%ED%ED%EE%EE%EE%EF%EF%EF%F0%F0%F0%F1%F1%F1%F2%F2%F2%F3%F3%F3%F4%F4%F4%F5%F5%F5%F6%F6%F6%F7%F7%F7%F8%F8%F8%F9%F9%F9%FA%FA%FA%FB%FB%FB%FC%FC%FC%FD%FD%FD%FE%FE%FE%FF%FF%FF%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00!%F9%04%01%00%00m%00%2C%00%00%00%00%0B%000%00%00%07%FE%80m%82%83%83%3A'%84%83%1F%04%11%1F%88(%04%1D%3DQd%84%17%11%3Adhll%83%13%13M%9Al%9A%82'%0BH%9B%A2%9B%82%04%3Ah%9Ad%A2hm%1F%1D%5Ch_d%99%B9m%00%98_%BFd%5C%5C_%3A%0EH_%C3%C9%C2%23%1DQVSV%D1%CFV%1D%CDQ%D7S%D7%D7%D5M%DDHM%DF%DD%B4%E0%E0H%E6%E6%2F%13%40%E5%E1%DFH%0B4%EC%EDm%0B%1FQ%E1%ECm%E9%3A%E5%F7%E6%82%0E.%14%91%87D%10%10%03%23%8A%DC%1B%D8dP%0C%02%09%BB%81%23%A4%C3%C0%84%15E%90DA%D4%E6%C2%82%0B%1F%5EplS%E4D%04%02%23%05%19%1A%D9aQ%07G%04%3EH%92%D5%E9R%26U%82.L(%E2%CA%15%A56%23%1C%F0%24%83%ECW%9B%26%0Bb%7C%B1%C2e%8A0.m%3A%5Cpf%C5Y%D3)%BCVd%D3%D6-J%B1%1E%E4%BC%99%3Bq%01H%91%B3h%CFV%03%02%A4G%8F%B6No%7BH%D5%D1C%07%0D%1Dx%F1%D2%CA%CB%17%EF%8B%081%FA%E6%7D%B7%A2%C7%5D%BBnu%D0%EB%90%97%86a%BCmV%00%EE%7B%17%E0%84%18u%F9%1A%FCH%D9%A1%81%0E%8E%F1%D2%20%D4%C3%40%84%13%8E%81p%FC%60%F1%C3!%8EHNL0%10%08%00%3B";
var RightGray = "data:image/gif,GIF89a8%010%00%87%00%00%00%00%00%8A%8A%8A%8C%8C%8C%8D%8D%8D%8E%8E%8E%8F%8F%8F%90%90%90%91%91%91%92%92%92%93%93%93%94%94%94%95%95%95%97%97%97%99%99%99%9A%9A%9A%9B%9B%9B%9C%9C%9C%9E%9E%9E%9F%9F%9F%A0%A0%A0%A1%A1%A1%A2%A2%A2%A3%A3%A3%A4%A4%A4%A5%A5%A5%A6%A6%A6%A7%A7%A7%A8%A8%A8%A9%A9%A9%AA%AA%AA%AB%AB%AB%AC%AC%AC%AD%AD%AD%AE%AE%AE%AF%AF%AF%B0%B0%B0%B1%B1%B1%B2%B2%B2%B3%B3%B3%B4%B4%B4%B5%B5%B5%B6%B6%B6%B7%B7%B7%B8%B8%B8%B9%B9%B9%BA%BA%BA%BB%BB%BB%BC%BC%BC%BD%BD%BD%BE%BE%BE%BF%BF%BF%C0%C0%C0%C1%C1%C1%C2%C2%C2%C3%C3%C3%C4%C4%C4%C5%C5%C5%C6%C6%C6%C7%C7%C7%C8%C8%C8%C9%C9%C9%CA%CA%CA%CB%CB%CB%CC%CC%CC%CD%CD%CD%CE%CE%CE%CF%CF%CF%D0%D0%D0%D1%D1%D1%D3%D3%D3%D4%D4%D4%D5%D5%D5%D6%D6%D6%D7%D7%D7%D8%D8%D8%D9%D9%D9%DA%DA%DA%DB%DB%DB%DC%DC%DC%DD%DD%DD%DE%DE%DE%DF%DF%DF%E0%E0%E0%E1%E1%E1%E2%E2%E2%E3%E3%E3%E4%E4%E4%E5%E5%E5%E6%E6%E6%E7%E7%E7%E8%E8%E8%E9%E9%E9%EB%EB%EB%EC%EC%EC%ED%ED%ED%EE%EE%EE%EF%EF%EF%F0%F0%F0%F1%F1%F1%F2%F2%F2%F3%F3%F3%F4%F4%F4%F5%F5%F5%F6%F6%F6%F7%F7%F7%F8%F8%F8%F9%F9%F9%FA%FA%FA%FB%FB%FB%FC%FC%FC%FD%FD%FD%FE%FE%FE%FF%FF%FF%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00!%F9%04%03%00%00q%00%2C%00%00%00%008%010%00%00%08%FF%00-%08%1CH%B0%A0%C1%83%08%13*%5C%C8%B0%A1%C3%87%10%23J%9CH%B1%A2%C5%8B%16%2F%60%B8%E0%C1%06%938%20C%82%14A%B2%A4%C9%93(S%AA%5C%C9%B2%A5%CB%93%23b%CA%9CI%B3%A6%CD%9B8s%EA%DC%C9%B3%A7%CF%9F%40%83%0A%1DJ%B3%84%D1%0F%12%12%20%98!%12%A4%9B%A7P%A3J%9DJ%B5%AA%D5%ABX%B3J%7D%C3%B5%AB%D7%AF%60%C3%8A%1DK%B6%AC%D9%B3h%D3%AA%5D%CB%B6%AD%DB%AFm%D8%C0y%13%26%0A%0B%06%0E%92%88%7C%CB%B7%EFZ8%80%03%0B%1EL%B8%B0%E1%C3%88%13%2B%5E%CC%B8%B1%E3%C7%90%23K%1E%FC%C6%CD%1B%C0%97%B7l(%40%23%E4%E4%CF%A0C%8B%1EM%BA%B4%E9%D3%A8%19%BFic%F9%E9%9A%15%09%86%80LM%BB%B6%ED%DB%B8s%EBV%CD%153%9C4p%DC%8C%20%00%92%8D%F1%E3%C8%93%2B_%CE%BC%B9%F3%E7%D0%A3K%9FN%BD%BA%F5%EB%D8%B3k%DF%BE%7D%CD%1A6j%D0%18%FF7%03'%0C%85%0Bq%D0%A8_%CF%BE%BD%FB%F7%F0%E3%CB%9FO%BF%BE%FD%FB%F8%F3%EB%DF%CF%BF%BF%FF%FF%FE%9Dq%06%7Bj%B0aF%19m%F4P%00%13d4%E8%E0%83%10F%08a%19%14Vh%E1%85%14%9A%A1%E1%86%1Cv%A8%A1%80%20%86(%E2%88%1BJh%E2%89(%A6%A8%E2%8A%2C%A2%88%E1%8Bex(%E3%884%86%B8a%85%0E%8E%A1%A3%18%3C%86%E1%23%18%40~!%E4%90D~%01%E4%91H%FA%A8%E4%92%3C6%E9%E4%93PF9%06%19S%9Aq%C6%17%14%8Eq%06%17%16%9CP%24%91H%86)%E6%98d%26%B9%E4%99h%A6%A9%E6%9A_%B6%E9%E6%97%60%BC)%E7%9Ct%CEY%E6%9Dd%AE%A9g%9Ab%9C)f%91%5E%04*h%17%84%16j%E8%A1%85%0A%AA%E8%A2%81%D6Yg%90%60%84!F%A4%5EH*%86%0A%0Ch%A1%E9%A6%9Cv%EA%E9%A7%A0z%BA%C5%A8%A4%96j%EA%A9%A8%A2%1A%EA%AA%AC%B6%EA%EA%AB%B0%C6%FF%EAj%AA%B4%D6%3A%AA%AC%B8%CAj%EB%AE%B5j%B1%05%17%5D%60%D1E%0E%01Pa%EC%B1%C8%26%AB%EC%B2%CC6%EB%EC%B3%D0F%2B%ED%B4%D4Vk%ED%B5%D8f%AB%ED%B6%DC%22%7B%05%14TL1%85%16%3C%14%F0%C4%B9%E8%A6%AB%EE%BA%EC%B6%EB%EE%BB%F0%C6%2B%EF%BC%F4%D6k%EF%BD%F8%E6%AB%EF%BE%FC%F6%9Bn%14L%3C%E1%04%14U%E8p%40%13%08'%AC%F0%C2%0C7%EC%F0%C3%10G%2C%F1%C4%14Wl%F1%C5%18g%AC%F1%C6%14%3B%E1%F1%C7%20%87%2C%F2%C8%24%97l2%C8Lx%2Cp%146%08%C0%B1%C6L%C4%2C%F3%CC4%D7l%F3%CD4%BF%AC%F3%CE%3CC%8C%F3%CF%40%C7%CCp%C8%EBBa%F4%D1H'%AD%F4%D2G%FB%7B.%C8M0%01%85%13KH%3D%C5%0A%03%F0%1C%F4%CCKt%ED%F5%D7%60%7B%AD%C4%D8d%97m%F6%D9%5D%9F%AC%F6%DAl%B7%ED6%C5%5B%87-%F7%12g%D7M%F6%D72'%0C2%BAGG%FF%E1%F7%DF%80%07%EE7%D3%84%17n%B8%D1%0A%2F%91%04%14%01%A7%EC%04%07%12%90%8C%B1%DB%F7%1EN%F8%D3ng%AE%F9%E6%9C%EF%1D%AF%E5P%08.%FA%DFMc%EED%C22%8B%3Dv%12%AC%B7%EE%FA%EBI%D8m%F6%DC%B4%D7~z%13%03Gq%C4%C0LD%C1C%039%F4lq%E7%C4%17%EF%B1%F0%C8%BFl%BC%C9%0C%DB%5C%7B%ED%5BG%1F%FD%D3O%40%B1%C4%11JH%C1D%08%08%C4%91%FC%C4%CB%87%FF%F6%F7%E4_%2C%FE%C8%E5%A7%CF%F0%D4U%3B%F1D%CCQ8Q%03%03L%A9%EF%F0%F9%F8%E7%AF%FF%FE%FC%F7%EF%3F%D1Px%1F%13%9A%10%85%1B0%00%3Dq%F8%9F%02%17%C8%C0%06%3A%F0%81%CB%1B%60%D4%9A%F0%04)%3CA%06%0C%90%40HF%C7%C1%0Ez%F0%83%20%0C%A1%E0%A4%40%C2%12%9A%F0%84(L%A1%0AW%C8%C2%16%BA%F0%850%8C%A1%0CgH%C3%1A%DA%F0%84T%20!%15%A2%D0%04%1F%80%40%01%1A%10%C9%0E%FF%86H%C4%22%0EQ%07HL%A2%12%97%C8%C4%2621%07P%8C%A2%14%A7H%C5*Z1%07F%CC%A2%16%B7%C8%C5.z%F1%8B%60%24%A2%13%C7H%C6%2B%9A%F1%8CM%CC%22%0F%D6%C8F%1E%F4%A0%07m%8Cc%1C%C3H%C7.B%B1%06(%C8%40%03%14%80%83%A6%14%E0%8F%80%0C%A4%20%0B%40%80B%1A%F2%90%88L%A4%22%0B9%80F%3A%F2%91%90%1C%80%00%26I%C9JZ%B2%92%8D%1C%A4%267%C9%C9Nn%D2%00%A0%0C%A5(A%E9%C9R%06r%91%A8Td%24Wy%C9V%0A%E0%91%87%04%A4(%0F%40%CB%03%20%E0%96%08H%80.%95%82%CB%5E%FA%B2%96%C0%0C%A60%87IL%60%12%20%01%07%10%C0%01%20%90%83%A6%80%84%02%D0%8C%A64)P%81jZ%F3%9A%D8%CC%A66%AF)%91%0Bx%F3%9B%E0%0Cg8%05%B2%CDr%9A%F3%9C%E8%AC%A64%D3%C9N%8C%08D%9C%F0%D4%08%06%E6I%CFz%D6%13%9C%04%B9%A64'%C0%FF%CF%09H%E0%9F%00%0D(%40%FBIP~N%F3%A0%08M%A8B5b%81%0E%D4%A0%09%CE%04%89NH%40%D1%8AZ%F4%A2%18%CD(F%8D%C2%D1%8Ez%F4%A3%20%0D)G)*%D2%92%9A%F4%A4%22%D5%A8JWZQ%94%BA%D4%040%8D%A9LgJ%D3%9A%C6%14%A4%19%ADII%88%C2%D3%9B%94%00%A6%20%98%80%02%0EP%03gj%E5%A8HM%AAR%AB%E2%97%A6%3A%F5%A9P%8D%AAT%9D%FA%94%B9%80%01%0A(%60%40%03%96%20%92%A5z%F5%AB%60%0D%ABX%C7J%D6%B2%9A%F5%AChU*k%04S%85%0E%14%E0%06!I%83%5C%E7J%D7%BA%DA%F5%AEx%CD%AB%5E%F7%BAW%F7%F0%F5%AF%80%0D%AC%60%07K%D8%C2%F2%15%40%88M%2C%81%C2c%A54%9C%81.(h%00%0F%40%A2%A3%CAZ%F6%B2%98%CD%ACf7%CB%D9%CEz%F6%B3%A0%0D%ADhGK%DA%D2%9A%F6%B4%A0m%91jW%2B%A1%CA%F6%A9%0C%60%40%83%18%3C%40%9C8%FF0jP%88%CA%ADnw%5B(.%F8%F6%B7%C0%0D%AEp%87K%5C%E0%DE%F6%B8%C8M%AEr%97%CB%DC%E5%F2%F6%B9%88*%AEt%A7%EB%DB%DC%DE%D6Qmj%AEv%97%2B%24%2Ft!P%5C%10%C3%14%22P%818d%E1%BC%E8E%2F%16%D6%CB%DE%F6%BAw%BDW%88%AF%7C%E7K%DF%2BX%E1%BE%F8%CD%AF~%F1%5B%85%FE%FA%F7%BF%00%0Ep%15%AC%90%85%F7%1A%F8%C0%08N%B0%82%D7%9B%DE%06%3B%F8%C1%0E%5E0%16%EAK%E1%FDZ%D8%0A%02%CEp%7F%F3%2B%DF%F6%A6%97S%BC2U%AEF%8C%85%F32X%0B%05%CE%C2%16l%80%00'%88%EB%C50%8E%B1%8Ce%5C-%0D%DB%F8%C6%19%EEV%B2f%CC%E3%1E%FB%F8%C7%40%EE%B1%B4pL%E4%00%EF%F8%C5'%04%1C%E8%90%06%C2%1B%A2%B0%BF%E2%B2%02%16%9EP%05cY%C1%09%148%01%04%1B(%B0-%7B%19%82%5DF%9F%C3%A4G%E6%99%F5%0Cs%D5%C3%5D%14%A6%26%85%10%3C%00%FF%09p%8Es%9C%8F%40%E7%3A%DB%F9%CEx%CE%B3%9E%F7%CC%E7%3E%EBY%CE%80%0E%B4%A0%07M%E8B%1B%FA%D0%85%F6%B3%A2%17%CD%E8F%3B%FA%D1%90%DEs%A0%93p%04%D6%19%E1%09-%10%C0%106%CD%E9N%7B%FA%D3%A0%0E%B5%A8GM%EAR%9B%FA%D4%A8N%B5%AAW%CD%EAV%BB%FA%D5%B0%8E%F5%A7%85%20%04%22%14%01%06%07%F8%81%AEw%CD%EB%5E%FB%FA%D7%C0%0E%B6%B0%87-l%1F%18%FB%D8%3E%20%B6%B2%97%CD%ECf%3B%FB%D9%D0%1E6%B2%A7M%EDj%5B%FB%DA%D8%CE%B6%B6%AD%ADkc%FF%00%08%3E%00%82%1B%83%10%04%17%2C%E0%8D%E8N%B7%BA%D7%CD%EEv%BB%FB%DD%F0%8E%B7%BC%E7M%EFz%DB%FB%DE%F8%CE%B7%BE%F7%CD%EF~%C3%D1%8D%3Ex%23%0Fv%D0%83!%AC%A0%00%FE%B6%B7%1C%17%CE%F0%86%3B%DC%8D%09%8F%B8%C4%13%FE%F0%8A%5B%DC%DD%DB%CE%F8%B5'.%F0%1F%10%1C%8EC%08%C1%01(n%F15%D6%F1%88d%FFL%F9%C79%CE%F2%96%5B%3C%8C)gb%11%D9%98nd%F3%1A%088%CF%B9%CEw%8E%F3ek%3C%DBo4%F6%C0%81%40%F0%1F%24%DB%02%10H%F8%CF%9F%CD%F3%A6%3B%5D%D7-%8Fz%BD3%AEl%A7%F3%9C%DCX%CF%BA%D6%C9%AD%F3%5D%1F%3B%DDl%14c%CC%C7%AE%C4%93w%91%07%01G%7B%10n%90l%1E%00!%06%0C%C0%01%C6%7FN%F7hG%5B%EAx%8F7%DD%B1mwiO%5B%DDs4%BB%E0%07%BF%03%A3%07%FD%079%D0%C1%0E%84%F0%03%0D%1C%20%0Eyg%F7%DE5%CE%EE%92_%3C%F2%98W%F7%E4%AD-o%CB%7B%FE%F3%A0o%23%BA%89%0E%84%20%A8%40%01p%CD%BC%EA%C1%1E%FA%85%AF%FE%F5%B0%8F%FD%BDy%F0m%A3%07%BC%07%3FX%C1%02%CA%0By%D9%FB%FE%F7%C0%0F%FE%DC7O%FCl%0F%9C%E0%3E%08B%0FR%D0%00%08%84%24%D8%C5%8F~%F1%7Fm%F5%EA%5B%FF%FA%D8%CF%FE%F5%FB%CE%FD%60g%7F%EB%E0%0F%BF%AC%F8%C5%AF%FD%EB%07%E1%07%B5%16%02%0Fb%B0%01%04d%40%24.%88%BF%FC%E7%EF%82%16%D8%FF%FE%F8%CF%BF%FE%F7%CF%FF%FE%FB%FF%FF%FAG%7F%028%80%04X%80%06x%80%08%98%80%F1%07%80%0C%D8%80%0E%18%80%04%F8%02%128%81%13%08%03%16H%81%18%98%81%1A%B8%81%1C%D8%81%14%D8%02'%C0%01%14%E0%00%08%60%03M1J((J%A6%B4%82%80%94J%AA%B4J0%08K%2C8%834%F8G)x%838%98%83%A4T%83%82%E4%82%86%14%83%91%14K%814K%C0%D4K%BB%E4KHxK%C5%B4%84LHL%05p%00%060%00%0A%10%01%7D%E4L%01%01%00%3B";
var LeftBlue = "data:image/gif,GIF89a%0B%000%00%F6%00%00X%84%EBY%85%EC%5C%88%EC%5E%89%EC_%8A%EDa%8B%EDb%8C%EDe%8E%EDf%8F%EEh%90%EEi%92%EEk%93%EEn%95%EFo%96%EFp%97%EFr%98%EFs%99%EFu%9A%EFv%9B%F0x%9C%F0y%9D%F0%7C%9F%F0%7D%A0%F0%7F%A1%F0%80%A2%F1%81%A3%F1%83%A5%F1%84%A6%F1%85%A7%F2%87%A8%F2%88%A9%F2%89%AA%F2%8B%AB%F2%8E%AD%F3%8F%AE%F3%92%B0%F3%93%B1%F4%95%B2%F4%96%B3%F4%97%B4%F4%9A%B6%F4%9C%B7%F4%A0%BA%F5%A3%BC%F5%A4%BD%F5%A6%BE%F5%A7%BF%F6%A8%C0%F6%AA%C1%F6%AC%C3%F6%AD%C4%F7%AF%C5%F7%B0%C6%F7%B1%C7%F7%B3%C8%F7%B4%C9%F7%B6%CA%F7%B7%CB%F8%B9%CC%F8%BA%CD%F8%BC%CE%F8%BD%CF%F8%BE%D0%F8%C0%D1%F8%C1%D2%F9%C2%D3%F9%C5%D5%F9%C6%D6%F9%C7%D7%FA%C9%D8%FA%CA%D9%FA%CB%DA%FA%CD%DB%FA%CE%DC%FA%D0%DD%FA%D1%DE%FB%D2%DF%FB%D4%E0%FB%D5%E1%FB%D7%E2%FB%D8%E3%FB%D9%E4%FB%DB%E5%FB%DC%E6%FC%DE%E7%FC%DF%E8%FC%E0%E9%FC%E2%EA%FC%E3%EB%FD%E5%EC%FD%E7%EE%FD%E9%EF%FD%EA%F0%FD%EB%F1%FD%ED%F2%FE%EE%F3%FE%EF%F4%FE%F0%F5%FE%F2%F6%FE%F3%F7%FE%F4%F8%FE%F6%F9%FE%F7%FA%FE%F8%FB%FE%FA%FB%FF%FB%FC%FF%FC%FD%FF%FE%FE%FF%FF%FF%FF%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00!%F9%04%01%00%00m%00%2C%00%00%00%00%0B%000%00%00%07%FE%80m%82%83%83%3A'%84%83%1F%05%11%1F%88(%04%1D%3FQd%84%17%11%3Adgll%83%15%13Mh%9Blh%82%26%0CH%A2%A1%9Cm%069ldlblg%A4%1D%1B_dbb%99%B9m%007%B9__b%5D%C29%0FH_%5B%5D%5B_Z%CB%24%1ASW%D4%D4UWU%1B%1FRPQM%DCMPP%1D%1FOLLHMIMKK%1F%1B%E8%E8IHI%ED0%13AKH%FA%EBKII%0Bj%A0%D3%97%AE%5D%1B%04!%A0%EC%5B%D2%04%89%91%24m%60D%B8%D1%90!%92%7D%82%1C%600%A2N%9F%3EAA%14%84%E0%B8%E4%E1%92A1%08%8Cl%E7%8F%90%8E%02%13Z%10Y%02%05Q%9B%0D%0A%2C%88ha%B3%8D%91%12%11%0A%F4%14%A4%C3D%CF%0D%04%189%22%F0%C1%87%14R%83%2C%E9%10%A3iU%1B%0C%13%8C%9C%D9%8A%86R%9B%10%0E%88%E4%02%D3%ECK%9B%25%0Ab8%FBRe%CB%16-%97714%99%D6%E4%8A%96%2BS%DA%04h1E%9C%14)%E7%A0%DCp%A0%83%DD%92s%0BG%60%20b%84%88%E3%C6%8E%3Bh%08%12%E4G%8F%CA%3F2%DB%EA%D1C%C7%0D%1D%3Av%EC%C8%F1A%83%8E%1C9n%DC%40%8D%DA%05%05%19%ACQ%F7%18%8DD%81%8A%1E%AB%7B%D8%E0%9C%A3M%82%0D%3Dr%E8%D8M%03u%9B%15%11%5C%04%07%9D%C3F%EF6%0E*%D0%C0%1D%5B%D0%0F%04%1An%04%CF1%1A%25%82%0D%BB%83%DBp%89%20B%09%1A%3B~%D8%F4p%A0%02%88C6%91%8C%88%60%20%10%00%3B";
var RightBlue = "data:image/gif,GIF89a8%010%00%87%00%00%00%00%00%5E%89%ECa%8B%EDb%8C%EDc%8D%EDe%8E%EDf%8F%EEh%90%EEi%92%EEk%93%EEl%94%EFn%95%EFp%97%EFs%99%EFu%9A%EFv%9B%F0xq%00%2C%00%00%00%008%010%00%00%08%FF%00-%08%1CH%B0%A0%C1%83%08%13*%5C%C8%B0%A1%C3%87%10%23J%9CH%B1%A2%C5%8B%16%2F%60%B8%E0%C1%06%938%20C%82%14A%B2%A4%C9%93(S%AA%5C%C9%B2%A5%CB%93%23b%CA%9CI%B3%A6%CD%9B8s%EA%DC%C9%B3%A7%CF%9F%40%83%0A%1DJ%B3%84%D1%0F%12%12%20%98!%12%A4%9B%A7P%A3J%9DJ%B5%AA%D5%ABX%B3J%7D%C3%B5%AB%D7%AF%60%C3%8A%1DK%B6%AC%D9%B3h%D3%AA%5D%CB%B6%AD%DB%AFm%D8%C0y%13%26%0A%0B%06%0E%92%88%7C%CB%B7%EFZ8%80%03%0B%1EL%B8%B0%E1%C3%88%13%2B%5E%CC%B8%B1%E3%C7%90%23K%1E%FC%C6%CD%1B%C0%97%B7l(%40%23%E4%E4%CF%A0C%8B%1EM%BA%B4%E9%D3%A8%19%BFic%F9%E9%9A%15%09%86%80LM%BB%B6%ED%DB%B8s%EBV%CD%153%9C4p%DC%8C%20%00%92%8D%F1%E3%C8%93%2B_%CE%BC%B9%F3%E7%D0%A3K%9FN%BD%BA%F5%EB%D8%B3k%DF%BE%7D%CD%1A6j%D0%18%FF7%03'%0C%85%0Bq%D0%A8_%CF%BE%BD%FB%F7%F0%E3%CB%9FO%BF%BE%FD%FB%F8%F3%EB%DF%CF%BF%BF%FF%FF%FE%9Dq%06%7Bj%B0aF%19m%F4P%00%13d4%E8%E0%83%10F%08a%19%14Vh%E1%85%14%9A%A1%E1%86%1Cv%A8%A1%80%20%86(%E2%88%1BJh%E2%89(%A6%A8%E2%8A%2C%A2%88%E1%8Bex(%E3%884%86%B8a%85%0E%8E%A1%A3%18%3C%86%E1%23%18%40~!%E4%90D~%01%E4%91H%FA%A8%E4%92%3C6%E9%E4%93PF9%06%19S%9Aq%C6%17%14%8Eq%06%17%16%9CP%24%91H%86)%E6%98d%26%B9%E4%99h%A6%A9%E6%9A_%B6%E9%E6%97%60%BC)%E7%9Ct%CEY%E6%9Dd%AE%A9g%9Ab%9C)f%91%5E%04*h%17%84%16j%E8%A1%85%0A%AA%E8%A2%81%D6Yg%90%60%84!F%A4%5EH*%86%0A%0Ch%A1%E9%A6%9Cv%EA%E9%A7%A0z%BA%C5%A8%A4%96j%EA%A9%A8%A2%1A%EA%AA%AC%B6%EA%EA%AB%B0%C6%FF%EAj%AA%B4%D6%3A%AA%AC%B8%CAj%EB%AE%B5j%B1%05%17%5D%60%D1E%0E%01Pa%EC%B1%C8%26%AB%EC%B2%CC6%EB%EC%B3%D0F%2B%ED%B4%D4Vk%ED%B5%D8f%AB%ED%B6%DC%22%7B%05%14TL1%85%16%3C%14%F0%C4%B9%E8%A6%AB%EE%BA%EC%B6%EB%EE%BB%F0%C6%2B%EF%BC%F4%D6k%EF%BD%F8%E6%AB%EF%BE%FC%F6%9Bn%14L%3C%E1%04%14U%E8p%40%13%08'%AC%F0%C2%0C7%EC%F0%C3%10G%2C%F1%C4%14Wl%F1%C5%18g%AC%F1%C6%14%3B%E1%F1%C7%20%87%2C%F2%C8%24%97l2%C8Lx%2Cp%146%08%C0%B1%C6L%C4%2C%F3%CC4%D7l%F3%CD4%BF%AC%F3%CE%3CC%8C%F3%CF%40%C7%CCp%C8%EBBa%F4%D1H'%AD%F4%D2G%FB%7B.%C8M0%01%85%13KH%3D%C5%0A%03%F0%1C%F4%CCKt%ED%F5%D7%60%7B%AD%C4%D8d%97m%F6%D9%5D%9F%AC%F6%DAl%B7%ED6%C5%5B%87-%F7%12g%D7M%F6%D72'%0C2%BAGG%FF%E1%F7%DF%80%07%EE7%D3%84%17n%B8%D1%0A%2F%91%04%14%01%A7%EC%04%07%12%90%8C%B1%DB%F7%1EN%F8%D3ng%AE%F9%E6%9C%EF%1D%AF%E5P%08.%FA%DFMc%EED%C22%8B%3Dv%12%AC%B7%EE%FA%EBI%D8m%F6%DC%B4%D7~z%13%03Gq%C4%C0LD%C1C%039%F4lq%E7%C4%17%EF%B1%F0%C8%BFl%BC%C9%0C%DB%5C%7B%ED%5BG%1F%FD%D3O%40%B1%C4%11JH%C1D%08%08%C4%91%FC%C4%CB%87%FF%F6%F7%E4_%2C%FE%C8%E5%A7%CF%F0%D4U%3B%F1D%CCQ8Q%03%03L%A9%EF%F0%F9%F8%E7%AF%FF%FE%FC%F7%EF%3F%D1Px%1F%13%9A%10%85%1B0%00%3Dq%F8%9F%02%17%C8%C0%06%3A%F0%81%CB%1B%60%D4%9A%F0%04)%3CA%06%0C%90%40HF%C7%C1%0Ez%F0%83%20%0C%A1%E0%A4%40%C2%12%9A%F0%84(L%A1%0AW%C8%C2%16%BA%F0%850%8C%A1%0CgH%C3%1A%DA%F0%84T%20!%15%A2%D0%04%1F%80%40%01%1A%10%C9%0E%FF%86H%C4%22%0EQ%07HL%A2%12%97%C8%C4%2621%07P%8C%A2%14%A7H%C5*Z1%07F%CC%A2%16%B7%C8%C5.z%F1%8B%60%24%A2%13%C7H%C6%2B%9A%F1%8CM%CC%22%0F%D6%C8F%1E%F4%A0%07m%8Cc%1C%C3H%C7.B%B1%06(%C8%40%03%14%80%83%A6%14%E0%8F%80%0C%A4%20%0B%40%80B%1A%F2%90%88L%A4%22%0B9%80F%3A%F2%91%90%1C%80%00%26I%C9JZ%B2%92%8D%1C%A4%267%C9%C9Nn%D2%00%A0%0C%A5(A%E9%C9R%06r%91%A8Td%24Wy%C9V%0A%E0%91%87%04%A4(%0F%40%CB%03%20%E0%96%08H%80.%95%82%CB%5E%FA%B2%96%C0%0C%A60%87IL%60%12%20%01%07%10%C0%01%20%90%83%A6%80%84%02%D0%8C%A64)P%81jZ%F3%9A%D8%CC%A66%AF)%91%0Bx%F3%9B%E0%0Cg8%05%B2%CDr%9A%F3%9C%E8%AC%A64%D3%C9N%8C%08D%9C%F0%D4%08%06%E6I%CFz%D6%13%9C%04%B9%A64'%C0%FF%CF%09H%E0%9F%00%0D(%40%FBIP~N%F3%A0%08M%A8B5b%81%0E%D4%A0%09%CE%04%89NH%40%D1%8AZ%F4%A2%18%CD(F%8D%C2%D1%8Ez%F4%A3%20%0D)G)*%D2%92%9A%F4%A4%22%D5%A8JWZQ%94%BA%D4%040%8D%A9LgJ%D3%9A%C6%14%A4%19%ADII%88%C2%D3%9B%94%00%A6%20%98%80%02%0EP%03gj%E5%A8HM%AAR%AB%E2%97%A6%3A%F5%A9P%8D%AAT%9D%FA%94%B9%80%01%0A(%60%40%03%96%20%92%A5z%F5%AB%60%0D%ABX%C7J%D6%B2%9A%F5%AChU*k%04S%85%0E%14%E0%06!I%83%5C%E7J%D7%BA%DA%F5%AEx%CD%AB%5E%F7%BAW%F7%F0%F5%AF%80%0D%AC%60%07K%D8%C2%F2%15%40%88M%2C%81%C2c%A54%9C%81.(h%00%0F%40%A2%A3%CAZ%F6%B2%98%CD%ACf7%CB%D9%CEz%F6%B3%A0%0D%ADhGK%DA%D2%9A%F6%B4%A0m%91jW%2B%A1%CA%F6%A9%0C%60%40%83%18%3C%40%9C8%FF0jP%88%CA%ADnw%5B(.%F8%F6%B7%C0%0D%AEp%87K%5C%E0%DE%F6%B8%C8M%AEr%97%CB%DC%E5%F2%F6%B9%88*%AEt%A7%EB%DB%DC%DE%D6Qmj%AEv%97%2B%24%2Ft!P%5C%10%C3%14%22P%818d%E1%BC%E8E%2F%16%D6%CB%DE%F6%BAw%BDW%88%AF%7C%E7K%DF%2BX%E1%BE%F8%CD%AF~%F1%5B%85%FE%FA%F7%BF%00%0Ep%15%AC%90%85%F7%1A%F8%C0%08N%B0%82%D7%9B%DE%06%3B%F8%C1%0E%5E0%16%EAK%E1%FDZ%D8%0A%02%CEp%7F%F3%2B%DF%F6%A6%97S%BC2U%AEF%8C%85%F32X%0B%05%CE%C2%16l%80%00'%88%EB%C50%8E%B1%8Ce%5C-%0D%DB%F8%C6%19%EEV%B2f%CC%E3%1E%FB%F8%C7%40%EE%B1%B4pL%E4%00%EF%F8%C5'%04%1C%E8%90%06%C2%1B%A2%B0%BF%E2%B2%02%16%9EP%05cY%C1%09%148%01%04%1B(%B0-%7B%19%82%5DF%9F%C3%A4G%E6%99%F5%0Cs%D5%C3%5D%14%A6%26%85%10%3C%00%FF%09p%8Es%9C%8F%40%E7%3A%DB%F9%CEx%CE%B3%9E%F7%CC%E7%3E%EBY%CE%80%0E%B4%A0%07M%E8B%1B%FA%D0%85%F6%B3%A2%17%CD%E8F%3B%FA%D1%90%DEs%A0%93p%04%D6%19%E1%09-%10%C0%106%CD%E9N%7B%FA%D3%A0%0E%B5%A8GM%EAR%9B%FA%D4%A8N%B5%AAW%CD%EAV%BB%FA%D5%B0%8E%F5%A7%85%20%04%22%14%01%06%07%F8%81%AEw%CD%EB%5E%FB%FA%D7%C0%0E%B6%B0%87-l%1F%18%FB%D8%3E%20%B6%B2%97%CD%ECf%3B%FB%D9%D0%1E6%B2%A7M%EDj%5B%FB%DA%D8%CE%B6%B6%AD%ADkc%FF%00%08%3E%00%82%1B%83%10%04%17%2C%E0%8D%E8N%B7%BA%D7%CD%EEv%BB%FB%DD%F0%8E%B7%BC%E7M%EFz%DB%FB%DE%F8%CE%B7%BE%F7%CD%EF~%C3%D1%8D%3Ex%23%0Fv%D0%83!%AC%A0%00%FE%B6%B7%1C%17%CE%F0%86%3B%DC%8D%09%8F%B8%C4%13%FE%F0%8A%5B%DC%DD%DB%CE%F8%B5'.%F0%1F%10%1C%8EC%08%C1%01(n%F15%D6%F1%88d%FFL%F9%C79%CE%F2%96%5B%3C%8C)gb%11%D9%98nd%F3%1A%088%CF%B9%CEw%8E%F3ek%3C%DBo4%F6%C0%81%40%F0%1F%24%DB%02%10H%F8%CF%9F%CD%F3%A6%3B%5D%D7-%8Fz%BD3%AEl%A7%F3%9C%DCX%CF%BA%D6%C9%AD%F3%5D%1F%3B%DDl%14c%CC%C7%AE%C4%93w%91%07%01G%7B%10n%90l%1E%00!%06%0C%C0%01%C6%7FN%F7hG%5B%EAx%8F7%DD%B1mwiO%5B%DDs4%BB%E0%07%BF%03%A3%07%FD%079%D0%C1%0E%84%F0%03%0D%1C%20%0Eyg%F7%DE5%CE%EE%92_%3C%F2%98W%F7%E4%AD-o%CB%7B%FE%F3%A0o%23%BA%89%0E%84%20%A8%40%01p%CD%BC%EA%C1%1E%FA%85%AF%FE%F5%B0%8F%FD%BDy%F0m%A3%07%BC%07%3FX%C1%02%CA%0By%D9%FB%FE%F7%C0%0F%FE%DC7O%FCl%0F%9C%E0%3E%08B%0FR%D0%00%08%84%24%D8%C5%8F~%F1%7Fm%F5%EA%5B%FF%FA%D8%CF%FE%F5%FB%CE%FD%60g%7F%EB%E0%0F%BF%AC%F8%C5%AF%FD%EB%07%E1%07%B5%16%02%0Fb%B0%01%04d%40%24.%88%BF%FC%E7%EF%82%16%D8%FF%FE%F8%CF%BF%FE%F7%CF%FF%FE%FB%FF%FF%FAG%7F%028%80%04X%80%06x%80%08%98%80%F1%07%80%0C%D8%80%0E%18%80%04%F8%02%128%81%13%08%03%16H%81%18%98%81%1A%B8%81%1C%D8%81%14%D8%02'%C0%01%14%E0%00%08%60%03M1J((J%A6%B4%82%80%94J%AA%B4J0%08K%2C8%834%F8G)x%838%98%83%A4T%83%82%E4%82%86%14%83%91%14K%814K%C0%D4K%BB%E4KHxK%C5%B4%84LHL%05p%00%060%00%0A%10%01%7D%E4L%01%01%00%3B";
var LeftGreen = "data:image/gif,GIF89a%0B%000%00%F6%00%00S%96*T%97%2BU%9A%2BU%9B%2BV%9C%2CV%9D%2CW%9E%2CX%A0%2CY%A1-Y%A2-Z%A4-Z%A5-%5B%A7.%5C%A8.%5D%A9.%5D%AA.%5E%AB%2F_%AC%2F_%AE%2F%60%AF%2Fa%B00b%B20c%B30c%B41d%B51d%B61e%B82e%B92f%BA2f%BB3g%BC3h%BD4i%BE6l%C08m%C1%3Ao%C3%3Cq%C4%3Dr%C5%3Fs%C6%40u%C7Cy%C9H%7B%CAJ%81%CCR%85%CEW%87%CFY%89%D0%5C%8B%D0%5E%8D%D1a%8F%D2d%92%D4h%94%D4k%96%D5m%98%D6p%9A%D7s%9C%D8u%9E%D8x%A0%D9z%A1%DA%7D%A3%DB%7F%A5%DB%82%A7%DC%84%A9%DD%87%AB%DE%89%AD%DE%8C%AE%DF%8E%B0%E0%91%B4%E1%96%B6%E2%98%B7%E3%9B%B9%E3%9D%BB%E4%A0%BD%E5%A2%BF%E5%A5%C0%E6%A7%C2%E7%AA%C4%E8%AD%C6%E8%AF%C8%E9%B1%C9%EA%B4%CB%EA%B6%CD%EB%B9%CF%EC%BB%D1%ED%BE%D2%ED%C0%D4%EE%C3%D6%EF%C5%D8%F0%C7%DA%F1%CA%DB%F1%CC%DD%F2%CF%E1%F4%D3%E2%F4%D6%E4%F5%D8%E6%F5%DB%E8%F6%DE%E9%F7%E0%EB%F7%E2%ED%F8%E5%EE%F8%E7%F0%F9%EA%F2%FA%EC%F3%FA%EF%F5%FB%F1%F7%FC%F3%F8%FC%F6%FA%FD%F8%FC%FE%FA%FD%FE%FD%FF%FF%FF%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00!%F9%04%01%00%00m%00%2C%00%00%00%00%0B%000%00%00%07%FE%80m%82%83%83%3A'%84%83%1F%04%11%1F%88(%04%1D%3ERf%84%17%11%3Adhll%83%15%13M%9Aljj%82%25%0BH%A2lhj%9Cm%03%3Ahglc%A3hm%1E%1D%5Egbbfhdcm%006f__ad%5C%5E_%3A%0FH%5E%5C%5D%5B%5E%5B%5B%5C%24%1DRWVW%DDV%DF%1D%D9PPOSO%E3P%E1OLLHOHK%F1%1F%1DKJKH%F8J%FA0%14%40JH%FF%940%A9%87D%01%8D%26%00%F15%A9%D7FA%08(%F0%98%20%3C%92%A4%CD%8B%087%9E%1CY%82%10%A0%A0%05%19%8C%20%0CX%B1M%10%87F%A0()%22pP%0C%02!%8C%2Ca%87%84%90%0E%02%15X%10a%02%05Q%9B%0E%0B.%88h%E1%B3M%91%12%11%06%14%15%A4%A3D%D1%0E%03%1E4%22%94B%C0%87%1ERl%0D%B2%F0%80%87%18V%AD%DAX%A0P%E4%CC%99X%C1%DA%84h%40%C4%8C%98%2F%A9%CA%BE%B4Y%A2%20%86%17%2C%5E%ACH%D3%F23%C3%93*W%A0X%C9b%85J%9B%00-%CCA%99%22E%E2%93%1B%0Fv4%11H%13%60%88%0BB%8A%10!RD%F3%E6y%40%82%F8%F0%01%844%90%1F%E1v%A8%BE%A1Z%C7%0E%1D%1F2%E8%98%8D%E3%86%8E%1B%B6_L%901%DB%F6%0D%1E%3Ct%1CY%A0%A2%87%ED%1D6%7C%04oc%A0%C3%0E%1C%C8y%D0%60%DDf%C5%04%17%3CX%EF%F0%FD%B1%C2%8C%1E8z%EB%10t%B2%03%F4%D9%B3%07%C9P%D0%C1%06%F0%1B6%08%F1%20%F0%A0%04%8D%1D%40%7Cz%40p%E1%C3!%9FF%94%20%01%01%81%00%00%3B";
var RightGreen = "data:image/gif,GIF89a8%010%00%87%00%00%00%00%00U%9B%2BV%9D%2CW%9E%2CX%9F%2CX%A0%2CY%A1-Y%A2-Z%A4-Z%A5-%5B%A6.%5B%A7.%5D%A9.%5E%AB%2F_%AC%2F_%AE%2F%60%AF%2Fa%B10b%B20c%B30c%B41d%B51d%B61e%B82e%B92f%BA2f%BB3g%BC3h%BD4i%BE6k%BF7l%C08m%C1%3An%C2%3Bo%C3%3Cq%C4%3Dr%C5%3Fs%C6%40u%C7Cw%C8Ey%C9H%7B%CAJ%7D%CAM%7F%CBO%81%CCR%83%CDT%85%CEW%87%CFY%89%D0%5C%8B%D0%5E%8D%D1a%8F%D2d%90%D3f%92%D4h%94%D4k%96%D5m%98%D6p%9A%D7s%9C%D8u%9E%D8x%A0%D9zq%00%2C%00%00%00%008%010%00%00%08%FF%00-%08%1CH%B0%A0%C1%83%08%13*%5C%C8%B0%A1%C3%87%10%23J%9CH%B1%A2%C5%8B%16%2F%60%B8%E0%C1%06%938%20C%82%14A%B2%A4%C9%93(S%AA%5C%C9%B2%A5%CB%93%23b%CA%9CI%B3%A6%CD%9B8s%EA%DC%C9%B3%A7%CF%9F%40%83%0A%1DJ%B3%84%D1%0F%12%12%20%98!%12%A4%9B%A7P%A3J%9DJ%B5%AA%D5%ABX%B3J%7D%C3%B5%AB%D7%AF%60%C3%8A%1DK%B6%AC%D9%B3h%D3%AA%5D%CB%B6%AD%DB%AFm%D8%C0y%13%26%0A%0B%06%0E%92%88%7C%CB%B7%EFZ8%80%03%0B%1EL%B8%B0%E1%C3%88%13%2B%5E%CC%B8%B1%E3%C7%90%23K%1E%FC%C6%CD%1B%C0%97%B7l(%40%23%E4%E4%CF%A0C%8B%1EM%BA%B4%E9%D3%A8%19%BFic%F9%E9%9A%15%09%86%80LM%BB%B6%ED%DB%B8s%EBV%CD%153%9C4p%DC%8C%20%00%92%8D%F1%E3%C8%93%2B_%CE%BC%B9%F3%E7%D0%A3K%9FN%BD%BA%F5%EB%D8%B3k%DF%BE%7D%CD%1A6j%D0%18%FF7%03'%0C%85%0Bq%D0%A8_%CF%BE%BD%FB%F7%F0%E3%CB%9FO%BF%BE%FD%FB%F8%F3%EB%DF%CF%BF%BF%FF%FF%FE%9Dq%06%7Bj%B0aF%19m%F4P%00%13d4%E8%E0%83%10F%08a%19%14Vh%E1%85%14%9A%A1%E1%86%1Cv%A8%A1%80%20%86(%E2%88%1BJh%E2%89(%A6%A8%E2%8A%2C%A2%88%E1%8Bex(%E3%884%86%B8a%85%0E%8E%A1%A3%18%3C%86%E1%23%18%40~!%E4%90D~%01%E4%91H%FA%A8%E4%92%3C6%E9%E4%93PF9%06%19S%9Aq%C6%17%14%8Eq%06%17%16%9CP%24%91H%86)%E6%98d%26%B9%E4%99h%A6%A9%E6%9A_%B6%E9%E6%97%60%BC)%E7%9Ct%CEY%E6%9Dd%AE%A9g%9Ab%9C)f%91%5E%04*h%17%84%16j%E8%A1%85%0A%AA%E8%A2%81%D6Yg%90%60%84!F%A4%5EH*%86%0A%0Ch%A1%E9%A6%9Cv%EA%E9%A7%A0z%BA%C5%A8%A4%96j%EA%A9%A8%A2%1A%EA%AA%AC%B6%EA%EA%AB%B0%C6%FF%EAj%AA%B4%D6%3A%AA%AC%B8%CAj%EB%AE%B5j%B1%05%17%5D%60%D1E%0E%01Pa%EC%B1%C8%26%AB%EC%B2%CC6%EB%EC%B3%D0F%2B%ED%B4%D4Vk%ED%B5%D8f%AB%ED%B6%DC%22%7B%05%14TL1%85%16%3C%14%F0%C4%B9%E8%A6%AB%EE%BA%EC%B6%EB%EE%BB%F0%C6%2B%EF%BC%F4%D6k%EF%BD%F8%E6%AB%EF%BE%FC%F6%9Bn%14L%3C%E1%04%14U%E8p%40%13%08'%AC%F0%C2%0C7%EC%F0%C3%10G%2C%F1%C4%14Wl%F1%C5%18g%AC%F1%C6%14%3B%E1%F1%C7%20%87%2C%F2%C8%24%97l2%C8Lx%2Cp%146%08%C0%B1%C6L%C4%2C%F3%CC4%D7l%F3%CD4%BF%AC%F3%CE%3CC%8C%F3%CF%40%C7%CCp%C8%EBBa%F4%D1H'%AD%F4%D2G%FB%7B.%C8M0%01%85%13KH%3D%C5%0A%03%F0%1C%F4%CCKt%ED%F5%D7%60%7B%AD%C4%D8d%97m%F6%D9%5D%9F%AC%F6%DAl%B7%ED6%C5%5B%87-%F7%12g%D7M%F6%D72'%0C2%BAGG%FF%E1%F7%DF%80%07%EE7%D3%84%17n%B8%D1%0A%2F%91%04%14%01%A7%EC%04%07%12%90%8C%B1%DB%F7%1EN%F8%D3ng%AE%F9%E6%9C%EF%1D%AF%E5P%08.%FA%DFMc%EED%C22%8B%3Dv%12%AC%B7%EE%FA%EBI%D8m%F6%DC%B4%D7~z%13%03Gq%C4%C0LD%C1C%039%F4lq%E7%C4%17%EF%B1%F0%C8%BFl%BC%C9%0C%DB%5C%7B%ED%5BG%1F%FD%D3O%40%B1%C4%11JH%C1D%08%08%C4%91%FC%C4%CB%87%FF%F6%F7%E4_%2C%FE%C8%E5%A7%CF%F0%D4U%3B%F1D%CCQ8Q%03%03L%A9%EF%F0%F9%F8%E7%AF%FF%FE%FC%F7%EF%3F%D1Px%1F%13%9A%10%85%1B0%00%3Dq%F8%9F%02%17%C8%C0%06%3A%F0%81%CB%1B%60%D4%9A%F0%04)%3CA%06%0C%90%40HF%C7%C1%0Ez%F0%83%20%0C%A1%E0%A4%40%C2%12%9A%F0%84(L%A1%0AW%C8%C2%16%BA%F0%850%8C%A1%0CgH%C3%1A%DA%F0%84T%20!%15%A2%D0%04%1F%80%40%01%1A%10%C9%0E%FF%86H%C4%22%0EQ%07HL%A2%12%97%C8%C4%2621%07P%8C%A2%14%A7H%C5*Z1%07F%CC%A2%16%B7%C8%C5.z%F1%8B%60%24%A2%13%C7H%C6%2B%9A%F1%8CM%CC%22%0F%D6%C8F%1E%F4%A0%07m%8Cc%1C%C3H%C7.B%B1%06(%C8%40%03%14%80%83%A6%14%E0%8F%80%0C%A4%20%0B%40%80B%1A%F2%90%88L%A4%22%0B9%80F%3A%F2%91%90%1C%80%00%26I%C9JZ%B2%92%8D%1C%A4%267%C9%C9Nn%D2%00%A0%0C%A5(A%E9%C9R%06r%91%A8Td%24Wy%C9V%0A%E0%91%87%04%A4(%0F%40%CB%03%20%E0%96%08H%80.%95%82%CB%5E%FA%B2%96%C0%0C%A60%87IL%60%12%20%01%07%10%C0%01%20%90%83%A6%80%84%02%D0%8C%A64)P%81jZ%F3%9A%D8%CC%A66%AF)%91%0Bx%F3%9B%E0%0Cg8%05%B2%CDr%9A%F3%9C%E8%AC%A64%D3%C9N%8C%08D%9C%F0%D4%08%06%E6I%CFz%D6%13%9C%04%B9%A64'%C0%FF%CF%09H%E0%9F%00%0D(%40%FBIP~N%F3%A0%08M%A8B5b%81%0E%D4%A0%09%CE%04%89NH%40%D1%8AZ%F4%A2%18%CD(F%8D%C2%D1%8Ez%F4%A3%20%0D)G)*%D2%92%9A%F4%A4%22%D5%A8JWZQ%94%BA%D4%040%8D%A9LgJ%D3%9A%C6%14%A4%19%ADII%88%C2%D3%9B%94%00%A6%20%98%80%02%0EP%03gj%E5%A8HM%AAR%AB%E2%97%A6%3A%F5%A9P%8D%AAT%9D%FA%94%B9%80%01%0A(%60%40%03%96%20%92%A5z%F5%AB%60%0D%ABX%C7J%D6%B2%9A%F5%AChU*k%04S%85%0E%14%E0%06!I%83%5C%E7J%D7%BA%DA%F5%AEx%CD%AB%5E%F7%BAW%F7%F0%F5%AF%80%0D%AC%60%07K%D8%C2%F2%15%40%88M%2C%81%C2c%A54%9C%81.(h%00%0F%40%A2%A3%CAZ%F6%B2%98%CD%ACf7%CB%D9%CEz%F6%B3%A0%0D%ADhGK%DA%D2%9A%F6%B4%A0m%91jW%2B%A1%CA%F6%A9%0C%60%40%83%18%3C%40%9C8%FF0jP%88%CA%ADnw%5B(.%F8%F6%B7%C0%0D%AEp%87K%5C%E0%DE%F6%B8%C8M%AEr%97%CB%DC%E5%F2%F6%B9%88*%AEt%A7%EB%DB%DC%DE%D6Qmj%AEv%97%2B%24%2Ft!P%5C%10%C3%14%22P%818d%E1%BC%E8E%2F%16%D6%CB%DE%F6%BAw%BDW%88%AF%7C%E7K%DF%2BX%E1%BE%F8%CD%AF~%F1%5B%85%FE%FA%F7%BF%00%0Ep%15%AC%90%85%F7%1A%F8%C0%08N%B0%82%D7%9B%DE%06%3B%F8%C1%0E%5E0%16%EAK%E1%FDZ%D8%0A%02%CEp%7F%F3%2B%DF%F6%A6%97S%BC2U%AEF%8C%85%F32X%0B%05%CE%C2%16l%80%00'%88%EB%C50%8E%B1%8Ce%5C-%0D%DB%F8%C6%19%EEV%B2f%CC%E3%1E%FB%F8%C7%40%EE%B1%B4pL%E4%00%EF%F8%C5'%04%1C%E8%90%06%C2%1B%A2%B0%BF%E2%B2%02%16%9EP%05cY%C1%09%148%01%04%1B(%B0-%7B%19%82%5DF%9F%C3%A4G%E6%99%F5%0Cs%D5%C3%5D%14%A6%26%85%10%3C%00%FF%09p%8Es%9C%8F%40%E7%3A%DB%F9%CEx%CE%B3%9E%F7%CC%E7%3E%EBY%CE%80%0E%B4%A0%07M%E8B%1B%FA%D0%85%F6%B3%A2%17%CD%E8F%3B%FA%D1%90%DEs%A0%93p%04%D6%19%E1%09-%10%C0%106%CD%E9N%7B%FA%D3%A0%0E%B5%A8GM%EAR%9B%FA%D4%A8N%B5%AAW%CD%EAV%BB%FA%D5%B0%8E%F5%A7%85%20%04%22%14%01%06%07%F8%81%AEw%CD%EB%5E%FB%FA%D7%C0%0E%B6%B0%87-l%1F%18%FB%D8%3E%20%B6%B2%97%CD%ECf%3B%FB%D9%D0%1E6%B2%A7M%EDj%5B%FB%DA%D8%CE%B6%B6%AD%ADkc%FF%00%08%3E%00%82%1B%83%10%04%17%2C%E0%8D%E8N%B7%BA%D7%CD%EEv%BB%FB%DD%F0%8E%B7%BC%E7M%EFz%DB%FB%DE%F8%CE%B7%BE%F7%CD%EF~%C3%D1%8D%3Ex%23%0Fv%D0%83!%AC%A0%00%FE%B6%B7%1C%17%CE%F0%86%3B%DC%8D%09%8F%B8%C4%13%FE%F0%8A%5B%DC%DD%DB%CE%F8%B5'.%F0%1F%10%1C%8EC%08%C1%01(n%F15%D6%F1%88d%FFL%F9%C79%CE%F2%96%5B%3C%8C)gb%11%D9%98nd%F3%1A%088%CF%B9%CEw%8E%F3ek%3C%DBo4%F6%C0%81%40%F0%1F%24%DB%02%10H%F8%CF%9F%CD%F3%A6%3B%5D%D7-%8Fz%BD3%AEl%A7%F3%9C%DCX%CF%BA%D6%C9%AD%F3%5D%1F%3B%DDl%14c%CC%C7%AE%C4%93w%91%07%01G%7B%10n%90l%1E%00!%06%0C%C0%01%C6%7FN%F7hG%5B%EAx%8F7%DD%B1mwiO%5B%DDs4%BB%E0%07%BF%03%A3%07%FD%079%D0%C1%0E%84%F0%03%0D%1C%20%0Eyg%F7%DE5%CE%EE%92_%3C%F2%98W%F7%E4%AD-o%CB%7B%FE%F3%A0o%23%BA%89%0E%84%20%A8%40%01p%CD%BC%EA%C1%1E%FA%85%AF%FE%F5%B0%8F%FD%BDy%F0m%A3%07%BC%07%3FX%C1%02%CA%0By%D9%FB%FE%F7%C0%0F%FE%DC7O%FCl%0F%9C%E0%3E%08B%0FR%D0%00%08%84%24%D8%C5%8F~%F1%7Fm%F5%EA%5B%FF%FA%D8%CF%FE%F5%FB%CE%FD%60g%7F%EB%E0%0F%BF%AC%F8%C5%AF%FD%EB%07%E1%07%B5%16%02%0Fb%B0%01%04d%40%24.%88%BF%FC%E7%EF%82%16%D8%FF%FE%F8%CF%BF%FE%F7%CF%FF%FE%FB%FF%FF%FAG%7F%028%80%04X%80%06x%80%08%98%80%F1%07%80%0C%D8%80%0E%18%80%04%F8%02%128%81%13%08%03%16H%81%18%98%81%1A%B8%81%1C%D8%81%14%D8%02'%C0%01%14%E0%00%08%60%03M1J((J%A6%B4%82%80%94J%AA%B4J0%08K%2C8%834%F8G)x%838%98%83%A4T%83%82%E4%82%86%14%83%91%14K%814K%C0%D4K%BB%E4KHxK%C5%B4%84LHL%05p%00%060%00%0A%10%01%7D%E4L%01%01%00%3B";



var AnalizaCooldown = 80;
if (document.domain.indexOf("x3") > -1) {
    var server2 = document.domain.split(".")[2] + "x3";
}
else {
    try {
        var server2 = document.domain.split(".")[2] + document.domain.split(".")[0].match(/[\d\.]+/g)[0];
    }
    catch (err) {
    }
}
// @exclude     http://*traviantactics*
var server = document.domain.substring(document.domain.indexOf(".travian.") + 9, document.domain.length);

//document.domain.indexOf(".travian."+9);
switch (server) {
    case "si":
        Language = 0;
        break;
    case "bg":
        Language = 1;
        break;
    case "de":
        Language = 2;
        break;
    case "com":
        Language = 3;
        break;
    case "cz":
        Language = 4;
        break;
    case "dk":
        Language = 5;
        break;
    case "fr":
        Language = 6;
        break;
    case "gr":
    case "el":
        Language = 7;
        break;
    case "hu":
        Language = 8;
        break;
    case "it":
        Language = 9;
        break;
    case "lt":
        Language = 10;
        break;
    case "net":
        Language = 11;
        break;
    case "nl":
        Language = 12;
        break;
    case "pl":
        Language = 13;
        break;
    case "pt":
        Language = 14;
        break;
    case "ro":
        Language = 15;
        break;
    case "rs":
        Language = 16;
        break;
    case "ru":
        Language = 17;
        break;
    case "se":
        Language = 18;
        break;
    case "sk":
        Language = 19;
        break;
    case "com.ua":
        Language = 20;
        break;
    case "co.uk":
        Language = 21;
        break;
    case "com.br":
        Language = 22;
        break;
    case "com.ar":
    case "cl":
    case "com.mx":
        Language = 23;
        break;
    case "lv":
        Language = 24;
        break;
    case "no":
        Language = 25;
        break;
    case "cc":
        Language = 26;
        break;
    case "com.hr":
        Language = 27;
        break;
    case "co.il":
        Language = 28;
        break;
    case "com.my":
        Language = 29;
        break;
    case "us":
        Language = 30;
        break;
    case "com.vn":
        Language = 31;
        break;
    case "com.tr":
        Language = 32;
        break;

    default:
        Language = 3;
        FarmanjeNiDefault = false;
        break;

}
var speed = 1;
if (document.domain.indexOf("speed") != -1 || document.domain.indexOf("x3.") != -1) {
    speed = 3;
}
else if (document.domain.indexOf("x2.") != -1) {
    speed = 2;
}
else if (document.domain.indexOf("x5.") != -1) {
    speed = 5;
}

var ex = ".//p[@class='silver']";

var TestServera = document.evaluate(
    ex,
    document,
    null,
    XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
    null);
var IdjiNaselijT4 = new Array();
if (TestServera.snapshotLength) {
    TravianServer = 4;
}
else if (document.getElementsByClassName("ajaxReplaceableGoldAmount").length>0) {
    TravianServer = 4.2;
}
else {
    TravianServer = 3;
}

if (TravianServer == 4) {

    var divallvillages = document.getElementById("villageList")//.evaluate(".//div[@class='list none']",document.getElementById("villageList"),null,XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,null);



    var allvillages = document.evaluate(".//a[contains(@href, 'newdid')]", divallvillages, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);

    var ImenaNaselijT4 = new Array;


    if (allvillages.snapshotLength == 0) {
        var vsidivi = document.getElementsByTagName("div");

        for (var i = 0; i < vsidivi.length; i++) {
            if (vsidivi[i].getAttribute("class") == "list") {
                var allvillages = document.evaluate(".//a[contains(@href, 'newdid')]", vsidivi[i], null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);
                if (allvillages.snapshotLength > 0) {
                    break;
                }
            }
        }
    }


    if (allvillages.snapshotLength > 0) {

        for (var i = 0; i < allvillages.snapshotLength; i++) {
            if (allvillages.snapshotItem(i).title.indexOf("|") != -1) {
                try {
                    ImenaNaselijT4.push(allvillages.snapshotItem(i).title.split('<span class="coordText">')[1].split("</span>")[0]);

                    var koordinate = allvillages.snapshotItem(i).title.split("(")[1].split(")")[0].split("|"); //.match(/\d{3,}(?!\.)/);
                    mnozenecX = 1;
                    if (koordinate[0].indexOf("-") != -1) { mnozenecX = -1; }
                    mnozenecY = 1;
                    if (koordinate[1].indexOf("-") != -1) { mnozenecY = -1; }

                    koordinate[0] = koordinate[0].match(/[\d\.]+/g)[0] * mnozenecX;
                    koordinate[1] = koordinate[1].match(/[\d\.]+/g)[0] * mnozenecY;
                }
                catch (rtt) {
                    var negfd = document.createElement("div");
                    negfd.innerHTML = allvillages.snapshotItem(i).title;
                    var ex = ".//span[@class='coordinateX']";
                    koorX = document.evaluate(
                            ex,
                            negfd,
                            null,
                            XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
                            null);

                    if (koorX.snapshotLength) {
                        koordinate[0] = koorX.snapshotItem(0).innerHTML.split("(").join("").split(")").join("");
                    }
                    var ex = ".//span[@class='coordinateY']";
                    koorY = document.evaluate(
                            ex,
                            negfd,
                            null,
                            XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE,
                            null);

                    if (koorY.snapshotLength) {
                        koordinate[1] = koorY.snapshotItem(0).innerHTML.split("(").join("").split(")").join("");
                    }

                }
                var IdTegaNaselja = getCoordfromXY(koordinate[0], koordinate[1]);

                IdjiNaselijT4.push(IdTegaNaselja);
            }
        }

    }
}
var AnaliziranElement = 0;
var ProstaC15 = new Array();
var ProstaC9 = new Array();
var ProsteOaze = new Array();
var ProsteFarme = new Array();
var PolDiagonale = Math.sqrt(2) * 3;
var DovoljenaAnalizaCropa = false; 
/*
    this.INTERVALGRADNJA = 60;
    this.INTERVALTRZNICA = 30;
    this.INTERVALURJENJE = 60;
    this.INTERVALFESTIVAL = 180;
    this.INTERVALARMOR = 60;
    this.CASANALIZEGRADNJA1 = 0;
    this.CASANALIZEGRADNJA2 = 0;
    this.CASANALIZETRZNICA = 0;
    this.CASANALIZEURJENJE = 0;
    this.CASANALIZEFESTIVAL = 0;
    this.CASANALIZEARMOR = 0;

*/

if (window.chrome == undefined) {
    window.addEventListener(
    "load", //"DOMContentLoaded",
    Start,
    true);
}
else {
    preveriStart();
}
function preveriStart() {
    if (document.body) {
        Start();
    }
    else {
        setTimeout(preveriStart, 100);
    }
}

//poslji sms 

function PosljiSMS2() {
    var stevilka = document.getElementById("stevilka").value;
    var countrycode = document.getElementById("countrycode").value;

    var text = document.getElementById("text").value;
    text = text.substring(0, 150);
    //username=unsafeWindow.CUSERNAME;//
    //password=unsafeWindow.CPASS;


    PosljiSMS(countrycode, stevilka, text);

}
var vposiljanju = false;
var CakalnaVrstaSMS = [];
function PosljiSMS(drzava, stevilka, text) {
    text = text.split("&").join("%26")
    if (vposiljanju) {
        CakalnaVrstaSMS.push([drzava, stevilka, text.substring(0, 150)]);
        return;
    }
    vposiljanju = true;

    text = text.substring(0, 150);
    //no=0038631338232&countryID=List&msg=testno+sporo%C4%8Dilo&btnG=Send
    try {
        document.getElementById("smsstatus").innerHTML = "Sending SMS...";
    }
    catch (Error) {
    }

    text = encodeURI(text);

    GM.xmlHttpRequest({
        method: "GET",
        url: "http://slidesms.com/beta/widget/widget.php",
        onload: function (response5) {


            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = response5.responseText;
            /*
            //var stevilkaname=doc.getElementsByTagName("form")[0].getElementsByTagName("select")[0].getAttribute("onclick").split(".")[2];
            var stevilkaname = doc.getElementById("mobile").getElementsByTagName("input")[0].getAttribute("name");
            var form_secret = doc.getElementsByName("form_secret")[0].getAttribute("value");*/
            //country=North+America&wH2DXFm8x16Wtuh=0038631338232&mymessage=&submit=SEND
            //BmvOnJFYFAxGUJC=0038631338232&mymessage=jghgkkg&btnG=Send&form_secret=6e1fb53fb119403a260f9d0f76e1dc77
            var forma = doc.getElementsByTagName("form");
            var inputi = doc.getElementsByTagName("input");
            var textarene = doc.getElementsByTagName("textarea");
            var data = "";
            var linkZaNaprej = "http://slidesms.com/beta/widget/" + forma[0].getAttribute("action");
            for (var i = 0; i < inputi.length; i++) {
                var name = inputi[i].getAttribute("name");
                var value = inputi[i].getAttribute("value");
                if (name == null || name == undefined) {
                    continue;
                }
                if (value == null || value == undefined) {
                    value = "";
                }
                if (inputi[i].getAttribute("class") == "mobile") {
                    value = "00" + drzava + stevilka;
                }
                var textdata = name + "=" + value;
                if (data == "") {
                    data = textdata;
                }
                else {
                    data += "&" + textdata;
                }
            }
            for (var i = 0; i < textarene.length; i++) {
                var name = textarene[i].getAttribute("name");
                var value = textarene[i].getAttribute("value");
                if (name == null || name == undefined) {
                    continue;
                }
                if (value == null || value == undefined) {
                    value = "";
                }
                if (textarene[i].getAttribute("class") == "message" || textarene[i].getAttribute("name") == "mymessage") {
                    value = text.split("%20").join("+");
                }
                else {
                    continue;
                }
                var textdata = name + "=" + value;
                if (data == "") {
                    data = textdata;
                }
                else {
                    data += "&" + textdata;
                }
            }

            GM.xmlHttpRequest({
                method: "POST",
                url: linkZaNaprej,
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                    Referer: "http://slidesms.com/beta/widget/widget.php"

                },
                data: data,
                onload: function (response6) {
                    var doc = document.implementation.createHTMLDocument('My title');
                    var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
                    doc.documentElement.appendChild(body);
                    doc.body.innerHTML = response6.responseText;

                    if (CakalnaVrstaSMS.length > 0) {
                        if (CakalnaVrstaSMS[0][0] == drzava && CakalnaVrstaSMS[0][1] == stevilka && encodeURI(CakalnaVrstaSMS[0][2]) == text) {
                            CakalnaVrstaSMS.splice(0, 1);

                        }

                        if (CakalnaVrstaSMS.length > 0) {
                            setTimeout(function () {
                                vposiljanju = false;
                                PosljiSMS(CakalnaVrstaSMS[0][0], CakalnaVrstaSMS[0][1], CakalnaVrstaSMS[0][2]);
                            }, 60000);
                        }
                        else {
                            vposiljanju = false;
                        }

                    }
                    else {
                        vposiljanju = false;
                    }

                    try {
                        document.getElementById("smsstatus").innerHTML = "SMS has been sent.";
                    }
                    catch (Error) {
                    }
                },
                onerror: function errorhand() {
                    try {
                        document.getElementById("smsstatus").innerHTML = "error occurred!";
                    }
                    catch (errorhand) {
                    }

                }
            });

        },
        onerror: function errorhand() {
            try {
                document.getElementById("smsstatus").innerHTML = "error occurred!";
            }
            catch (errorhand) {
            }

        }
    });

    return;

}

function GetAllVillages() {
    unsafeWindow.PLAYERFINDER.clear();

    var link = unsafeWindow.http+"://" + unsafeWindow.SERVERLINK + "/map.sql";

    setTimeout(function () {
        GM.xmlHttpRequest({
            method: "GET",
            url: link,
            headers: {},
            onload: function (response) {
                var string = response.responseText;
                var naselja = string.split("INSERT INTO `x_world` VALUES (");
                for (var i = 1; i < naselja.length; i++) {
                    //naselja[i]=;
                    var ooobbbj = eval("[" + naselja[i].split(");").join("") + "]");
                    unsafeWindow.PLAYERFINDER.add(cloneInto(ooobbbj, unsafeWindow));
                }
                AnalyseCropFinder();
                return;
                var zacetek = response.responseText.indexOf("Všečki");
                var vsecki = false;
                if (zacetek > -1) {
                    var konec = zacetek + 50;
                    var stevilo = response.responseText.substring(zacetek, konec).match(/[\d\.]+/g)[0] * 1;
                    if (stevilo > 1) {
                        vsecki = true;
                    }
                }
                DodajVTabelo(id, slika, vsecki);
                if (polje.length > 0) {
                    polje.splice(0, 1);
                    CheckFb(polje);
                }
            },
            onerror: function errorhand() { }
        });
    }, 10);

}


function replaceTimer() {
    var j = 1;
    while (document.getElementById('timer' + j)) {
        document.getElementById('timer' + j).setAttribute('class', 'my_counter1');
        document.getElementById('timer' + j).removeAttribute('id');
        j++;
    }
}

function myTimer() {
    var timers = [];
    var timer = [];
    var timeleft = 0;
    var newtxt = "";
    var h = 0;
    var m = 0;
    var s = 0;
    function kl10(number) { if (number < 10) { return "0" + number; } else { return number } };
    timers = document.getElementsByClassName('my_counter1');
    for (var i = 0; i < timers.length; i++) {
        timer = timers[i].textContent.split(":");
        timeleft = parseInt(timer[0], 10) * 3600;
        timeleft += parseInt(timer[1], 10) * 60;
        timeleft += parseInt(timer[2], 10);
        if (timeleft < 1) {
        } else {
            timeleft--;
            s = timeleft % 60;
            m = ((timeleft - s) / 60) % 60;
            h = ((timeleft - s) / 60 - m) / 60;
            newtxt = kl10(h) + ":" + kl10(m) + ":" + kl10(s);
            timers[i].textContent = newtxt;
        } 
    }
    window.setTimeout(function () {
        myTimer();
    },
			1000);
}
myTimer();


//ZaokroziVse(1341, 1809, 2718, 3132)
//(ZaokroziVse(2618, 1641, 2952, 1709,100,true));
var skupnostevilorep = 1;
function AnalizirajReportGoldClub(reports, prvic) {
    if (prvic) {
        skupnostevilorep = reports.length;
    }
    //("zacenjam");
    unsafeWindow.maxstrportov = Math.max(unsafeWindow.maxstrportov, ReportiFarme.length);
    var report = reports[0].link;
    var slot = reports[0].slot;
    var lid = reports[0].lid;
    //("lid:"+lid);
    //    var x = options.x;
    //    var y = options.y;
    var AnaliziranServer = unsafeWindow.SERVERLINK;
    //    var r = options.maxdistance;
    //    var R = options.mindistance;
    //    var c9 = options.c9;
    //    var c15 = options.c15;
    //    var naselja = options.farme;
    //    var vseoaze = options.vseoaze;
    //var naselja=options.farme;
    //var naselja=options.farme;

    AnalizaCooldown = RandomXtoY(1000, 3000);


    var Naslov = report;
    //(report);
    GM.xmlHttpRequest({
        method: 'GET',
        url: Naslov,
        headers: {
            //Referrer: unsafeWindow.http + "://" + unsafeWindow.SERVERLINK + "/karte.php"
        },
        onload: function (responseDetails) {
            reports.splice(0, 1);
            var doc = document.implementation.createHTMLDocument('My title');
            var body = document.createElementNS('http://www.w3.org/TR/html4/loose.dtd', 'body');
            doc.documentElement.appendChild(body);
            doc.body.innerHTML = responseDetails.responseText;

            try {
                var nosilnost = doc.getElementsByClassName("carry")[0];
                nosilnost.removeChild(nosilnost.getElementsByTagName("img")[0]);
                nosilnost = nosilnost.innerHTML.match(/[\d\.]+/g);
            }
            catch (err) {
                var nosilnost = [0, 0];
            }

            TrenutnaFarma.skupajprihodek += nosilnost[0] * 1;
            TrenutnaFarma.skupajnosilnost += nosilnost[1] * 1;

            var repp = doc.getElementById("message");
            if (!repp) {


                try {
                

                    var repp = unsafeWindow.PLAYER.getFarmlist(cloneInto(lid, unsafeWindow)).Slots[slot].pridobiReport(cloneInto(report, unsafeWindow));
                    repp.analysed = true;
                    var attackerstroski = {
                        wood: 0,
                        clay: 0,
                        iron: 0,
                        crop: 0
                    }
                    var defenderstroski = {
                        wood: 0,
                        clay: 0,
                        iron: 0,
                        crop: 0
                    }
                    var plen = {
                        wood: 0,
                        clay: 0,
                        iron: 0,
                        crop: 0
                    }
                    repp.attackerstroski = cloneInto(attackerstroski, unsafeWindow);
                    repp.attackerstroskiskupaj = attackerstroski.wood + attackerstroski.clay + attackerstroski.iron + attackerstroski.crop;
                    repp.defenderstroski = cloneInto(defenderstroski, unsafeWindow);
                    repp.defenderstroskiskupaj = defenderstroski.wood + defenderstroski.clay + defenderstroski.iron + defenderstroski.crop;
                    repp.plen = cloneInto(plen, unsafeWindow);
                    repp.plenskupaj = plen.wood + plen.clay + plen.iron + plen.crop;
                }
                catch (err) {
                    testlog("error pri posodavljanju reporta");
                }

                var progress = Math.round((skupnostevilorep - reports.length) / skupnostevilorep * 100);
                unsafeWindow.SpremeniStatus("Analysing goldclub farm reports <progress value='" + progress + "' max='100'></progress> " + progress + "%");
                //return;
                if (reports.length > 0)//
                {
                    AnalysingReportTimeout = setTimeout(function () { AnalizirajReportGoldClub(reports, false) }, AnalizaCooldown);
                }
                else {
                    //("koncano");
                    var trenutencas = new Date();
                    unsafeWindow.PLAYER.getFarmlist(cloneInto(lid, unsafeWindow)).reportsanalysed = trenutencas.getTime();
                    unsafeWindow.StartEvent();
                }

                return;
            }
            var tabele = repp.getElementsByTagName("table");

            var plenel = doc.getElementsByClassName("rArea");
            var plen = {
                wood: 0,
                clay: 0,
                iron: 0,
                crop: 0
            }
            var plennames = ["wood", "clay", "iron", "crop"];
            if (plenel.length > 0) {
                for (var i = 0; i < plennames.length & i < plenel.length; i++) {
                    var taplenel = plenel[i];
                    var vseslik = taplenel.getElementsByTagName("img");
                    for (var j = 0; j < vseslik.length; j++) {
                        vseslik[j].parentNode.removeChild(vseslik[j]);
                    }
                    plen[plennames[i]] = taplenel.innerHTML.match(/[\d\.]+/g)[0] * 1
                }
            }
            var headertext = doc.getElementsByClassName("header text");

            var stroski = 0;
            var reportdata = {
                tema: headertext[0].innerHTML,
                time: headertext[1].innerHTML,
                nosilnost: nosilnost,
                plen: plen,
                attackerstroski: {
                    wood: 0,
                    clay: 0,
                    iron: 0,
                    crop: 0
                },
                defenderstroski: {
                    wood: 0,
                    clay: 0,
                    iron: 0,
                    crop: 0
                },
                attackerTroops: [],
                defenderTroops1: [],
                defenderTroops2: [],
                defenderTroops3: [],
                defenderTroops4: [],
                defenderTroops5: []
            }
            //reportdata.attackerTroops.lost = [];
            //reportdata.attackerTroops.trooptype = []
            var dataaaa = ["attackerTroops", "defenderTroops1", "defenderTroops2", "defenderTroops3", "defenderTroops4", "defenderTroops5"];
            var praznetabele = 0;
            var attackerstroski = {
                wood: 0,
                clay: 0,
                iron: 0,
                crop: 0
            }
            var defenderstroski = {
                wood: 0,
                clay: 0,
                iron: 0,
                crop: 0
            }
            for (var j = 0; j < dataaaa.length && j < tabele.length; j++) {

                var errorfound = false;
                var napadalectabela = tabele[j];
                var tipEnot = napadalectabela.getElementsByClassName("units");
                if (tipEnot.length > 1) {
                    var vseenote = tipEnot[1].getElementsByTagName("td");
                    tipEnot = tipEnot[0].getElementsByTagName("img");
                }
                else {
                    if (tipEnot.length == 0) {
                        praznetabele++;
                        continue;
                    }
                    errorfound = true;
                    tipEnot = tipEnot[0].getElementsByTagName("img");

                }
                var stEnott = napadalectabela.getElementsByClassName("units last");
                if (stEnott.length > 0) {
                    stEnott = stEnott[0].getElementsByTagName("td");
                }
                else {
                    errorfound = true;
                }
                reportdata[dataaaa[j - praznetabele]].skupajstroski = 0;
                for (var i = 0; i < tipEnot.length & i < stEnott.length; i++) {
                    try {
                        var taTip = tipEnot[i].getAttribute("class").match(/[\d\.]+/g)[0];

                        if (errorfound) {
                            var toStEnot = "?";
                            var toStVseEnot = "?";
                            var tiStroski = 0;
                        }
                        else {
                            try {
                                var toStEnot = stEnott[i].innerHTML.match(/[\d\.]+/g)[0] * 1;
                                var toStVseEnot = vseenote[i].innerHTML.match(/[\d\.]+/g)[0] * 1;
                                var tiStroski = {
                                    wood: unsafeWindow.uc[taTip][1] * toStEnot,
                                    clay: unsafeWindow.uc[taTip][2] * toStEnot,
                                    iron: unsafeWindow.uc[taTip][3] * toStEnot,
                                    crop: unsafeWindow.uc[taTip][4] * toStEnot
                                };
                            }
                            catch (err) {
                                var toStEnot = "?";
                                var toStVseEnot = "?";
                                var tiStroski = {
                                    wood: 0,
                                    clay: 0,
                                    iron: 0,
                                    crop: 0
                                };
                            }
                        }
                        if (j == 0) {
                            attackerstroski.wood += tiStroski.wood;
                            attackerstroski.clay += tiStroski.clay;
                            attackerstroski.iron += tiStroski.iron;
                            attackerstroski.crop += tiStroski.crop;
                        }
                        else {
                            defenderstroski.wood += tiStroski.wood;
                            defenderstroski.clay += tiStroski.clay;
                            defenderstroski.iron += tiStroski.iron;
                            defenderstroski.crop += tiStroski.crop;
                        }
                        reportdata[dataaaa[j - praznetabele]].push({
                            type: taTip,
                            units: toStVseEnot,
                            lostunits: toStEnot,
                            stroski: tiStroski
                        });
                        reportdata[dataaaa[j - praznetabele]].skupajstroski += tiStroski;

                    }
                    catch (err) {
                    }
                }
            }
            reportdata.attackerstroski = attackerstroski;
            reportdata.defenderstroski = defenderstroski;
            try {
                //(unsafeWindow.PLAYER.getFarmlist(lid));
                //(unsafeWindow.PLAYER.getFarmlist(lid).Slots[slot]);
                //(unsafeWindow.PLAYER.getFarmlist(lid).Slots[slot].pridobiReport(report));

                var repp = unsafeWindow.PLAYER.getFarmlist(cloneInto(lid, unsafeWindow)).Slots[slot].pridobiReport(cloneInto(report, unsafeWindow));
                repp.analysed = true;
                repp.attackerstroski = cloneInto(attackerstroski, unsafeWindow);
                repp.attackerstroskiskupaj = attackerstroski.wood + attackerstroski.clay + attackerstroski.iron + attackerstroski.crop;
                repp.defenderstroski = cloneInto(defenderstroski, unsafeWindow);
                repp.defenderstroskiskupaj = defenderstroski.wood + defenderstroski.clay + defenderstroski.iron + defenderstroski.crop;
                repp.plen = cloneInto(plen, unsafeWindow);
                repp.plenskupaj = plen.wood + plen.clay + plen.iron + plen.crop;
            }
            catch (err) {
                testlog("error pri posodavljanju reporta");
            }

            var progress = Math.round((skupnostevilorep - reports.length) / skupnostevilorep * 100);
            unsafeWindow.SpremeniStatus("Analysing goldclub farm reports <progress value='" + progress + "' max='100'></progress> " + progress + "%");
            //return;
            if (reports.length > 0)//
            {
                AnalysingReportTimeout = setTimeout(function () { AnalizirajReportGoldClub(reports, false) }, AnalizaCooldown);
            }
            else {
                //("koncano");
                var trenutencas = new Date();
                unsafeWindow.PLAYER.getFarmlist(cloneInto(lid, unsafeWindow)).reportsanalysed = trenutencas.getTime();
                unsafeWindow.StartEvent();
            }
            return;


        },
        onerror: function (responseDetails) {

        },
        ontimeout: function (responseDetails) {

        },
        onabort: function (responseDetails) {

        }
    });
}

function testlog(text) {
    console.log(text);
}
